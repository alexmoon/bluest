// WARNING:  This file was autogenerated by java-spaghetti.  Any changes to this file may be lost!!!
#![allow(unused_imports)]
#![allow(non_camel_case_types)] // We map Java inner classes to Outer_Inner
#![allow(dead_code)] // We generate structs for private Java types too, just in case.
#![allow(deprecated)] // We're generating deprecated types/methods
#![allow(non_upper_case_globals)] // We might be generating Java style fields/methods
#![allow(non_snake_case)] // We might be generating Java style fields/methods
#![allow(clippy::all)] // we don't ensure generated bindings are clippy-compliant at all.
#![allow(unsafe_code)] // play nice if user has `deny(unsafe_code)` in their crate.

mod util {
    use std::char::DecodeUtf16Error;
    use std::fmt;

    use java_spaghetti::sys::jsize;
    use java_spaghetti::{Env, JavaDebug, Local, Ref, StringChars, ThrowableType};

    use super::java::lang::{String as JString, Throwable};

    impl JavaDebug for Throwable {
        fn fmt(self: &Ref<'_, Self>, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            writeln!(f, "java::lang::Throwable")?;

            match self.getMessage() {
                Ok(Some(message)) => writeln!(f, "    getMessage:            {:?}", message)?,
                Ok(None) => writeln!(f, "    getMessage:            N/A (returned null)")?,
                Err(_) => writeln!(f, "    getMessage:            N/A (threw an exception!)")?,
            }

            match self.getLocalizedMessage() {
                Ok(Some(message)) => writeln!(f, "    getLocalizedMessage:   {:?}", message)?,
                Ok(None) => writeln!(f, "    getLocalizedMessage:   N/A (returned null)")?,
                Err(_) => writeln!(f, "    getLocalizedMessage:   N/A (threw an exception!)")?,
            }

            match self.getStackTrace() {
                Err(_) => writeln!(f, "    getStackTrace:         N/A (threw an exception!)")?,
                Ok(None) => writeln!(f, "    getStackTrace:         N/A (returned null)")?,
                Ok(Some(stack_trace)) => {
                    writeln!(f, "    getStackTrace:")?;
                    for frame in stack_trace.iter() {
                        match frame {
                            None => writeln!(f, "        N/A (frame was null)")?,
                            Some(frame) => {
                                let file_line = match (frame.getFileName(), frame.getLineNumber()) {
                                    (Ok(Some(file)), Ok(line)) => {
                                        format!("{}({}):", file.to_string_lossy(), line)
                                    }
                                    (Ok(Some(file)), _) => format!("{}:", file.to_string_lossy()),
                                    (_, _) => "N/A (getFileName threw an exception or returned null)".to_owned(),
                                };

                                let class_method = match (frame.getClassName(), frame.getMethodName()) {
                                    (Ok(Some(class)), Ok(Some(method))) => {
                                        format!("{}.{}", class.to_string_lossy(), method.to_string_lossy())
                                    }
                                    (Ok(Some(class)), _) => class.to_string_lossy(),
                                    (_, Ok(Some(method))) => method.to_string_lossy(),
                                    (_, _) => "N/A (getClassName + getMethodName threw exceptions or returned null)"
                                        .to_owned(),
                                };

                                writeln!(f, "        {:120}{}", file_line, class_method)?;
                            }
                        }
                    }
                }
            }

            // Consider also dumping:
            // API level 1+:
            //      getCause()
            // API level 19+:
            //      getSuppressed()

            Ok(())
        }
    }

    impl JString {
        /// Create new local string from an Env + AsRef<str>
        pub fn from_env_str<'env, S: AsRef<str>>(env: Env<'env>, string: S) -> Local<'env, Self> {
            let chars = string.as_ref().encode_utf16().collect::<Vec<_>>();

            let string = unsafe { env.new_string(chars.as_ptr(), chars.len() as jsize) };
            unsafe { Local::from_raw(env, string) }
        }

        fn string_chars<'env>(self: &Ref<'env, Self>) -> StringChars<'env> {
            unsafe { StringChars::from_env_jstring(self.env(), self.as_raw()) }
        }

        /// Returns a new [Ok]\([String]\), or an [Err]\([DecodeUtf16Error]\) if if it contained any invalid UTF16.
        ///
        /// [Ok]:                       https://doc.rust-lang.org/std/result/enum.Result.html#variant.Ok
        /// [Err]:                      https://doc.rust-lang.org/std/result/enum.Result.html#variant.Err
        /// [DecodeUtf16Error]:         https://doc.rust-lang.org/std/char/struct.DecodeUtf16Error.html
        /// [String]:                   https://doc.rust-lang.org/std/string/struct.String.html
        /// [REPLACEMENT_CHARACTER]:    https://doc.rust-lang.org/std/char/constant.REPLACEMENT_CHARACTER.html
        pub fn to_string(self: &Ref<'_, Self>) -> Result<String, DecodeUtf16Error> {
            self.string_chars().to_string()
        }

        /// Returns a new [String] with any invalid UTF16 characters replaced with [REPLACEMENT_CHARACTER]s (`'\u{FFFD}'`.)
        ///
        /// [String]:                   https://doc.rust-lang.org/std/string/struct.String.html
        /// [REPLACEMENT_CHARACTER]:    https://doc.rust-lang.org/std/char/constant.REPLACEMENT_CHARACTER.html
        pub fn to_string_lossy(self: &Ref<'_, Self>) -> String {
            self.string_chars().to_string_lossy()
        }
    }

    // OsString doesn't implement Display, so neither does java::lang::String.
    impl JavaDebug for JString {
        fn fmt(self: &Ref<'_, Self>, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            fmt::Debug::fmt(&self.to_string_lossy(), f) // XXX: Unneccessary alloc?  Shouldn't use lossy here?
        }
    }

    impl ThrowableType for Throwable {}
}

pub mod android {

    pub mod bluetooth {

        pub mod le {
            #[doc = "class [AdvertiseCallback](https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html)"]
            pub enum AdvertiseCallback {}
            unsafe impl ::java_spaghetti::ReferenceType for AdvertiseCallback {}
            unsafe impl ::java_spaghetti::JniType for AdvertiseCallback {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/AdvertiseCallback")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for AdvertiseCallback {}
            impl AdvertiseCallback {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/AdvertiseCallback"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[AdvertiseCallback](https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html#AdvertiseCallback())"]
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"<init>",
                                    c"()V",
                                ))
                            })
                            .as_raw();
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[onStartSuccess](https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html#onStartSuccess(android.bluetooth.le.AdvertiseSettings))"]
                pub fn onStartSuccess<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<AdvertiseSettings>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"onStartSuccess",
                                    c"(Landroid/bluetooth/le/AdvertiseSettings;)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[onStartFailure](https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html#onStartFailure(int))"]
                pub fn onStartFailure<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"onStartFailure",
                                    c"(I)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "public static final [ADVERTISE_FAILED_ALREADY_STARTED](https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html#ADVERTISE_FAILED_ALREADY_STARTED)"]
                pub const ADVERTISE_FAILED_ALREADY_STARTED: i32 = 3;
                #[doc = "public static final [ADVERTISE_FAILED_DATA_TOO_LARGE](https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html#ADVERTISE_FAILED_DATA_TOO_LARGE)"]
                pub const ADVERTISE_FAILED_DATA_TOO_LARGE: i32 = 1;
                #[doc = "public static final [ADVERTISE_FAILED_FEATURE_UNSUPPORTED](https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html#ADVERTISE_FAILED_FEATURE_UNSUPPORTED)"]
                pub const ADVERTISE_FAILED_FEATURE_UNSUPPORTED: i32 = 5;
                #[doc = "public static final [ADVERTISE_FAILED_INTERNAL_ERROR](https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html#ADVERTISE_FAILED_INTERNAL_ERROR)"]
                pub const ADVERTISE_FAILED_INTERNAL_ERROR: i32 = 4;
                #[doc = "public static final [ADVERTISE_FAILED_TOO_MANY_ADVERTISERS](https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html#ADVERTISE_FAILED_TOO_MANY_ADVERTISERS)"]
                pub const ADVERTISE_FAILED_TOO_MANY_ADVERTISERS: i32 = 2;
            }
            #[doc = "final class [AdvertiseData](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html)"]
            pub enum AdvertiseData {}
            unsafe impl ::java_spaghetti::ReferenceType for AdvertiseData {}
            unsafe impl ::java_spaghetti::JniType for AdvertiseData {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/AdvertiseData")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::os::Parcelable> for AdvertiseData {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for AdvertiseData {}
            impl AdvertiseData {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/AdvertiseData"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[getServiceUuids](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#getServiceUuids())"]
                pub fn getServiceUuids<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::util::List>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getServiceUuids",
                                    c"()Ljava/util/List;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getServiceSolicitationUuids](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#getServiceSolicitationUuids())"]
                pub fn getServiceSolicitationUuids<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::util::List>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getServiceSolicitationUuids",
                                    c"()Ljava/util/List;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTransportDiscoveryData](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#getTransportDiscoveryData())"]
                pub fn getTransportDiscoveryData<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::util::List>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTransportDiscoveryData",
                                    c"()Ljava/util/List;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getManufacturerSpecificData](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#getManufacturerSpecificData())"]
                pub fn getManufacturerSpecificData<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::util::SparseArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getManufacturerSpecificData",
                                    c"()Landroid/util/SparseArray;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getServiceData](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#getServiceData())"]
                pub fn getServiceData<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::util::Map>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getServiceData",
                                    c"()Ljava/util/Map;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getIncludeTxPowerLevel](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#getIncludeTxPowerLevel())"]
                pub fn getIncludeTxPowerLevel<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getIncludeTxPowerLevel",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getIncludeDeviceName](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#getIncludeDeviceName())"]
                pub fn getIncludeDeviceName<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getIncludeDeviceName",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[hashCode](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#hashCode())"]
                pub fn hashCode<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"hashCode",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[equals](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#equals(java.lang.Object))"]
                pub fn equals<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::super::java::lang::Object>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"equals",
                                    c"(Ljava/lang/Object;)Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[toString](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#toString())"]
                pub fn toString<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"toString",
                                    c"()Ljava/lang/String;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#describeContents())"]
                pub fn describeContents<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"describeContents",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "final class [AdvertiseData.Builder](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html)"]
            pub enum AdvertiseData_Builder {}
            unsafe impl ::java_spaghetti::ReferenceType for AdvertiseData_Builder {}
            unsafe impl ::java_spaghetti::JniType for AdvertiseData_Builder {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/AdvertiseData$Builder")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for AdvertiseData_Builder {}
            impl AdvertiseData_Builder {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/AdvertiseData$Builder"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[Builder](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html#Builder())"]
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"<init>",
                                    c"()V",
                                ))
                            })
                            .as_raw();
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[addServiceUuid](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html#addServiceUuid(android.os.ParcelUuid))"]
                pub fn addServiceUuid<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseData_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"addServiceUuid",
                                    c"(Landroid/os/ParcelUuid;)Landroid/bluetooth/le/AdvertiseData$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[addServiceSolicitationUuid](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html#addServiceSolicitationUuid(android.os.ParcelUuid))"]
                pub fn addServiceSolicitationUuid<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseData_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"addServiceSolicitationUuid",
                                    c"(Landroid/os/ParcelUuid;)Landroid/bluetooth/le/AdvertiseData$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[addServiceData](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html#addServiceData(android.os.ParcelUuid,%20byte[]))"]
                pub fn addServiceData<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                    arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseData_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"addServiceData",
                                    c"(Landroid/os/ParcelUuid;[B)Landroid/bluetooth/le/AdvertiseData$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[addTransportDiscoveryData](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html#addTransportDiscoveryData(android.bluetooth.le.TransportDiscoveryData))"]
                pub fn addTransportDiscoveryData<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<TransportDiscoveryData>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseData_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"addTransportDiscoveryData" , c"(Landroid/bluetooth/le/TransportDiscoveryData;)Landroid/bluetooth/le/AdvertiseData$Builder;" ))). as_raw ();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[addManufacturerData](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html#addManufacturerData(int,%20byte[]))"]
                pub fn addManufacturerData<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                    arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseData_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"addManufacturerData",
                                    c"(I[B)Landroid/bluetooth/le/AdvertiseData$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setIncludeTxPowerLevel](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html#setIncludeTxPowerLevel(boolean))"]
                pub fn setIncludeTxPowerLevel<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseData_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setIncludeTxPowerLevel",
                                    c"(Z)Landroid/bluetooth/le/AdvertiseData$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setIncludeDeviceName](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html#setIncludeDeviceName(boolean))"]
                pub fn setIncludeDeviceName<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseData_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setIncludeDeviceName",
                                    c"(Z)Landroid/bluetooth/le/AdvertiseData$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[build](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html#build())"]
                pub fn build<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseData>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"build",
                                    c"()Landroid/bluetooth/le/AdvertiseData;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "final class [AdvertiseSettings](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html)"]
            pub enum AdvertiseSettings {}
            unsafe impl ::java_spaghetti::ReferenceType for AdvertiseSettings {}
            unsafe impl ::java_spaghetti::JniType for AdvertiseSettings {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/AdvertiseSettings")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::os::Parcelable> for AdvertiseSettings {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for AdvertiseSettings {}
            impl AdvertiseSettings {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/AdvertiseSettings"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[getMode](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#getMode())"]
                pub fn getMode<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getMode",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTxPowerLevel](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#getTxPowerLevel())"]
                pub fn getTxPowerLevel<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTxPowerLevel",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isConnectable](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#isConnectable())"]
                pub fn isConnectable<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isConnectable",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isDiscoverable](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#isDiscoverable())"]
                pub fn isDiscoverable<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isDiscoverable",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTimeout](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#getTimeout())"]
                pub fn getTimeout<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTimeout",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[toString](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#toString())"]
                pub fn toString<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"toString",
                                    c"()Ljava/lang/String;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#describeContents())"]
                pub fn describeContents<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"describeContents",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "public static final [ADVERTISE_MODE_BALANCED](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_MODE_BALANCED)"]
                pub const ADVERTISE_MODE_BALANCED: i32 = 1;
                #[doc = "public static final [ADVERTISE_MODE_LOW_LATENCY](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_MODE_LOW_LATENCY)"]
                pub const ADVERTISE_MODE_LOW_LATENCY: i32 = 2;
                #[doc = "public static final [ADVERTISE_MODE_LOW_POWER](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_MODE_LOW_POWER)"]
                pub const ADVERTISE_MODE_LOW_POWER: i32 = 0;
                #[doc = "public static final [ADVERTISE_TX_POWER_HIGH](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_TX_POWER_HIGH)"]
                pub const ADVERTISE_TX_POWER_HIGH: i32 = 3;
                #[doc = "public static final [ADVERTISE_TX_POWER_LOW](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_TX_POWER_LOW)"]
                pub const ADVERTISE_TX_POWER_LOW: i32 = 1;
                #[doc = "public static final [ADVERTISE_TX_POWER_MEDIUM](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_TX_POWER_MEDIUM)"]
                pub const ADVERTISE_TX_POWER_MEDIUM: i32 = 2;
                #[doc = "public static final [ADVERTISE_TX_POWER_ULTRA_LOW](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_TX_POWER_ULTRA_LOW)"]
                pub const ADVERTISE_TX_POWER_ULTRA_LOW: i32 = 0;
            }
            #[doc = "final class [AdvertiseSettings.Builder](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html)"]
            pub enum AdvertiseSettings_Builder {}
            unsafe impl ::java_spaghetti::ReferenceType for AdvertiseSettings_Builder {}
            unsafe impl ::java_spaghetti::JniType for AdvertiseSettings_Builder {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/AdvertiseSettings$Builder")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for AdvertiseSettings_Builder {}
            impl AdvertiseSettings_Builder {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/AdvertiseSettings$Builder"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[Builder](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html#Builder())"]
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"<init>",
                                    c"()V",
                                ))
                            })
                            .as_raw();
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setAdvertiseMode](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html#setAdvertiseMode(int))"]
                pub fn setAdvertiseMode<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setAdvertiseMode",
                                    c"(I)Landroid/bluetooth/le/AdvertiseSettings$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setTxPowerLevel](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html#setTxPowerLevel(int))"]
                pub fn setTxPowerLevel<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setTxPowerLevel",
                                    c"(I)Landroid/bluetooth/le/AdvertiseSettings$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setConnectable](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html#setConnectable(boolean))"]
                pub fn setConnectable<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setConnectable",
                                    c"(Z)Landroid/bluetooth/le/AdvertiseSettings$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setDiscoverable](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html#setDiscoverable(boolean))"]
                pub fn setDiscoverable<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setDiscoverable",
                                    c"(Z)Landroid/bluetooth/le/AdvertiseSettings$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setTimeout](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html#setTimeout(int))"]
                pub fn setTimeout<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setTimeout",
                                    c"(I)Landroid/bluetooth/le/AdvertiseSettings$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[build](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html#build())"]
                pub fn build<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseSettings>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"build",
                                    c"()Landroid/bluetooth/le/AdvertiseSettings;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "final class [AdvertisingSet](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSet.html)"]
            pub enum AdvertisingSet {}
            unsafe impl ::java_spaghetti::ReferenceType for AdvertisingSet {}
            unsafe impl ::java_spaghetti::JniType for AdvertisingSet {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/AdvertisingSet")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for AdvertisingSet {}
            impl AdvertisingSet {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/AdvertisingSet"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[enableAdvertising](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSet.html#enableAdvertising(boolean,%20int,%20int))"]
                pub fn enableAdvertising<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: bool,
                    arg1: i32,
                    arg2: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"enableAdvertising",
                                    c"(ZII)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setAdvertisingData](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSet.html#setAdvertisingData(android.bluetooth.le.AdvertiseData))"]
                pub fn setAdvertisingData<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<AdvertiseData>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setAdvertisingData",
                                    c"(Landroid/bluetooth/le/AdvertiseData;)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setScanResponseData](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSet.html#setScanResponseData(android.bluetooth.le.AdvertiseData))"]
                pub fn setScanResponseData<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<AdvertiseData>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setScanResponseData",
                                    c"(Landroid/bluetooth/le/AdvertiseData;)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setAdvertisingParameters](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSet.html#setAdvertisingParameters(android.bluetooth.le.AdvertisingSetParameters))"]
                pub fn setAdvertisingParameters<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSetParameters>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setAdvertisingParameters",
                                    c"(Landroid/bluetooth/le/AdvertisingSetParameters;)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setPeriodicAdvertisingParameters](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSet.html#setPeriodicAdvertisingParameters(android.bluetooth.le.PeriodicAdvertisingParameters))"]
                pub fn setPeriodicAdvertisingParameters<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<PeriodicAdvertisingParameters>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setPeriodicAdvertisingParameters",
                                    c"(Landroid/bluetooth/le/PeriodicAdvertisingParameters;)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setPeriodicAdvertisingData](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSet.html#setPeriodicAdvertisingData(android.bluetooth.le.AdvertiseData))"]
                pub fn setPeriodicAdvertisingData<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<AdvertiseData>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setPeriodicAdvertisingData",
                                    c"(Landroid/bluetooth/le/AdvertiseData;)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setPeriodicAdvertisingEnabled](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSet.html#setPeriodicAdvertisingEnabled(boolean))"]
                pub fn setPeriodicAdvertisingEnabled<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: bool,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setPeriodicAdvertisingEnabled",
                                    c"(Z)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "class [AdvertisingSetCallback](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html)"]
            pub enum AdvertisingSetCallback {}
            unsafe impl ::java_spaghetti::ReferenceType for AdvertisingSetCallback {}
            unsafe impl ::java_spaghetti::JniType for AdvertisingSetCallback {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/AdvertisingSetCallback")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for AdvertisingSetCallback {}
            impl AdvertisingSetCallback {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/AdvertisingSetCallback"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[AdvertisingSetCallback](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#AdvertisingSetCallback())"]
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"<init>",
                                    c"()V",
                                ))
                            })
                            .as_raw();
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[onAdvertisingSetStarted](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#onAdvertisingSetStarted(android.bluetooth.le.AdvertisingSet,%20int,%20int))"]
                pub fn onAdvertisingSetStarted<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSet>,
                    arg1: i32,
                    arg2: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"onAdvertisingSetStarted",
                                    c"(Landroid/bluetooth/le/AdvertisingSet;II)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[onAdvertisingSetStopped](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#onAdvertisingSetStopped(android.bluetooth.le.AdvertisingSet))"]
                pub fn onAdvertisingSetStopped<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSet>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"onAdvertisingSetStopped",
                                    c"(Landroid/bluetooth/le/AdvertisingSet;)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[onAdvertisingEnabled](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#onAdvertisingEnabled(android.bluetooth.le.AdvertisingSet,%20boolean,%20int))"]
                pub fn onAdvertisingEnabled<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSet>,
                    arg1: bool,
                    arg2: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"onAdvertisingEnabled",
                                    c"(Landroid/bluetooth/le/AdvertisingSet;ZI)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[onAdvertisingDataSet](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#onAdvertisingDataSet(android.bluetooth.le.AdvertisingSet,%20int))"]
                pub fn onAdvertisingDataSet<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSet>,
                    arg1: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"onAdvertisingDataSet",
                                    c"(Landroid/bluetooth/le/AdvertisingSet;I)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[onScanResponseDataSet](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#onScanResponseDataSet(android.bluetooth.le.AdvertisingSet,%20int))"]
                pub fn onScanResponseDataSet<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSet>,
                    arg1: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"onScanResponseDataSet",
                                    c"(Landroid/bluetooth/le/AdvertisingSet;I)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[onAdvertisingParametersUpdated](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#onAdvertisingParametersUpdated(android.bluetooth.le.AdvertisingSet,%20int,%20int))"]
                pub fn onAdvertisingParametersUpdated<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSet>,
                    arg1: i32,
                    arg2: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"onAdvertisingParametersUpdated",
                                    c"(Landroid/bluetooth/le/AdvertisingSet;II)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[onPeriodicAdvertisingParametersUpdated](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#onPeriodicAdvertisingParametersUpdated(android.bluetooth.le.AdvertisingSet,%20int))"]
                pub fn onPeriodicAdvertisingParametersUpdated<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSet>,
                    arg1: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"onPeriodicAdvertisingParametersUpdated",
                                    c"(Landroid/bluetooth/le/AdvertisingSet;I)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[onPeriodicAdvertisingDataSet](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#onPeriodicAdvertisingDataSet(android.bluetooth.le.AdvertisingSet,%20int))"]
                pub fn onPeriodicAdvertisingDataSet<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSet>,
                    arg1: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"onPeriodicAdvertisingDataSet",
                                    c"(Landroid/bluetooth/le/AdvertisingSet;I)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[onPeriodicAdvertisingEnabled](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#onPeriodicAdvertisingEnabled(android.bluetooth.le.AdvertisingSet,%20boolean,%20int))"]
                pub fn onPeriodicAdvertisingEnabled<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSet>,
                    arg1: bool,
                    arg2: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"onPeriodicAdvertisingEnabled",
                                    c"(Landroid/bluetooth/le/AdvertisingSet;ZI)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "public static final [ADVERTISE_FAILED_ALREADY_STARTED](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#ADVERTISE_FAILED_ALREADY_STARTED)"]
                pub const ADVERTISE_FAILED_ALREADY_STARTED: i32 = 3;
                #[doc = "public static final [ADVERTISE_FAILED_DATA_TOO_LARGE](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#ADVERTISE_FAILED_DATA_TOO_LARGE)"]
                pub const ADVERTISE_FAILED_DATA_TOO_LARGE: i32 = 1;
                #[doc = "public static final [ADVERTISE_FAILED_FEATURE_UNSUPPORTED](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#ADVERTISE_FAILED_FEATURE_UNSUPPORTED)"]
                pub const ADVERTISE_FAILED_FEATURE_UNSUPPORTED: i32 = 5;
                #[doc = "public static final [ADVERTISE_FAILED_INTERNAL_ERROR](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#ADVERTISE_FAILED_INTERNAL_ERROR)"]
                pub const ADVERTISE_FAILED_INTERNAL_ERROR: i32 = 4;
                #[doc = "public static final [ADVERTISE_FAILED_TOO_MANY_ADVERTISERS](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#ADVERTISE_FAILED_TOO_MANY_ADVERTISERS)"]
                pub const ADVERTISE_FAILED_TOO_MANY_ADVERTISERS: i32 = 2;
                #[doc = "public static final [ADVERTISE_SUCCESS](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#ADVERTISE_SUCCESS)"]
                pub const ADVERTISE_SUCCESS: i32 = 0;
            }
            #[doc = "final class [AdvertisingSetParameters](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html)"]
            pub enum AdvertisingSetParameters {}
            unsafe impl ::java_spaghetti::ReferenceType for AdvertisingSetParameters {}
            unsafe impl ::java_spaghetti::JniType for AdvertisingSetParameters {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/AdvertisingSetParameters")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::os::Parcelable> for AdvertisingSetParameters {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for AdvertisingSetParameters {}
            impl AdvertisingSetParameters {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/AdvertisingSetParameters"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[isConnectable](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#isConnectable())"]
                pub fn isConnectable<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isConnectable",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isDiscoverable](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#isDiscoverable())"]
                pub fn isDiscoverable<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isDiscoverable",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isScannable](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#isScannable())"]
                pub fn isScannable<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isScannable",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isLegacy](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#isLegacy())"]
                pub fn isLegacy<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isLegacy",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isAnonymous](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#isAnonymous())"]
                pub fn isAnonymous<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isAnonymous",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[includeTxPower](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#includeTxPower())"]
                pub fn includeTxPower<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"includeTxPower",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getPrimaryPhy](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#getPrimaryPhy())"]
                pub fn getPrimaryPhy<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getPrimaryPhy",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getSecondaryPhy](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#getSecondaryPhy())"]
                pub fn getSecondaryPhy<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getSecondaryPhy",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getInterval](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#getInterval())"]
                pub fn getInterval<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getInterval",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTxPowerLevel](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#getTxPowerLevel())"]
                pub fn getTxPowerLevel<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTxPowerLevel",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[toString](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#toString())"]
                pub fn toString<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"toString",
                                    c"()Ljava/lang/String;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#describeContents())"]
                pub fn describeContents<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"describeContents",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "public static final [INTERVAL_HIGH](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#INTERVAL_HIGH)"]
                pub const INTERVAL_HIGH: i32 = 1600;
                #[doc = "public static final [INTERVAL_LOW](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#INTERVAL_LOW)"]
                pub const INTERVAL_LOW: i32 = 160;
                #[doc = "public static final [INTERVAL_MAX](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#INTERVAL_MAX)"]
                pub const INTERVAL_MAX: i32 = 16777215;
                #[doc = "public static final [INTERVAL_MEDIUM](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#INTERVAL_MEDIUM)"]
                pub const INTERVAL_MEDIUM: i32 = 400;
                #[doc = "public static final [INTERVAL_MIN](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#INTERVAL_MIN)"]
                pub const INTERVAL_MIN: i32 = 160;
                #[doc = "public static final [TX_POWER_HIGH](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#TX_POWER_HIGH)"]
                pub const TX_POWER_HIGH: i32 = 1;
                #[doc = "public static final [TX_POWER_LOW](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#TX_POWER_LOW)"]
                pub const TX_POWER_LOW: i32 = -15;
                #[doc = "public static final [TX_POWER_MAX](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#TX_POWER_MAX)"]
                pub const TX_POWER_MAX: i32 = 1;
                #[doc = "public static final [TX_POWER_MEDIUM](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#TX_POWER_MEDIUM)"]
                pub const TX_POWER_MEDIUM: i32 = -7;
                #[doc = "public static final [TX_POWER_MIN](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#TX_POWER_MIN)"]
                pub const TX_POWER_MIN: i32 = -127;
                #[doc = "public static final [TX_POWER_ULTRA_LOW](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#TX_POWER_ULTRA_LOW)"]
                pub const TX_POWER_ULTRA_LOW: i32 = -21;
            }
            #[doc = "final class [AdvertisingSetParameters.Builder](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html)"]
            pub enum AdvertisingSetParameters_Builder {}
            unsafe impl ::java_spaghetti::ReferenceType for AdvertisingSetParameters_Builder {}
            unsafe impl ::java_spaghetti::JniType for AdvertisingSetParameters_Builder {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/AdvertisingSetParameters$Builder")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object>
                for AdvertisingSetParameters_Builder
            {
            }
            impl AdvertisingSetParameters_Builder {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/AdvertisingSetParameters$Builder"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[Builder](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#Builder())"]
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"<init>",
                                    c"()V",
                                ))
                            })
                            .as_raw();
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setConnectable](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#setConnectable(boolean))"]
                pub fn setConnectable<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setConnectable",
                                    c"(Z)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setDiscoverable](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#setDiscoverable(boolean))"]
                pub fn setDiscoverable<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setDiscoverable",
                                    c"(Z)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setScannable](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#setScannable(boolean))"]
                pub fn setScannable<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setScannable",
                                    c"(Z)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setLegacyMode](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#setLegacyMode(boolean))"]
                pub fn setLegacyMode<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setLegacyMode",
                                    c"(Z)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setAnonymous](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#setAnonymous(boolean))"]
                pub fn setAnonymous<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setAnonymous",
                                    c"(Z)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setIncludeTxPower](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#setIncludeTxPower(boolean))"]
                pub fn setIncludeTxPower<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setIncludeTxPower",
                                    c"(Z)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setPrimaryPhy](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#setPrimaryPhy(int))"]
                pub fn setPrimaryPhy<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setPrimaryPhy",
                                    c"(I)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setSecondaryPhy](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#setSecondaryPhy(int))"]
                pub fn setSecondaryPhy<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setSecondaryPhy",
                                    c"(I)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setInterval](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#setInterval(int))"]
                pub fn setInterval<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setInterval",
                                    c"(I)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setTxPowerLevel](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#setTxPowerLevel(int))"]
                pub fn setTxPowerLevel<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setTxPowerLevel",
                                    c"(I)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[build](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#build())"]
                pub fn build<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"build",
                                    c"()Landroid/bluetooth/le/AdvertisingSetParameters;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "final class [BluetoothLeAdvertiser](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html)"]
            pub enum BluetoothLeAdvertiser {}
            unsafe impl ::java_spaghetti::ReferenceType for BluetoothLeAdvertiser {}
            unsafe impl ::java_spaghetti::JniType for BluetoothLeAdvertiser {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/BluetoothLeAdvertiser")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for BluetoothLeAdvertiser {}
            impl BluetoothLeAdvertiser {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/BluetoothLeAdvertiser"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[startAdvertising](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html#startAdvertising(android.bluetooth.le.AdvertiseSettings,%20android.bluetooth.le.AdvertiseData,%20android.bluetooth.le.AdvertiseCallback))"]
                pub fn startAdvertising_AdvertiseSettings_AdvertiseData_AdvertiseCallback<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<AdvertiseSettings>,
                    arg1: impl ::java_spaghetti::AsArg<AdvertiseData>,
                    arg2: impl ::java_spaghetti::AsArg<AdvertiseCallback>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"startAdvertising" , c"(Landroid/bluetooth/le/AdvertiseSettings;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseCallback;)V" ))). as_raw ();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[startAdvertising](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html#startAdvertising(android.bluetooth.le.AdvertiseSettings,%20android.bluetooth.le.AdvertiseData,%20android.bluetooth.le.AdvertiseData,%20android.bluetooth.le.AdvertiseCallback))"]
                pub fn startAdvertising_AdvertiseSettings_AdvertiseData_AdvertiseData_AdvertiseCallback<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<AdvertiseSettings>,
                    arg1: impl ::java_spaghetti::AsArg<AdvertiseData>,
                    arg2: impl ::java_spaghetti::AsArg<AdvertiseData>,
                    arg3: impl ::java_spaghetti::AsArg<AdvertiseCallback>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"startAdvertising" , c"(Landroid/bluetooth/le/AdvertiseSettings;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseCallback;)V" ))). as_raw ();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[stopAdvertising](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html#stopAdvertising(android.bluetooth.le.AdvertiseCallback))"]
                pub fn stopAdvertising<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<AdvertiseCallback>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"stopAdvertising",
                                    c"(Landroid/bluetooth/le/AdvertiseCallback;)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[startAdvertisingSet](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html#startAdvertisingSet(android.bluetooth.le.AdvertisingSetParameters,%20android.bluetooth.le.AdvertiseData,%20android.bluetooth.le.AdvertiseData,%20android.bluetooth.le.PeriodicAdvertisingParameters,%20android.bluetooth.le.AdvertiseData,%20android.bluetooth.le.AdvertisingSetCallback))"]
                pub fn startAdvertisingSet_AdvertisingSetParameters_AdvertiseData_AdvertiseData_PeriodicAdvertisingParameters_AdvertiseData_AdvertisingSetCallback<
                    'env,
                >(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSetParameters>,
                    arg1: impl ::java_spaghetti::AsArg<AdvertiseData>,
                    arg2: impl ::java_spaghetti::AsArg<AdvertiseData>,
                    arg3: impl ::java_spaghetti::AsArg<PeriodicAdvertisingParameters>,
                    arg4: impl ::java_spaghetti::AsArg<AdvertiseData>,
                    arg5: impl ::java_spaghetti::AsArg<AdvertisingSetCallback>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"startAdvertisingSet" , c"(Landroid/bluetooth/le/AdvertisingSetParameters;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/PeriodicAdvertisingParameters;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertisingSetCallback;)V" ))). as_raw ();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[startAdvertisingSet](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html#startAdvertisingSet(android.bluetooth.le.AdvertisingSetParameters,%20android.bluetooth.le.AdvertiseData,%20android.bluetooth.le.AdvertiseData,%20android.bluetooth.le.PeriodicAdvertisingParameters,%20android.bluetooth.le.AdvertiseData,%20int,%20int,%20android.bluetooth.le.AdvertisingSetCallback))"]
                pub fn startAdvertisingSet_AdvertisingSetParameters_AdvertiseData_AdvertiseData_PeriodicAdvertisingParameters_AdvertiseData_int_int_AdvertisingSetCallback<
                    'env,
                >(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSetParameters>,
                    arg1: impl ::java_spaghetti::AsArg<AdvertiseData>,
                    arg2: impl ::java_spaghetti::AsArg<AdvertiseData>,
                    arg3: impl ::java_spaghetti::AsArg<PeriodicAdvertisingParameters>,
                    arg4: impl ::java_spaghetti::AsArg<AdvertiseData>,
                    arg5: i32,
                    arg6: i32,
                    arg7: impl ::java_spaghetti::AsArg<AdvertisingSetCallback>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg7),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"startAdvertisingSet" , c"(Landroid/bluetooth/le/AdvertisingSetParameters;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/PeriodicAdvertisingParameters;Landroid/bluetooth/le/AdvertiseData;IILandroid/bluetooth/le/AdvertisingSetCallback;)V" ))). as_raw ();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[stopAdvertisingSet](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html#stopAdvertisingSet(android.bluetooth.le.AdvertisingSetCallback))"]
                pub fn stopAdvertisingSet<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSetCallback>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"stopAdvertisingSet",
                                    c"(Landroid/bluetooth/le/AdvertisingSetCallback;)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "final class [BluetoothLeScanner](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html)"]
            pub enum BluetoothLeScanner {}
            unsafe impl ::java_spaghetti::ReferenceType for BluetoothLeScanner {}
            unsafe impl ::java_spaghetti::JniType for BluetoothLeScanner {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/BluetoothLeScanner")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for BluetoothLeScanner {}
            impl BluetoothLeScanner {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/BluetoothLeScanner"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[startScan](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#startScan(android.bluetooth.le.ScanCallback))"]
                pub fn startScan_ScanCallback<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<ScanCallback>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"startScan",
                                    c"(Landroid/bluetooth/le/ScanCallback;)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[startScan](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#startScan(java.util.List,%20android.bluetooth.le.ScanSettings,%20android.bluetooth.le.ScanCallback))"]
                pub fn startScan_List_ScanSettings_ScanCallback<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::super::java::util::List>,
                    arg1: impl ::java_spaghetti::AsArg<ScanSettings>,
                    arg2: impl ::java_spaghetti::AsArg<ScanCallback>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"startScan" , c"(Ljava/util/List;Landroid/bluetooth/le/ScanSettings;Landroid/bluetooth/le/ScanCallback;)V" ))). as_raw ();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[stopScan](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#stopScan(android.bluetooth.le.ScanCallback))"]
                pub fn stopScan_ScanCallback<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<ScanCallback>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"stopScan",
                                    c"(Landroid/bluetooth/le/ScanCallback;)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[flushPendingScanResults](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#flushPendingScanResults(android.bluetooth.le.ScanCallback))"]
                pub fn flushPendingScanResults<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<ScanCallback>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"flushPendingScanResults",
                                    c"(Landroid/bluetooth/le/ScanCallback;)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "public static final [EXTRA_CALLBACK_TYPE](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#EXTRA_CALLBACK_TYPE)"]
                pub const EXTRA_CALLBACK_TYPE: &'static str = "android.bluetooth.le.extra.CALLBACK_TYPE";
                #[doc = "public static final [EXTRA_ERROR_CODE](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#EXTRA_ERROR_CODE)"]
                pub const EXTRA_ERROR_CODE: &'static str = "android.bluetooth.le.extra.ERROR_CODE";
                #[doc = "public static final [EXTRA_LIST_SCAN_RESULT](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#EXTRA_LIST_SCAN_RESULT)"]
                pub const EXTRA_LIST_SCAN_RESULT: &'static str = "android.bluetooth.le.extra.LIST_SCAN_RESULT";
            }
            #[doc = "final class [PeriodicAdvertisingParameters](https://developer.android.com/reference/android/bluetooth/le/PeriodicAdvertisingParameters.html)"]
            pub enum PeriodicAdvertisingParameters {}
            unsafe impl ::java_spaghetti::ReferenceType for PeriodicAdvertisingParameters {}
            unsafe impl ::java_spaghetti::JniType for PeriodicAdvertisingParameters {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/PeriodicAdvertisingParameters")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::os::Parcelable> for PeriodicAdvertisingParameters {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for PeriodicAdvertisingParameters {}
            impl PeriodicAdvertisingParameters {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/PeriodicAdvertisingParameters"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[getIncludeTxPower](https://developer.android.com/reference/android/bluetooth/le/PeriodicAdvertisingParameters.html#getIncludeTxPower())"]
                pub fn getIncludeTxPower<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getIncludeTxPower",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getInterval](https://developer.android.com/reference/android/bluetooth/le/PeriodicAdvertisingParameters.html#getInterval())"]
                pub fn getInterval<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getInterval",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/le/PeriodicAdvertisingParameters.html#describeContents())"]
                pub fn describeContents<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"describeContents",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "final class [PeriodicAdvertisingParameters.Builder](https://developer.android.com/reference/android/bluetooth/le/PeriodicAdvertisingParameters.Builder.html)"]
            pub enum PeriodicAdvertisingParameters_Builder {}
            unsafe impl ::java_spaghetti::ReferenceType for PeriodicAdvertisingParameters_Builder {}
            unsafe impl ::java_spaghetti::JniType for PeriodicAdvertisingParameters_Builder {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/PeriodicAdvertisingParameters$Builder")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object>
                for PeriodicAdvertisingParameters_Builder
            {
            }
            impl PeriodicAdvertisingParameters_Builder {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/PeriodicAdvertisingParameters$Builder"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[Builder](https://developer.android.com/reference/android/bluetooth/le/PeriodicAdvertisingParameters.Builder.html#Builder())"]
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"<init>",
                                    c"()V",
                                ))
                            })
                            .as_raw();
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setIncludeTxPower](https://developer.android.com/reference/android/bluetooth/le/PeriodicAdvertisingParameters.Builder.html#setIncludeTxPower(boolean))"]
                pub fn setIncludeTxPower<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, PeriodicAdvertisingParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setIncludeTxPower",
                                    c"(Z)Landroid/bluetooth/le/PeriodicAdvertisingParameters$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setInterval](https://developer.android.com/reference/android/bluetooth/le/PeriodicAdvertisingParameters.Builder.html#setInterval(int))"]
                pub fn setInterval<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, PeriodicAdvertisingParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setInterval",
                                    c"(I)Landroid/bluetooth/le/PeriodicAdvertisingParameters$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[build](https://developer.android.com/reference/android/bluetooth/le/PeriodicAdvertisingParameters.Builder.html#build())"]
                pub fn build<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, PeriodicAdvertisingParameters>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"build",
                                    c"()Landroid/bluetooth/le/PeriodicAdvertisingParameters;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "class [ScanCallback](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html)"]
            pub enum ScanCallback {}
            unsafe impl ::java_spaghetti::ReferenceType for ScanCallback {}
            unsafe impl ::java_spaghetti::JniType for ScanCallback {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/ScanCallback")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for ScanCallback {}
            impl ScanCallback {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/ScanCallback"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[ScanCallback](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html#ScanCallback())"]
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"<init>",
                                    c"()V",
                                ))
                            })
                            .as_raw();
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[onScanResult](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html#onScanResult(int,%20android.bluetooth.le.ScanResult))"]
                pub fn onScanResult<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                    arg1: impl ::java_spaghetti::AsArg<ScanResult>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"onScanResult",
                                    c"(ILandroid/bluetooth/le/ScanResult;)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[onBatchScanResults](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html#onBatchScanResults(java.util.List))"]
                pub fn onBatchScanResults<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::super::java::util::List>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"onBatchScanResults",
                                    c"(Ljava/util/List;)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[onScanFailed](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html#onScanFailed(int))"]
                pub fn onScanFailed<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"onScanFailed",
                                    c"(I)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "public static final [SCAN_FAILED_ALREADY_STARTED](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html#SCAN_FAILED_ALREADY_STARTED)"]
                pub const SCAN_FAILED_ALREADY_STARTED: i32 = 1;
                #[doc = "public static final [SCAN_FAILED_APPLICATION_REGISTRATION_FAILED](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html#SCAN_FAILED_APPLICATION_REGISTRATION_FAILED)"]
                pub const SCAN_FAILED_APPLICATION_REGISTRATION_FAILED: i32 = 2;
                #[doc = "public static final [SCAN_FAILED_FEATURE_UNSUPPORTED](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html#SCAN_FAILED_FEATURE_UNSUPPORTED)"]
                pub const SCAN_FAILED_FEATURE_UNSUPPORTED: i32 = 4;
                #[doc = "public static final [SCAN_FAILED_INTERNAL_ERROR](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html#SCAN_FAILED_INTERNAL_ERROR)"]
                pub const SCAN_FAILED_INTERNAL_ERROR: i32 = 3;
                #[doc = "public static final [SCAN_FAILED_OUT_OF_HARDWARE_RESOURCES](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html#SCAN_FAILED_OUT_OF_HARDWARE_RESOURCES)"]
                pub const SCAN_FAILED_OUT_OF_HARDWARE_RESOURCES: i32 = 5;
                #[doc = "public static final [SCAN_FAILED_SCANNING_TOO_FREQUENTLY](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html#SCAN_FAILED_SCANNING_TOO_FREQUENTLY)"]
                pub const SCAN_FAILED_SCANNING_TOO_FREQUENTLY: i32 = 6;
            }
            #[unsafe(no_mangle)]
            extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_le_ScanCallback_native_1onScanResult__JILandroid_bluetooth_le_ScanResult_2<
                'env,
            >(
                __jni_env: ::java_spaghetti::Env<'env>,
                _class: *mut (),
                ptr: i64,
                arg0: i32,
                arg1: ::java_spaghetti::Arg<ScanResult>,
            ) -> () {
                let ptr: *const std::sync::Arc<dyn ScanCallbackProxy> =
                    ::std::ptr::with_exposed_provenance(ptr as usize);
                unsafe { (*ptr).onScanResult(__jni_env, arg0, arg1.into_ref(__jni_env)) }
            }
            #[unsafe(no_mangle)]
            extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_le_ScanCallback_native_1onBatchScanResults__JLjava_util_List_2<
                'env,
            >(
                __jni_env: ::java_spaghetti::Env<'env>,
                _class: *mut (),
                ptr: i64,
                arg0: ::java_spaghetti::Arg<super::super::super::java::util::List>,
            ) -> () {
                let ptr: *const std::sync::Arc<dyn ScanCallbackProxy> =
                    ::std::ptr::with_exposed_provenance(ptr as usize);
                unsafe { (*ptr).onBatchScanResults(__jni_env, arg0.into_ref(__jni_env)) }
            }
            #[unsafe(no_mangle)]
            extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_le_ScanCallback_native_1onScanFailed__JI<
                'env,
            >(
                __jni_env: ::java_spaghetti::Env<'env>,
                _class: *mut (),
                ptr: i64,
                arg0: i32,
            ) -> () {
                let ptr: *const std::sync::Arc<dyn ScanCallbackProxy> =
                    ::std::ptr::with_exposed_provenance(ptr as usize);
                unsafe { (*ptr).onScanFailed(__jni_env, arg0) }
            }
            pub trait ScanCallbackProxy: ::std::marker::Send + ::std::marker::Sync + 'static {
                fn onScanResult<'env>(
                    &self,
                    env: ::java_spaghetti::Env<'env>,
                    arg0: i32,
                    arg1: ::std::option::Option<::java_spaghetti::Ref<'env, ScanResult>>,
                ) -> ();
                fn onBatchScanResults<'env>(
                    &self,
                    env: ::java_spaghetti::Env<'env>,
                    arg0: ::std::option::Option<::java_spaghetti::Ref<'env, super::super::super::java::util::List>>,
                ) -> ();
                fn onScanFailed<'env>(&self, env: ::java_spaghetti::Env<'env>, arg0: i32) -> ();
            }
            #[unsafe(no_mangle)]
            extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_le_ScanCallback_native_1finalize__J(
                __jni_env: ::java_spaghetti::Env<'_>,
                _class: *mut (),
                ptr: i64,
            ) {
                let ptr: *mut std::sync::Arc<dyn ScanCallbackProxy> =
                    ::std::ptr::with_exposed_provenance_mut(ptr as usize);
                let _ = unsafe { Box::from_raw(ptr) };
            }
            impl ScanCallback {
                pub fn new_proxy<'env>(
                    env: ::java_spaghetti::Env<'env>,
                    proxy: ::std::sync::Arc<dyn ScanCallbackProxy>,
                ) -> Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    let __jni_class = __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                env,
                                env.require_class(
                                    c"com/github/alexmoon/bluest/proxy/android/bluetooth/le/ScanCallback",
                                ),
                            )
                            .as_global()
                        })
                        .as_raw();
                    let b = ::std::boxed::Box::new(proxy);
                    let ptr = ::std::boxed::Box::into_raw(b);
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::sys::jvalue {
                            j: ptr.expose_provenance() as i64,
                        }];
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(env.require_method(
                                    __jni_class,
                                    c"<init>",
                                    c"(J)V",
                                ))
                            })
                            .as_raw();
                        env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "final class [ScanFilter](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html)"]
            pub enum ScanFilter {}
            unsafe impl ::java_spaghetti::ReferenceType for ScanFilter {}
            unsafe impl ::java_spaghetti::JniType for ScanFilter {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/ScanFilter")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::os::Parcelable> for ScanFilter {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for ScanFilter {}
            impl ScanFilter {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/ScanFilter"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#describeContents())"]
                pub fn describeContents<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"describeContents",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getDeviceName](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getDeviceName())"]
                pub fn getDeviceName<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getDeviceName",
                                    c"()Ljava/lang/String;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getServiceUuid](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getServiceUuid())"]
                pub fn getServiceUuid<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::os::ParcelUuid>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getServiceUuid",
                                    c"()Landroid/os/ParcelUuid;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getServiceUuidMask](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getServiceUuidMask())"]
                pub fn getServiceUuidMask<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::os::ParcelUuid>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getServiceUuidMask",
                                    c"()Landroid/os/ParcelUuid;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getServiceSolicitationUuid](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getServiceSolicitationUuid())"]
                pub fn getServiceSolicitationUuid<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::os::ParcelUuid>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getServiceSolicitationUuid",
                                    c"()Landroid/os/ParcelUuid;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getServiceSolicitationUuidMask](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getServiceSolicitationUuidMask())"]
                pub fn getServiceSolicitationUuidMask<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::os::ParcelUuid>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getServiceSolicitationUuidMask",
                                    c"()Landroid/os/ParcelUuid;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getDeviceAddress](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getDeviceAddress())"]
                pub fn getDeviceAddress<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getDeviceAddress",
                                    c"()Ljava/lang/String;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getServiceData](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getServiceData())"]
                pub fn getServiceData<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getServiceData",
                                    c"()[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getServiceDataMask](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getServiceDataMask())"]
                pub fn getServiceDataMask<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getServiceDataMask",
                                    c"()[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getServiceDataUuid](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getServiceDataUuid())"]
                pub fn getServiceDataUuid<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::os::ParcelUuid>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getServiceDataUuid",
                                    c"()Landroid/os/ParcelUuid;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getManufacturerId](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getManufacturerId())"]
                pub fn getManufacturerId<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getManufacturerId",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getManufacturerData](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getManufacturerData())"]
                pub fn getManufacturerData<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getManufacturerData",
                                    c"()[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getManufacturerDataMask](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getManufacturerDataMask())"]
                pub fn getManufacturerDataMask<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getManufacturerDataMask",
                                    c"()[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getAdvertisingDataType](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getAdvertisingDataType())"]
                pub fn getAdvertisingDataType<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getAdvertisingDataType",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getAdvertisingData](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getAdvertisingData())"]
                pub fn getAdvertisingData<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getAdvertisingData",
                                    c"()[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getAdvertisingDataMask](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getAdvertisingDataMask())"]
                pub fn getAdvertisingDataMask<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getAdvertisingDataMask",
                                    c"()[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[matches](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#matches(android.bluetooth.le.ScanResult))"]
                pub fn matches<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<ScanResult>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"matches",
                                    c"(Landroid/bluetooth/le/ScanResult;)Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[toString](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#toString())"]
                pub fn toString<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"toString",
                                    c"()Ljava/lang/String;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[hashCode](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#hashCode())"]
                pub fn hashCode<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"hashCode",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[equals](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#equals(java.lang.Object))"]
                pub fn equals<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::super::java::lang::Object>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"equals",
                                    c"(Ljava/lang/Object;)Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "final class [ScanFilter.Builder](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html)"]
            pub enum ScanFilter_Builder {}
            unsafe impl ::java_spaghetti::ReferenceType for ScanFilter_Builder {}
            unsafe impl ::java_spaghetti::JniType for ScanFilter_Builder {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/ScanFilter$Builder")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for ScanFilter_Builder {}
            impl ScanFilter_Builder {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/ScanFilter$Builder"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[Builder](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#Builder())"]
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"<init>",
                                    c"()V",
                                ))
                            })
                            .as_raw();
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setDeviceName](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setDeviceName(java.lang.String))"]
                pub fn setDeviceName<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::super::java::lang::String>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setDeviceName",
                                    c"(Ljava/lang/String;)Landroid/bluetooth/le/ScanFilter$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setDeviceAddress](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setDeviceAddress(java.lang.String))"]
                pub fn setDeviceAddress<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::super::java::lang::String>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setDeviceAddress",
                                    c"(Ljava/lang/String;)Landroid/bluetooth/le/ScanFilter$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setServiceUuid](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setServiceUuid(android.os.ParcelUuid))"]
                pub fn setServiceUuid_ParcelUuid<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setServiceUuid",
                                    c"(Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setServiceUuid](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setServiceUuid(android.os.ParcelUuid,%20android.os.ParcelUuid))"]
                pub fn setServiceUuid_ParcelUuid_ParcelUuid<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                    arg1: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"setServiceUuid" , c"(Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;" ))). as_raw ();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setServiceSolicitationUuid](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setServiceSolicitationUuid(android.os.ParcelUuid))"]
                pub fn setServiceSolicitationUuid_ParcelUuid<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setServiceSolicitationUuid",
                                    c"(Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setServiceSolicitationUuid](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setServiceSolicitationUuid(android.os.ParcelUuid,%20android.os.ParcelUuid))"]
                pub fn setServiceSolicitationUuid_ParcelUuid_ParcelUuid<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                    arg1: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"setServiceSolicitationUuid" , c"(Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;" ))). as_raw ();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setServiceData](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setServiceData(android.os.ParcelUuid,%20byte[]))"]
                pub fn setServiceData_ParcelUuid_byte_array<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                    arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setServiceData",
                                    c"(Landroid/os/ParcelUuid;[B)Landroid/bluetooth/le/ScanFilter$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setServiceData](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setServiceData(android.os.ParcelUuid,%20byte[],%20byte[]))"]
                pub fn setServiceData_ParcelUuid_byte_array_byte_array<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                    arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                    arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setServiceData",
                                    c"(Landroid/os/ParcelUuid;[B[B)Landroid/bluetooth/le/ScanFilter$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setManufacturerData](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setManufacturerData(int,%20byte[]))"]
                pub fn setManufacturerData_int_byte_array<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                    arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setManufacturerData",
                                    c"(I[B)Landroid/bluetooth/le/ScanFilter$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setManufacturerData](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setManufacturerData(int,%20byte[],%20byte[]))"]
                pub fn setManufacturerData_int_byte_array_byte_array<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                    arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                    arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setManufacturerData",
                                    c"(I[B[B)Landroid/bluetooth/le/ScanFilter$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setAdvertisingDataTypeWithData](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setAdvertisingDataTypeWithData(int,%20byte[],%20byte[]))"]
                pub fn setAdvertisingDataTypeWithData<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                    arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                    arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setAdvertisingDataTypeWithData",
                                    c"(I[B[B)Landroid/bluetooth/le/ScanFilter$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setAdvertisingDataType](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setAdvertisingDataType(int))"]
                pub fn setAdvertisingDataType<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setAdvertisingDataType",
                                    c"(I)Landroid/bluetooth/le/ScanFilter$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[build](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#build())"]
                pub fn build<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"build",
                                    c"()Landroid/bluetooth/le/ScanFilter;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "final class [ScanRecord](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html)"]
            pub enum ScanRecord {}
            unsafe impl ::java_spaghetti::ReferenceType for ScanRecord {}
            unsafe impl ::java_spaghetti::JniType for ScanRecord {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/ScanRecord")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for ScanRecord {}
            impl ScanRecord {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/ScanRecord"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[getAdvertiseFlags](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getAdvertiseFlags())"]
                pub fn getAdvertiseFlags<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getAdvertiseFlags",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getServiceUuids](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getServiceUuids())"]
                pub fn getServiceUuids<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::util::List>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getServiceUuids",
                                    c"()Ljava/util/List;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getServiceSolicitationUuids](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getServiceSolicitationUuids())"]
                pub fn getServiceSolicitationUuids<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::util::List>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getServiceSolicitationUuids",
                                    c"()Ljava/util/List;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getManufacturerSpecificData](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getManufacturerSpecificData())"]
                pub fn getManufacturerSpecificData<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::util::SparseArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getManufacturerSpecificData",
                                    c"()Landroid/util/SparseArray;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getManufacturerSpecificData](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getManufacturerSpecificData(int))"]
                pub fn getManufacturerSpecificData_int<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getManufacturerSpecificData",
                                    c"(I)[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getServiceData](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getServiceData())"]
                pub fn getServiceData<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::util::Map>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getServiceData",
                                    c"()Ljava/util/Map;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getServiceData](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getServiceData(android.os.ParcelUuid))"]
                pub fn getServiceData_ParcelUuid<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getServiceData",
                                    c"(Landroid/os/ParcelUuid;)[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTxPowerLevel](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getTxPowerLevel())"]
                pub fn getTxPowerLevel<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTxPowerLevel",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getDeviceName](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getDeviceName())"]
                pub fn getDeviceName<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getDeviceName",
                                    c"()Ljava/lang/String;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getAdvertisingDataMap](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getAdvertisingDataMap())"]
                pub fn getAdvertisingDataMap<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::util::Map>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getAdvertisingDataMap",
                                    c"()Ljava/util/Map;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getBytes](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getBytes())"]
                pub fn getBytes<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getBytes",
                                    c"()[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[toString](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#toString())"]
                pub fn toString<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"toString",
                                    c"()Ljava/lang/String;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "public static final [DATA_TYPE_3D_INFORMATION_DATA](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_3D_INFORMATION_DATA)"]
                pub const DATA_TYPE_3D_INFORMATION_DATA: i32 = 61;
                #[doc = "public static final [DATA_TYPE_ADVERTISING_INTERVAL](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_ADVERTISING_INTERVAL)"]
                pub const DATA_TYPE_ADVERTISING_INTERVAL: i32 = 26;
                #[doc = "public static final [DATA_TYPE_ADVERTISING_INTERVAL_LONG](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_ADVERTISING_INTERVAL_LONG)"]
                pub const DATA_TYPE_ADVERTISING_INTERVAL_LONG: i32 = 47;
                #[doc = "public static final [DATA_TYPE_APPEARANCE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_APPEARANCE)"]
                pub const DATA_TYPE_APPEARANCE: i32 = 25;
                #[doc = "public static final [DATA_TYPE_BIG_INFO](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_BIG_INFO)"]
                pub const DATA_TYPE_BIG_INFO: i32 = 44;
                #[doc = "public static final [DATA_TYPE_BROADCAST_CODE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_BROADCAST_CODE)"]
                pub const DATA_TYPE_BROADCAST_CODE: i32 = 45;
                #[doc = "public static final [DATA_TYPE_CHANNEL_MAP_UPDATE_INDICATION](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_CHANNEL_MAP_UPDATE_INDICATION)"]
                pub const DATA_TYPE_CHANNEL_MAP_UPDATE_INDICATION: i32 = 40;
                #[doc = "public static final [DATA_TYPE_CLASS_OF_DEVICE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_CLASS_OF_DEVICE)"]
                pub const DATA_TYPE_CLASS_OF_DEVICE: i32 = 13;
                #[doc = "public static final [DATA_TYPE_DEVICE_ID](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_DEVICE_ID)"]
                pub const DATA_TYPE_DEVICE_ID: i32 = 16;
                #[doc = "public static final [DATA_TYPE_FLAGS](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_FLAGS)"]
                pub const DATA_TYPE_FLAGS: i32 = 1;
                #[doc = "public static final [DATA_TYPE_INDOOR_POSITIONING](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_INDOOR_POSITIONING)"]
                pub const DATA_TYPE_INDOOR_POSITIONING: i32 = 37;
                #[doc = "public static final [DATA_TYPE_LE_BLUETOOTH_DEVICE_ADDRESS](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_LE_BLUETOOTH_DEVICE_ADDRESS)"]
                pub const DATA_TYPE_LE_BLUETOOTH_DEVICE_ADDRESS: i32 = 27;
                #[doc = "public static final [DATA_TYPE_LE_ROLE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_LE_ROLE)"]
                pub const DATA_TYPE_LE_ROLE: i32 = 28;
                #[doc = "public static final [DATA_TYPE_LE_SECURE_CONNECTIONS_CONFIRMATION_VALUE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_LE_SECURE_CONNECTIONS_CONFIRMATION_VALUE)"]
                pub const DATA_TYPE_LE_SECURE_CONNECTIONS_CONFIRMATION_VALUE: i32 = 34;
                #[doc = "public static final [DATA_TYPE_LE_SECURE_CONNECTIONS_RANDOM_VALUE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_LE_SECURE_CONNECTIONS_RANDOM_VALUE)"]
                pub const DATA_TYPE_LE_SECURE_CONNECTIONS_RANDOM_VALUE: i32 = 35;
                #[doc = "public static final [DATA_TYPE_LE_SUPPORTED_FEATURES](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_LE_SUPPORTED_FEATURES)"]
                pub const DATA_TYPE_LE_SUPPORTED_FEATURES: i32 = 39;
                #[doc = "public static final [DATA_TYPE_LOCAL_NAME_COMPLETE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_LOCAL_NAME_COMPLETE)"]
                pub const DATA_TYPE_LOCAL_NAME_COMPLETE: i32 = 9;
                #[doc = "public static final [DATA_TYPE_LOCAL_NAME_SHORT](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_LOCAL_NAME_SHORT)"]
                pub const DATA_TYPE_LOCAL_NAME_SHORT: i32 = 8;
                #[doc = "public static final [DATA_TYPE_MANUFACTURER_SPECIFIC_DATA](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_MANUFACTURER_SPECIFIC_DATA)"]
                pub const DATA_TYPE_MANUFACTURER_SPECIFIC_DATA: i32 = 255;
                #[doc = "public static final [DATA_TYPE_MESH_BEACON](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_MESH_BEACON)"]
                pub const DATA_TYPE_MESH_BEACON: i32 = 43;
                #[doc = "public static final [DATA_TYPE_MESH_MESSAGE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_MESH_MESSAGE)"]
                pub const DATA_TYPE_MESH_MESSAGE: i32 = 42;
                #[doc = "public static final [DATA_TYPE_NONE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_NONE)"]
                pub const DATA_TYPE_NONE: i32 = -1;
                #[doc = "public static final [DATA_TYPE_PB_ADV](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_PB_ADV)"]
                pub const DATA_TYPE_PB_ADV: i32 = 41;
                #[doc = "public static final [DATA_TYPE_PUBLIC_TARGET_ADDRESS](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_PUBLIC_TARGET_ADDRESS)"]
                pub const DATA_TYPE_PUBLIC_TARGET_ADDRESS: i32 = 23;
                #[doc = "public static final [DATA_TYPE_RANDOM_TARGET_ADDRESS](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_RANDOM_TARGET_ADDRESS)"]
                pub const DATA_TYPE_RANDOM_TARGET_ADDRESS: i32 = 24;
                #[doc = "public static final [DATA_TYPE_RESOLVABLE_SET_IDENTIFIER](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_RESOLVABLE_SET_IDENTIFIER)"]
                pub const DATA_TYPE_RESOLVABLE_SET_IDENTIFIER: i32 = 46;
                #[doc = "public static final [DATA_TYPE_SECURITY_MANAGER_OUT_OF_BAND_FLAGS](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SECURITY_MANAGER_OUT_OF_BAND_FLAGS)"]
                pub const DATA_TYPE_SECURITY_MANAGER_OUT_OF_BAND_FLAGS: i32 = 17;
                #[doc = "public static final [DATA_TYPE_SERVICE_DATA_128_BIT](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_DATA_128_BIT)"]
                pub const DATA_TYPE_SERVICE_DATA_128_BIT: i32 = 33;
                #[doc = "public static final [DATA_TYPE_SERVICE_DATA_16_BIT](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_DATA_16_BIT)"]
                pub const DATA_TYPE_SERVICE_DATA_16_BIT: i32 = 22;
                #[doc = "public static final [DATA_TYPE_SERVICE_DATA_32_BIT](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_DATA_32_BIT)"]
                pub const DATA_TYPE_SERVICE_DATA_32_BIT: i32 = 32;
                #[doc = "public static final [DATA_TYPE_SERVICE_SOLICITATION_UUIDS_128_BIT](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_SOLICITATION_UUIDS_128_BIT)"]
                pub const DATA_TYPE_SERVICE_SOLICITATION_UUIDS_128_BIT: i32 = 21;
                #[doc = "public static final [DATA_TYPE_SERVICE_SOLICITATION_UUIDS_16_BIT](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_SOLICITATION_UUIDS_16_BIT)"]
                pub const DATA_TYPE_SERVICE_SOLICITATION_UUIDS_16_BIT: i32 = 20;
                #[doc = "public static final [DATA_TYPE_SERVICE_SOLICITATION_UUIDS_32_BIT](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_SOLICITATION_UUIDS_32_BIT)"]
                pub const DATA_TYPE_SERVICE_SOLICITATION_UUIDS_32_BIT: i32 = 31;
                #[doc = "public static final [DATA_TYPE_SERVICE_UUIDS_128_BIT_COMPLETE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_UUIDS_128_BIT_COMPLETE)"]
                pub const DATA_TYPE_SERVICE_UUIDS_128_BIT_COMPLETE: i32 = 7;
                #[doc = "public static final [DATA_TYPE_SERVICE_UUIDS_128_BIT_PARTIAL](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_UUIDS_128_BIT_PARTIAL)"]
                pub const DATA_TYPE_SERVICE_UUIDS_128_BIT_PARTIAL: i32 = 6;
                #[doc = "public static final [DATA_TYPE_SERVICE_UUIDS_16_BIT_COMPLETE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_UUIDS_16_BIT_COMPLETE)"]
                pub const DATA_TYPE_SERVICE_UUIDS_16_BIT_COMPLETE: i32 = 3;
                #[doc = "public static final [DATA_TYPE_SERVICE_UUIDS_16_BIT_PARTIAL](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_UUIDS_16_BIT_PARTIAL)"]
                pub const DATA_TYPE_SERVICE_UUIDS_16_BIT_PARTIAL: i32 = 2;
                #[doc = "public static final [DATA_TYPE_SERVICE_UUIDS_32_BIT_COMPLETE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_UUIDS_32_BIT_COMPLETE)"]
                pub const DATA_TYPE_SERVICE_UUIDS_32_BIT_COMPLETE: i32 = 5;
                #[doc = "public static final [DATA_TYPE_SERVICE_UUIDS_32_BIT_PARTIAL](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_UUIDS_32_BIT_PARTIAL)"]
                pub const DATA_TYPE_SERVICE_UUIDS_32_BIT_PARTIAL: i32 = 4;
                #[doc = "public static final [DATA_TYPE_SIMPLE_PAIRING_HASH_C](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SIMPLE_PAIRING_HASH_C)"]
                pub const DATA_TYPE_SIMPLE_PAIRING_HASH_C: i32 = 14;
                #[doc = "public static final [DATA_TYPE_SIMPLE_PAIRING_HASH_C_256](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SIMPLE_PAIRING_HASH_C_256)"]
                pub const DATA_TYPE_SIMPLE_PAIRING_HASH_C_256: i32 = 29;
                #[doc = "public static final [DATA_TYPE_SIMPLE_PAIRING_RANDOMIZER_R](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SIMPLE_PAIRING_RANDOMIZER_R)"]
                pub const DATA_TYPE_SIMPLE_PAIRING_RANDOMIZER_R: i32 = 15;
                #[doc = "public static final [DATA_TYPE_SIMPLE_PAIRING_RANDOMIZER_R_256](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SIMPLE_PAIRING_RANDOMIZER_R_256)"]
                pub const DATA_TYPE_SIMPLE_PAIRING_RANDOMIZER_R_256: i32 = 30;
                #[doc = "public static final [DATA_TYPE_SLAVE_CONNECTION_INTERVAL_RANGE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SLAVE_CONNECTION_INTERVAL_RANGE)"]
                pub const DATA_TYPE_SLAVE_CONNECTION_INTERVAL_RANGE: i32 = 18;
                #[doc = "public static final [DATA_TYPE_TRANSPORT_DISCOVERY_DATA](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_TRANSPORT_DISCOVERY_DATA)"]
                pub const DATA_TYPE_TRANSPORT_DISCOVERY_DATA: i32 = 38;
                #[doc = "public static final [DATA_TYPE_TX_POWER_LEVEL](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_TX_POWER_LEVEL)"]
                pub const DATA_TYPE_TX_POWER_LEVEL: i32 = 10;
                #[doc = "public static final [DATA_TYPE_URI](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_URI)"]
                pub const DATA_TYPE_URI: i32 = 36;
            }
            #[doc = "final class [ScanResult](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html)"]
            pub enum ScanResult {}
            unsafe impl ::java_spaghetti::ReferenceType for ScanResult {}
            unsafe impl ::java_spaghetti::JniType for ScanResult {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/ScanResult")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::os::Parcelable> for ScanResult {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for ScanResult {}
            impl ScanResult {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/ScanResult"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[ScanResult](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#ScanResult(android.bluetooth.BluetoothDevice,%20android.bluetooth.le.ScanRecord,%20int,%20long))"]
                #[deprecated]
                pub fn new_BluetoothDevice_ScanRecord_int_long<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: impl ::java_spaghetti::AsArg<super::BluetoothDevice>,
                    arg1: impl ::java_spaghetti::AsArg<ScanRecord>,
                    arg2: i32,
                    arg3: i64,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"<init>",
                                    c"(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/le/ScanRecord;IJ)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[ScanResult](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#ScanResult(android.bluetooth.BluetoothDevice,%20int,%20int,%20int,%20int,%20int,%20int,%20int,%20android.bluetooth.le.ScanRecord,%20long))"]
                pub fn new_BluetoothDevice_int_int_int_int_int_int_int_ScanRecord_long<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: impl ::java_spaghetti::AsArg<super::BluetoothDevice>,
                    arg1: i32,
                    arg2: i32,
                    arg3: i32,
                    arg4: i32,
                    arg5: i32,
                    arg6: i32,
                    arg7: i32,
                    arg8: impl ::java_spaghetti::AsArg<ScanRecord>,
                    arg9: i64,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg7),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg8),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg9),
                        ];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"<init>",
                                    c"(Landroid/bluetooth/BluetoothDevice;IIIIIIILandroid/bluetooth/le/ScanRecord;J)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#describeContents())"]
                pub fn describeContents<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"describeContents",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getDevice](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getDevice())"]
                pub fn getDevice<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::BluetoothDevice>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getDevice",
                                    c"()Landroid/bluetooth/BluetoothDevice;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getScanRecord](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getScanRecord())"]
                pub fn getScanRecord<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanRecord>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getScanRecord",
                                    c"()Landroid/bluetooth/le/ScanRecord;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getRssi](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getRssi())"]
                pub fn getRssi<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getRssi",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTimestampNanos](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getTimestampNanos())"]
                pub fn getTimestampNanos<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTimestampNanos",
                                    c"()J",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_long_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isLegacy](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#isLegacy())"]
                pub fn isLegacy<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isLegacy",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isConnectable](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#isConnectable())"]
                pub fn isConnectable<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isConnectable",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getDataStatus](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getDataStatus())"]
                pub fn getDataStatus<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getDataStatus",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getPrimaryPhy](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getPrimaryPhy())"]
                pub fn getPrimaryPhy<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getPrimaryPhy",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getSecondaryPhy](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getSecondaryPhy())"]
                pub fn getSecondaryPhy<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getSecondaryPhy",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getAdvertisingSid](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getAdvertisingSid())"]
                pub fn getAdvertisingSid<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getAdvertisingSid",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTxPower](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getTxPower())"]
                pub fn getTxPower<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTxPower",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getPeriodicAdvertisingInterval](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getPeriodicAdvertisingInterval())"]
                pub fn getPeriodicAdvertisingInterval<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getPeriodicAdvertisingInterval",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[hashCode](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#hashCode())"]
                pub fn hashCode<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"hashCode",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[equals](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#equals(java.lang.Object))"]
                pub fn equals<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::super::java::lang::Object>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"equals",
                                    c"(Ljava/lang/Object;)Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[toString](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#toString())"]
                pub fn toString<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"toString",
                                    c"()Ljava/lang/String;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "public static final [DATA_COMPLETE](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#DATA_COMPLETE)"]
                pub const DATA_COMPLETE: i32 = 0;
                #[doc = "public static final [DATA_TRUNCATED](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#DATA_TRUNCATED)"]
                pub const DATA_TRUNCATED: i32 = 2;
                #[doc = "public static final [PERIODIC_INTERVAL_NOT_PRESENT](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#PERIODIC_INTERVAL_NOT_PRESENT)"]
                pub const PERIODIC_INTERVAL_NOT_PRESENT: i32 = 0;
                #[doc = "public static final [PHY_UNUSED](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#PHY_UNUSED)"]
                pub const PHY_UNUSED: i32 = 0;
                #[doc = "public static final [SID_NOT_PRESENT](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#SID_NOT_PRESENT)"]
                pub const SID_NOT_PRESENT: i32 = 255;
                #[doc = "public static final [TX_POWER_NOT_PRESENT](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#TX_POWER_NOT_PRESENT)"]
                pub const TX_POWER_NOT_PRESENT: i32 = 127;
            }
            #[doc = "final class [ScanSettings](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html)"]
            pub enum ScanSettings {}
            unsafe impl ::java_spaghetti::ReferenceType for ScanSettings {}
            unsafe impl ::java_spaghetti::JniType for ScanSettings {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/ScanSettings")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::os::Parcelable> for ScanSettings {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for ScanSettings {}
            impl ScanSettings {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/ScanSettings"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[getScanMode](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#getScanMode())"]
                pub fn getScanMode<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getScanMode",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getCallbackType](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#getCallbackType())"]
                pub fn getCallbackType<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getCallbackType",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getScanResultType](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#getScanResultType())"]
                pub fn getScanResultType<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getScanResultType",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getLegacy](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#getLegacy())"]
                pub fn getLegacy<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getLegacy",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getPhy](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#getPhy())"]
                pub fn getPhy<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getPhy",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getReportDelayMillis](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#getReportDelayMillis())"]
                pub fn getReportDelayMillis<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getReportDelayMillis",
                                    c"()J",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_long_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#describeContents())"]
                pub fn describeContents<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"describeContents",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "public static final [AUTO_BATCH_MIN_REPORT_DELAY_MILLIS](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#AUTO_BATCH_MIN_REPORT_DELAY_MILLIS)"]
                pub const AUTO_BATCH_MIN_REPORT_DELAY_MILLIS: i64 = 600000;
                #[doc = "public static final [CALLBACK_TYPE_ALL_MATCHES](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#CALLBACK_TYPE_ALL_MATCHES)"]
                pub const CALLBACK_TYPE_ALL_MATCHES: i32 = 1;
                #[doc = "public static final [CALLBACK_TYPE_ALL_MATCHES_AUTO_BATCH](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#CALLBACK_TYPE_ALL_MATCHES_AUTO_BATCH)"]
                pub const CALLBACK_TYPE_ALL_MATCHES_AUTO_BATCH: i32 = 8;
                #[doc = "public static final [CALLBACK_TYPE_FIRST_MATCH](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#CALLBACK_TYPE_FIRST_MATCH)"]
                pub const CALLBACK_TYPE_FIRST_MATCH: i32 = 2;
                #[doc = "public static final [CALLBACK_TYPE_MATCH_LOST](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#CALLBACK_TYPE_MATCH_LOST)"]
                pub const CALLBACK_TYPE_MATCH_LOST: i32 = 4;
                #[doc = "public static final [MATCH_MODE_AGGRESSIVE](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#MATCH_MODE_AGGRESSIVE)"]
                pub const MATCH_MODE_AGGRESSIVE: i32 = 1;
                #[doc = "public static final [MATCH_MODE_STICKY](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#MATCH_MODE_STICKY)"]
                pub const MATCH_MODE_STICKY: i32 = 2;
                #[doc = "public static final [MATCH_NUM_FEW_ADVERTISEMENT](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#MATCH_NUM_FEW_ADVERTISEMENT)"]
                pub const MATCH_NUM_FEW_ADVERTISEMENT: i32 = 2;
                #[doc = "public static final [MATCH_NUM_MAX_ADVERTISEMENT](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#MATCH_NUM_MAX_ADVERTISEMENT)"]
                pub const MATCH_NUM_MAX_ADVERTISEMENT: i32 = 3;
                #[doc = "public static final [MATCH_NUM_ONE_ADVERTISEMENT](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#MATCH_NUM_ONE_ADVERTISEMENT)"]
                pub const MATCH_NUM_ONE_ADVERTISEMENT: i32 = 1;
                #[doc = "public static final [PHY_LE_ALL_SUPPORTED](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#PHY_LE_ALL_SUPPORTED)"]
                pub const PHY_LE_ALL_SUPPORTED: i32 = 255;
                #[doc = "public static final [SCAN_MODE_BALANCED](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#SCAN_MODE_BALANCED)"]
                pub const SCAN_MODE_BALANCED: i32 = 1;
                #[doc = "public static final [SCAN_MODE_LOW_LATENCY](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#SCAN_MODE_LOW_LATENCY)"]
                pub const SCAN_MODE_LOW_LATENCY: i32 = 2;
                #[doc = "public static final [SCAN_MODE_LOW_POWER](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#SCAN_MODE_LOW_POWER)"]
                pub const SCAN_MODE_LOW_POWER: i32 = 0;
                #[doc = "public static final [SCAN_MODE_OPPORTUNISTIC](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#SCAN_MODE_OPPORTUNISTIC)"]
                pub const SCAN_MODE_OPPORTUNISTIC: i32 = -1;
            }
            #[doc = "final class [ScanSettings.Builder](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html)"]
            pub enum ScanSettings_Builder {}
            unsafe impl ::java_spaghetti::ReferenceType for ScanSettings_Builder {}
            unsafe impl ::java_spaghetti::JniType for ScanSettings_Builder {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/ScanSettings$Builder")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for ScanSettings_Builder {}
            impl ScanSettings_Builder {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/ScanSettings$Builder"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[Builder](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#Builder())"]
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"<init>",
                                    c"()V",
                                ))
                            })
                            .as_raw();
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setScanMode](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setScanMode(int))"]
                pub fn setScanMode<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setScanMode",
                                    c"(I)Landroid/bluetooth/le/ScanSettings$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setCallbackType](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setCallbackType(int))"]
                pub fn setCallbackType<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setCallbackType",
                                    c"(I)Landroid/bluetooth/le/ScanSettings$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setReportDelay](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setReportDelay(long))"]
                pub fn setReportDelay<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i64,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setReportDelay",
                                    c"(J)Landroid/bluetooth/le/ScanSettings$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setNumOfMatches](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setNumOfMatches(int))"]
                pub fn setNumOfMatches<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setNumOfMatches",
                                    c"(I)Landroid/bluetooth/le/ScanSettings$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setMatchMode](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setMatchMode(int))"]
                pub fn setMatchMode<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setMatchMode",
                                    c"(I)Landroid/bluetooth/le/ScanSettings$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setLegacy](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setLegacy(boolean))"]
                pub fn setLegacy<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setLegacy",
                                    c"(Z)Landroid/bluetooth/le/ScanSettings$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setPhy](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setPhy(int))"]
                pub fn setPhy<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setPhy",
                                    c"(I)Landroid/bluetooth/le/ScanSettings$Builder;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[build](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#build())"]
                pub fn build<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanSettings>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"build",
                                    c"()Landroid/bluetooth/le/ScanSettings;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "final class [TransportBlock](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html)"]
            pub enum TransportBlock {}
            unsafe impl ::java_spaghetti::ReferenceType for TransportBlock {}
            unsafe impl ::java_spaghetti::JniType for TransportBlock {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/TransportBlock")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::os::Parcelable> for TransportBlock {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for TransportBlock {}
            impl TransportBlock {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/TransportBlock"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[TransportBlock](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html#TransportBlock(int,%20int,%20int,%20byte[]))"]
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: i32,
                    arg1: i32,
                    arg2: i32,
                    arg3: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"<init>",
                                    c"(III[B)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html#describeContents())"]
                pub fn describeContents<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"describeContents",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[equals](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html#equals(java.lang.Object))"]
                pub fn equals<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::super::java::lang::Object>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"equals",
                                    c"(Ljava/lang/Object;)Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[hashCode](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html#hashCode())"]
                pub fn hashCode<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"hashCode",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getOrgId](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html#getOrgId())"]
                pub fn getOrgId<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getOrgId",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTdsFlags](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html#getTdsFlags())"]
                pub fn getTdsFlags<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTdsFlags",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTransportDataLength](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html#getTransportDataLength())"]
                pub fn getTransportDataLength<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTransportDataLength",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTransportData](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html#getTransportData())"]
                pub fn getTransportData<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTransportData",
                                    c"()[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[toByteArray](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html#toByteArray())"]
                pub fn toByteArray<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"toByteArray",
                                    c"()[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[totalBytes](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html#totalBytes())"]
                pub fn totalBytes<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"totalBytes",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "final class [TransportDiscoveryData](https://developer.android.com/reference/android/bluetooth/le/TransportDiscoveryData.html)"]
            pub enum TransportDiscoveryData {}
            unsafe impl ::java_spaghetti::ReferenceType for TransportDiscoveryData {}
            unsafe impl ::java_spaghetti::JniType for TransportDiscoveryData {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/bluetooth/le/TransportDiscoveryData")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::os::Parcelable> for TransportDiscoveryData {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for TransportDiscoveryData {}
            impl TransportDiscoveryData {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/bluetooth/le/TransportDiscoveryData"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[TransportDiscoveryData](https://developer.android.com/reference/android/bluetooth/le/TransportDiscoveryData.html#TransportDiscoveryData(int,%20java.util.List))"]
                pub fn new_int_List<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: i32,
                    arg1: impl ::java_spaghetti::AsArg<super::super::super::java::util::List>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"<init>",
                                    c"(ILjava/util/List;)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[TransportDiscoveryData](https://developer.android.com/reference/android/bluetooth/le/TransportDiscoveryData.html#TransportDiscoveryData(byte[]))"]
                pub fn new_byte_array<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"<init>",
                                    c"([B)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/le/TransportDiscoveryData.html#describeContents())"]
                pub fn describeContents<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"describeContents",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[equals](https://developer.android.com/reference/android/bluetooth/le/TransportDiscoveryData.html#equals(java.lang.Object))"]
                pub fn equals<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::super::java::lang::Object>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"equals",
                                    c"(Ljava/lang/Object;)Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[hashCode](https://developer.android.com/reference/android/bluetooth/le/TransportDiscoveryData.html#hashCode())"]
                pub fn hashCode<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"hashCode",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTransportDataType](https://developer.android.com/reference/android/bluetooth/le/TransportDiscoveryData.html#getTransportDataType())"]
                pub fn getTransportDataType<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTransportDataType",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTransportBlocks](https://developer.android.com/reference/android/bluetooth/le/TransportDiscoveryData.html#getTransportBlocks())"]
                pub fn getTransportBlocks<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::util::List>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTransportBlocks",
                                    c"()Ljava/util/List;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[toByteArray](https://developer.android.com/reference/android/bluetooth/le/TransportDiscoveryData.html#toByteArray())"]
                pub fn toByteArray<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"toByteArray",
                                    c"()[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[toString](https://developer.android.com/reference/android/bluetooth/le/TransportDiscoveryData.html#toString())"]
                pub fn toString<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"toString",
                                    c"()Ljava/lang/String;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[totalBytes](https://developer.android.com/reference/android/bluetooth/le/TransportDiscoveryData.html#totalBytes())"]
                pub fn totalBytes<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"totalBytes",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
        }
        #[doc = "final class [BluetoothA2dp](https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html)"]
        pub enum BluetoothA2dp {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothA2dp {}
        unsafe impl ::java_spaghetti::JniType for BluetoothA2dp {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothA2dp")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<BluetoothProfile> for BluetoothA2dp {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothA2dp {}
        impl BluetoothA2dp {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothA2dp"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[finalize](https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html#finalize())"]
            pub fn finalize<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"finalize",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html#getConnectedDevices())"]
            pub fn getConnectedDevices<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectedDevices",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html#getDevicesMatchingConnectionStates(int[]))"]
            pub fn getDevicesMatchingConnectionStates<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDevicesMatchingConnectionStates",
                                c"([I)Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html#getConnectionState(android.bluetooth.BluetoothDevice))"]
            pub fn getConnectionState<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectionState",
                                c"(Landroid/bluetooth/BluetoothDevice;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isA2dpPlaying](https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html#isA2dpPlaying(android.bluetooth.BluetoothDevice))"]
            pub fn isA2dpPlaying<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isA2dpPlaying",
                                c"(Landroid/bluetooth/BluetoothDevice;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [ACTION_CONNECTION_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html#ACTION_CONNECTION_STATE_CHANGED)"]
            pub const ACTION_CONNECTION_STATE_CHANGED: &'static str =
                "android.bluetooth.a2dp.profile.action.CONNECTION_STATE_CHANGED";
            #[doc = "public static final [ACTION_PLAYING_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html#ACTION_PLAYING_STATE_CHANGED)"]
            pub const ACTION_PLAYING_STATE_CHANGED: &'static str =
                "android.bluetooth.a2dp.profile.action.PLAYING_STATE_CHANGED";
            #[doc = "public static final [STATE_NOT_PLAYING](https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html#STATE_NOT_PLAYING)"]
            pub const STATE_NOT_PLAYING: i32 = 11;
            #[doc = "public static final [STATE_PLAYING](https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html#STATE_PLAYING)"]
            pub const STATE_PLAYING: i32 = 10;
        }
        #[doc = "final class [BluetoothAdapter](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html)"]
        pub enum BluetoothAdapter {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothAdapter {}
        unsafe impl ::java_spaghetti::JniType for BluetoothAdapter {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothAdapter")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothAdapter {}
        impl BluetoothAdapter {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothAdapter"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[getDefaultAdapter](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getDefaultAdapter())"]
            #[deprecated]
            pub fn getDefaultAdapter<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothAdapter>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"getDefaultAdapter",
                                c"()Landroid/bluetooth/BluetoothAdapter;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getRemoteDevice](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getRemoteDevice(java.lang.String))"]
            pub fn getRemoteDevice_String<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothDevice>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getRemoteDevice",
                                c"(Ljava/lang/String;)Landroid/bluetooth/BluetoothDevice;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getRemoteLeDevice](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getRemoteLeDevice(java.lang.String,%20int))"]
            pub fn getRemoteLeDevice<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothDevice>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getRemoteLeDevice",
                                c"(Ljava/lang/String;I)Landroid/bluetooth/BluetoothDevice;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getRemoteDevice](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getRemoteDevice(byte[]))"]
            pub fn getRemoteDevice_byte_array<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothDevice>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getRemoteDevice",
                                c"([B)Landroid/bluetooth/BluetoothDevice;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getBluetoothLeAdvertiser](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBluetoothLeAdvertiser())"]
            pub fn getBluetoothLeAdvertiser<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, le::BluetoothLeAdvertiser>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getBluetoothLeAdvertiser",
                                c"()Landroid/bluetooth/le/BluetoothLeAdvertiser;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getBluetoothLeScanner](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBluetoothLeScanner())"]
            pub fn getBluetoothLeScanner<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, le::BluetoothLeScanner>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getBluetoothLeScanner",
                                c"()Landroid/bluetooth/le/BluetoothLeScanner;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isEnabled](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isEnabled())"]
            pub fn isEnabled<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isEnabled",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getState](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getState())"]
            pub fn getState<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getState",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[enable](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#enable())"]
            #[deprecated]
            pub fn enable<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"enable",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[disable](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#disable())"]
            #[deprecated]
            pub fn disable<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"disable",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getAddress](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getAddress())"]
            pub fn getAddress<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getAddress",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getName](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getName())"]
            pub fn getName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setName](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#setName(java.lang.String))"]
            pub fn setName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setName",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getScanMode](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getScanMode())"]
            pub fn getScanMode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getScanMode",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[startDiscovery](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#startDiscovery())"]
            pub fn startDiscovery<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"startDiscovery",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[cancelDiscovery](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#cancelDiscovery())"]
            pub fn cancelDiscovery<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"cancelDiscovery",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isDiscovering](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isDiscovering())"]
            pub fn isDiscovering<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isDiscovering",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isMultipleAdvertisementSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isMultipleAdvertisementSupported())"]
            pub fn isMultipleAdvertisementSupported<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isMultipleAdvertisementSupported",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isOffloadedFilteringSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isOffloadedFilteringSupported())"]
            pub fn isOffloadedFilteringSupported<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isOffloadedFilteringSupported",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isOffloadedScanBatchingSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isOffloadedScanBatchingSupported())"]
            pub fn isOffloadedScanBatchingSupported<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isOffloadedScanBatchingSupported",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isLe2MPhySupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLe2MPhySupported())"]
            pub fn isLe2MPhySupported<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isLe2MPhySupported",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isLeCodedPhySupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeCodedPhySupported())"]
            pub fn isLeCodedPhySupported<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isLeCodedPhySupported",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isLeExtendedAdvertisingSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeExtendedAdvertisingSupported())"]
            pub fn isLeExtendedAdvertisingSupported<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isLeExtendedAdvertisingSupported",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isLePeriodicAdvertisingSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLePeriodicAdvertisingSupported())"]
            pub fn isLePeriodicAdvertisingSupported<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isLePeriodicAdvertisingSupported",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isLeAudioSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeAudioSupported())"]
            pub fn isLeAudioSupported<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isLeAudioSupported",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isLeAudioBroadcastSourceSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeAudioBroadcastSourceSupported())"]
            pub fn isLeAudioBroadcastSourceSupported<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isLeAudioBroadcastSourceSupported",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isLeAudioBroadcastAssistantSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeAudioBroadcastAssistantSupported())"]
            pub fn isLeAudioBroadcastAssistantSupported<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isLeAudioBroadcastAssistantSupported",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getLeMaximumAdvertisingDataLength](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getLeMaximumAdvertisingDataLength())"]
            pub fn getLeMaximumAdvertisingDataLength<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getLeMaximumAdvertisingDataLength",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getMaxConnectedAudioDevices](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getMaxConnectedAudioDevices())"]
            pub fn getMaxConnectedAudioDevices<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getMaxConnectedAudioDevices",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getBondedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBondedDevices())"]
            pub fn getBondedDevices<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::Set>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getBondedDevices",
                                c"()Ljava/util/Set;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getProfileConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getProfileConnectionState(int))"]
            pub fn getProfileConnectionState<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getProfileConnectionState",
                                c"(I)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[listenUsingRfcommWithServiceRecord](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingRfcommWithServiceRecord(java.lang.String,%20java.util.UUID))"]
            pub fn listenUsingRfcommWithServiceRecord<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothServerSocket>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"listenUsingRfcommWithServiceRecord",
                                c"(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[listenUsingInsecureRfcommWithServiceRecord](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingInsecureRfcommWithServiceRecord(java.lang.String,%20java.util.UUID))"]
            pub fn listenUsingInsecureRfcommWithServiceRecord<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothServerSocket>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"listenUsingInsecureRfcommWithServiceRecord",
                                c"(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getProfileProxy](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getProfileProxy(android.content.Context,%20android.bluetooth.BluetoothProfile.ServiceListener,%20int))"]
            pub fn getProfileProxy<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::content::Context>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothProfile_ServiceListener>,
                arg2: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getProfileProxy",
                                c"(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;I)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[closeProfileProxy](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#closeProfileProxy(int,%20android.bluetooth.BluetoothProfile))"]
            pub fn closeProfileProxy<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<BluetoothProfile>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"closeProfileProxy",
                                c"(ILandroid/bluetooth/BluetoothProfile;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkBluetoothAddress](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#checkBluetoothAddress(java.lang.String))"]
            pub fn checkBluetoothAddress<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"checkBluetoothAddress",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[startLeScan](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#startLeScan(android.bluetooth.BluetoothAdapter.LeScanCallback))"]
            #[deprecated]
            pub fn startLeScan_LeScanCallback<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothAdapter_LeScanCallback>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"startLeScan",
                                c"(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[startLeScan](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#startLeScan(java.util.UUID[],%20android.bluetooth.BluetoothAdapter.LeScanCallback))"]
            #[deprecated]
            pub fn startLeScan_UUID_array_LeScanCallback<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<super::super::java::util::UUID, super::super::java::lang::Throwable>,
                >,
                arg1: impl ::java_spaghetti::AsArg<BluetoothAdapter_LeScanCallback>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"startLeScan",
                                c"([Ljava/util/UUID;Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[stopLeScan](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#stopLeScan(android.bluetooth.BluetoothAdapter.LeScanCallback))"]
            #[deprecated]
            pub fn stopLeScan<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothAdapter_LeScanCallback>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"stopLeScan",
                                c"(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[listenUsingL2capChannel](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingL2capChannel())"]
            pub fn listenUsingL2capChannel<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothServerSocket>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"listenUsingL2capChannel",
                                c"()Landroid/bluetooth/BluetoothServerSocket;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[listenUsingInsecureL2capChannel](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingInsecureL2capChannel())"]
            pub fn listenUsingInsecureL2capChannel<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothServerSocket>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"listenUsingInsecureL2capChannel",
                                c"()Landroid/bluetooth/BluetoothServerSocket;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [ACTION_CONNECTION_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_CONNECTION_STATE_CHANGED)"]
            pub const ACTION_CONNECTION_STATE_CHANGED: &'static str =
                "android.bluetooth.adapter.action.CONNECTION_STATE_CHANGED";
            #[doc = "public static final [ACTION_DISCOVERY_FINISHED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_DISCOVERY_FINISHED)"]
            pub const ACTION_DISCOVERY_FINISHED: &'static str = "android.bluetooth.adapter.action.DISCOVERY_FINISHED";
            #[doc = "public static final [ACTION_DISCOVERY_STARTED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_DISCOVERY_STARTED)"]
            pub const ACTION_DISCOVERY_STARTED: &'static str = "android.bluetooth.adapter.action.DISCOVERY_STARTED";
            #[doc = "public static final [ACTION_LOCAL_NAME_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_LOCAL_NAME_CHANGED)"]
            pub const ACTION_LOCAL_NAME_CHANGED: &'static str = "android.bluetooth.adapter.action.LOCAL_NAME_CHANGED";
            #[doc = "public static final [ACTION_REQUEST_DISCOVERABLE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_REQUEST_DISCOVERABLE)"]
            pub const ACTION_REQUEST_DISCOVERABLE: &'static str =
                "android.bluetooth.adapter.action.REQUEST_DISCOVERABLE";
            #[doc = "public static final [ACTION_REQUEST_ENABLE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_REQUEST_ENABLE)"]
            pub const ACTION_REQUEST_ENABLE: &'static str = "android.bluetooth.adapter.action.REQUEST_ENABLE";
            #[doc = "public static final [ACTION_SCAN_MODE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_SCAN_MODE_CHANGED)"]
            pub const ACTION_SCAN_MODE_CHANGED: &'static str = "android.bluetooth.adapter.action.SCAN_MODE_CHANGED";
            #[doc = "public static final [ACTION_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_STATE_CHANGED)"]
            pub const ACTION_STATE_CHANGED: &'static str = "android.bluetooth.adapter.action.STATE_CHANGED";
            #[doc = "public static final [ERROR](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ERROR)"]
            pub const ERROR: i32 = -2147483648;
            #[doc = "public static final [EXTRA_CONNECTION_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_CONNECTION_STATE)"]
            pub const EXTRA_CONNECTION_STATE: &'static str = "android.bluetooth.adapter.extra.CONNECTION_STATE";
            #[doc = "public static final [EXTRA_DISCOVERABLE_DURATION](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_DISCOVERABLE_DURATION)"]
            pub const EXTRA_DISCOVERABLE_DURATION: &'static str =
                "android.bluetooth.adapter.extra.DISCOVERABLE_DURATION";
            #[doc = "public static final [EXTRA_LOCAL_NAME](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_LOCAL_NAME)"]
            pub const EXTRA_LOCAL_NAME: &'static str = "android.bluetooth.adapter.extra.LOCAL_NAME";
            #[doc = "public static final [EXTRA_PREVIOUS_CONNECTION_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_PREVIOUS_CONNECTION_STATE)"]
            pub const EXTRA_PREVIOUS_CONNECTION_STATE: &'static str =
                "android.bluetooth.adapter.extra.PREVIOUS_CONNECTION_STATE";
            #[doc = "public static final [EXTRA_PREVIOUS_SCAN_MODE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_PREVIOUS_SCAN_MODE)"]
            pub const EXTRA_PREVIOUS_SCAN_MODE: &'static str = "android.bluetooth.adapter.extra.PREVIOUS_SCAN_MODE";
            #[doc = "public static final [EXTRA_PREVIOUS_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_PREVIOUS_STATE)"]
            pub const EXTRA_PREVIOUS_STATE: &'static str = "android.bluetooth.adapter.extra.PREVIOUS_STATE";
            #[doc = "public static final [EXTRA_SCAN_MODE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_SCAN_MODE)"]
            pub const EXTRA_SCAN_MODE: &'static str = "android.bluetooth.adapter.extra.SCAN_MODE";
            #[doc = "public static final [EXTRA_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_STATE)"]
            pub const EXTRA_STATE: &'static str = "android.bluetooth.adapter.extra.STATE";
            #[doc = "public static final [SCAN_MODE_CONNECTABLE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#SCAN_MODE_CONNECTABLE)"]
            pub const SCAN_MODE_CONNECTABLE: i32 = 21;
            #[doc = "public static final [SCAN_MODE_CONNECTABLE_DISCOVERABLE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#SCAN_MODE_CONNECTABLE_DISCOVERABLE)"]
            pub const SCAN_MODE_CONNECTABLE_DISCOVERABLE: i32 = 23;
            #[doc = "public static final [SCAN_MODE_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#SCAN_MODE_NONE)"]
            pub const SCAN_MODE_NONE: i32 = 20;
            #[doc = "public static final [STATE_CONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_CONNECTED)"]
            pub const STATE_CONNECTED: i32 = 2;
            #[doc = "public static final [STATE_CONNECTING](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_CONNECTING)"]
            pub const STATE_CONNECTING: i32 = 1;
            #[doc = "public static final [STATE_DISCONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_DISCONNECTED)"]
            pub const STATE_DISCONNECTED: i32 = 0;
            #[doc = "public static final [STATE_DISCONNECTING](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_DISCONNECTING)"]
            pub const STATE_DISCONNECTING: i32 = 3;
            #[doc = "public static final [STATE_OFF](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_OFF)"]
            pub const STATE_OFF: i32 = 10;
            #[doc = "public static final [STATE_ON](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_ON)"]
            pub const STATE_ON: i32 = 12;
            #[doc = "public static final [STATE_TURNING_OFF](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_TURNING_OFF)"]
            pub const STATE_TURNING_OFF: i32 = 13;
            #[doc = "public static final [STATE_TURNING_ON](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_TURNING_ON)"]
            pub const STATE_TURNING_ON: i32 = 11;
        }
        #[doc = "interface [BluetoothAdapter.LeScanCallback](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.LeScanCallback.html)"]
        pub enum BluetoothAdapter_LeScanCallback {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothAdapter_LeScanCallback {}
        unsafe impl ::java_spaghetti::JniType for BluetoothAdapter_LeScanCallback {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothAdapter$LeScanCallback")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothAdapter_LeScanCallback {}
        impl BluetoothAdapter_LeScanCallback {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothAdapter$LeScanCallback"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[onLeScan](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.LeScanCallback.html#onLeScan(android.bluetooth.BluetoothDevice,%20int,%20byte[]))"]
            pub fn onLeScan<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onLeScan",
                                c"(Landroid/bluetooth/BluetoothDevice;I[B)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "class [BluetoothAssignedNumbers](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html)"]
        pub enum BluetoothAssignedNumbers {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothAssignedNumbers {}
        unsafe impl ::java_spaghetti::JniType for BluetoothAssignedNumbers {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothAssignedNumbers")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothAssignedNumbers {}
        impl BluetoothAssignedNumbers {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothAssignedNumbers"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "public static final [AAMP_OF_AMERICA](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#AAMP_OF_AMERICA)"]
            pub const AAMP_OF_AMERICA: i32 = 190;
            #[doc = "public static final [ACCEL_SEMICONDUCTOR](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ACCEL_SEMICONDUCTOR)"]
            pub const ACCEL_SEMICONDUCTOR: i32 = 74;
            #[doc = "public static final [ACE_SENSOR](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ACE_SENSOR)"]
            pub const ACE_SENSOR: i32 = 188;
            #[doc = "public static final [ADIDAS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ADIDAS)"]
            pub const ADIDAS: i32 = 195;
            #[doc = "public static final [ADVANCED_PANMOBIL_SYSTEMS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ADVANCED_PANMOBIL_SYSTEMS)"]
            pub const ADVANCED_PANMOBIL_SYSTEMS: i32 = 145;
            #[doc = "public static final [AIROHA_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#AIROHA_TECHNOLOGY)"]
            pub const AIROHA_TECHNOLOGY: i32 = 148;
            #[doc = "public static final [ALCATEL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ALCATEL)"]
            pub const ALCATEL: i32 = 36;
            #[doc = "public static final [ALPWISE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ALPWISE)"]
            pub const ALPWISE: i32 = 154;
            #[doc = "public static final [AMICCOM_ELECTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#AMICCOM_ELECTRONICS)"]
            pub const AMICCOM_ELECTRONICS: i32 = 192;
            #[doc = "public static final [APLIX](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#APLIX)"]
            pub const APLIX: i32 = 189;
            #[doc = "public static final [APPLE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#APPLE)"]
            pub const APPLE: i32 = 76;
            #[doc = "public static final [APT_LICENSING](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#APT_LICENSING)"]
            pub const APT_LICENSING: i32 = 79;
            #[doc = "public static final [ARCHOS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ARCHOS)"]
            pub const ARCHOS: i32 = 207;
            #[doc = "public static final [ARP_DEVICES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ARP_DEVICES)"]
            pub const ARP_DEVICES: i32 = 168;
            #[doc = "public static final [ATHEROS_COMMUNICATIONS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ATHEROS_COMMUNICATIONS)"]
            pub const ATHEROS_COMMUNICATIONS: i32 = 69;
            #[doc = "public static final [ATMEL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ATMEL)"]
            pub const ATMEL: i32 = 19;
            #[doc = "public static final [AUSTCO_COMMUNICATION_SYSTEMS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#AUSTCO_COMMUNICATION_SYSTEMS)"]
            pub const AUSTCO_COMMUNICATION_SYSTEMS: i32 = 213;
            #[doc = "public static final [AUTONET_MOBILE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#AUTONET_MOBILE)"]
            pub const AUTONET_MOBILE: i32 = 127;
            #[doc = "public static final [AVAGO](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#AVAGO)"]
            pub const AVAGO: i32 = 78;
            #[doc = "public static final [AVM_BERLIN](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#AVM_BERLIN)"]
            pub const AVM_BERLIN: i32 = 31;
            #[doc = "public static final [A_AND_D_ENGINEERING](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#A_AND_D_ENGINEERING)"]
            pub const A_AND_D_ENGINEERING: i32 = 105;
            #[doc = "public static final [A_AND_R_CAMBRIDGE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#A_AND_R_CAMBRIDGE)"]
            pub const A_AND_R_CAMBRIDGE: i32 = 124;
            #[doc = "public static final [BANDSPEED](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BANDSPEED)"]
            pub const BANDSPEED: i32 = 32;
            #[doc = "public static final [BAND_XI_INTERNATIONAL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BAND_XI_INTERNATIONAL)"]
            pub const BAND_XI_INTERNATIONAL: i32 = 100;
            #[doc = "public static final [BDE_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BDE_TECHNOLOGY)"]
            pub const BDE_TECHNOLOGY: i32 = 180;
            #[doc = "public static final [BEATS_ELECTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BEATS_ELECTRONICS)"]
            pub const BEATS_ELECTRONICS: i32 = 204;
            #[doc = "public static final [BEAUTIFUL_ENTERPRISE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BEAUTIFUL_ENTERPRISE)"]
            pub const BEAUTIFUL_ENTERPRISE: i32 = 108;
            #[doc = "public static final [BEKEY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BEKEY)"]
            pub const BEKEY: i32 = 178;
            #[doc = "public static final [BELKIN_INTERNATIONAL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BELKIN_INTERNATIONAL)"]
            pub const BELKIN_INTERNATIONAL: i32 = 92;
            #[doc = "public static final [BINAURIC](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BINAURIC)"]
            pub const BINAURIC: i32 = 203;
            #[doc = "public static final [BIOSENTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BIOSENTRONICS)"]
            pub const BIOSENTRONICS: i32 = 219;
            #[doc = "public static final [BLUEGIGA](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BLUEGIGA)"]
            pub const BLUEGIGA: i32 = 71;
            #[doc = "public static final [BLUERADIOS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BLUERADIOS)"]
            pub const BLUERADIOS: i32 = 133;
            #[doc = "public static final [BLUETOOTH_SIG](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BLUETOOTH_SIG)"]
            pub const BLUETOOTH_SIG: i32 = 63;
            #[doc = "public static final [BLUETREK_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BLUETREK_TECHNOLOGIES)"]
            pub const BLUETREK_TECHNOLOGIES: i32 = 151;
            #[doc = "public static final [BOSE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BOSE)"]
            pub const BOSE: i32 = 158;
            #[doc = "public static final [BRIARTEK](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BRIARTEK)"]
            pub const BRIARTEK: i32 = 109;
            #[doc = "public static final [BROADCOM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BROADCOM)"]
            pub const BROADCOM: i32 = 15;
            #[doc = "public static final [CAEN_RFID](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#CAEN_RFID)"]
            pub const CAEN_RFID: i32 = 170;
            #[doc = "public static final [CAMBRIDGE_SILICON_RADIO](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#CAMBRIDGE_SILICON_RADIO)"]
            pub const CAMBRIDGE_SILICON_RADIO: i32 = 10;
            #[doc = "public static final [CATC](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#CATC)"]
            pub const CATC: i32 = 52;
            #[doc = "public static final [CINETIX](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#CINETIX)"]
            pub const CINETIX: i32 = 175;
            #[doc = "public static final [CLARINOX_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#CLARINOX_TECHNOLOGIES)"]
            pub const CLARINOX_TECHNOLOGIES: i32 = 179;
            #[doc = "public static final [COLORFY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#COLORFY)"]
            pub const COLORFY: i32 = 156;
            #[doc = "public static final [COMMIL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#COMMIL)"]
            pub const COMMIL: i32 = 51;
            #[doc = "public static final [CONEXANT_SYSTEMS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#CONEXANT_SYSTEMS)"]
            pub const CONEXANT_SYSTEMS: i32 = 28;
            #[doc = "public static final [CONNECTBLUE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#CONNECTBLUE)"]
            pub const CONNECTBLUE: i32 = 113;
            #[doc = "public static final [CONTINENTAL_AUTOMOTIVE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#CONTINENTAL_AUTOMOTIVE)"]
            pub const CONTINENTAL_AUTOMOTIVE: i32 = 75;
            #[doc = "public static final [CONWISE_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#CONWISE_TECHNOLOGY)"]
            pub const CONWISE_TECHNOLOGY: i32 = 66;
            #[doc = "public static final [CREATIVE_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#CREATIVE_TECHNOLOGY)"]
            pub const CREATIVE_TECHNOLOGY: i32 = 118;
            #[doc = "public static final [C_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#C_TECHNOLOGIES)"]
            pub const C_TECHNOLOGIES: i32 = 38;
            #[doc = "public static final [DANLERS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#DANLERS)"]
            pub const DANLERS: i32 = 225;
            #[doc = "public static final [DELORME_PUBLISHING_COMPANY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#DELORME_PUBLISHING_COMPANY)"]
            pub const DELORME_PUBLISHING_COMPANY: i32 = 128;
            #[doc = "public static final [DEXCOM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#DEXCOM)"]
            pub const DEXCOM: i32 = 208;
            #[doc = "public static final [DIALOG_SEMICONDUCTOR](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#DIALOG_SEMICONDUCTOR)"]
            pub const DIALOG_SEMICONDUCTOR: i32 = 210;
            #[doc = "public static final [DIGIANSWER](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#DIGIANSWER)"]
            pub const DIGIANSWER: i32 = 12;
            #[doc = "public static final [ECLIPSE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ECLIPSE)"]
            pub const ECLIPSE: i32 = 53;
            #[doc = "public static final [ECOTEST](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ECOTEST)"]
            pub const ECOTEST: i32 = 136;
            #[doc = "public static final [ELGATO_SYSTEMS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ELGATO_SYSTEMS)"]
            pub const ELGATO_SYSTEMS: i32 = 206;
            #[doc = "public static final [EM_MICROELECTRONIC_MARIN](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#EM_MICROELECTRONIC_MARIN)"]
            pub const EM_MICROELECTRONIC_MARIN: i32 = 90;
            #[doc = "public static final [EQUINOX_AG](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#EQUINOX_AG)"]
            pub const EQUINOX_AG: i32 = 134;
            #[doc = "public static final [ERICSSON_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ERICSSON_TECHNOLOGY)"]
            pub const ERICSSON_TECHNOLOGY: i32 = 0;
            #[doc = "public static final [EVLUMA](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#EVLUMA)"]
            pub const EVLUMA: i32 = 201;
            #[doc = "public static final [FREE2MOVE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#FREE2MOVE)"]
            pub const FREE2MOVE: i32 = 83;
            #[doc = "public static final [FUNAI_ELECTRIC](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#FUNAI_ELECTRIC)"]
            pub const FUNAI_ELECTRIC: i32 = 144;
            #[doc = "public static final [GARMIN_INTERNATIONAL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GARMIN_INTERNATIONAL)"]
            pub const GARMIN_INTERNATIONAL: i32 = 135;
            #[doc = "public static final [GCT_SEMICONDUCTOR](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GCT_SEMICONDUCTOR)"]
            pub const GCT_SEMICONDUCTOR: i32 = 45;
            #[doc = "public static final [GELO](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GELO)"]
            pub const GELO: i32 = 200;
            #[doc = "public static final [GENEQ](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GENEQ)"]
            pub const GENEQ: i32 = 194;
            #[doc = "public static final [GENERAL_MOTORS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GENERAL_MOTORS)"]
            pub const GENERAL_MOTORS: i32 = 104;
            #[doc = "public static final [GENNUM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GENNUM)"]
            pub const GENNUM: i32 = 59;
            #[doc = "public static final [GEOFORCE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GEOFORCE)"]
            pub const GEOFORCE: i32 = 157;
            #[doc = "public static final [GIBSON_GUITARS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GIBSON_GUITARS)"]
            pub const GIBSON_GUITARS: i32 = 98;
            #[doc = "public static final [GN_NETCOM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GN_NETCOM)"]
            pub const GN_NETCOM: i32 = 103;
            #[doc = "public static final [GN_RESOUND](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GN_RESOUND)"]
            pub const GN_RESOUND: i32 = 137;
            #[doc = "public static final [GOOGLE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GOOGLE)"]
            pub const GOOGLE: i32 = 224;
            #[doc = "public static final [GREEN_THROTTLE_GAMES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GREEN_THROTTLE_GAMES)"]
            pub const GREEN_THROTTLE_GAMES: i32 = 172;
            #[doc = "public static final [GROUP_SENSE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GROUP_SENSE)"]
            pub const GROUP_SENSE: i32 = 115;
            #[doc = "public static final [HANLYNN_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#HANLYNN_TECHNOLOGIES)"]
            pub const HANLYNN_TECHNOLOGIES: i32 = 123;
            #[doc = "public static final [HARMAN_INTERNATIONAL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#HARMAN_INTERNATIONAL)"]
            pub const HARMAN_INTERNATIONAL: i32 = 87;
            #[doc = "public static final [HEWLETT_PACKARD](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#HEWLETT_PACKARD)"]
            pub const HEWLETT_PACKARD: i32 = 101;
            #[doc = "public static final [HITACHI](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#HITACHI)"]
            pub const HITACHI: i32 = 41;
            #[doc = "public static final [HOSIDEN](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#HOSIDEN)"]
            pub const HOSIDEN: i32 = 221;
            #[doc = "public static final [IBM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#IBM)"]
            pub const IBM: i32 = 3;
            #[doc = "public static final [INFINEON_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#INFINEON_TECHNOLOGIES)"]
            pub const INFINEON_TECHNOLOGIES: i32 = 9;
            #[doc = "public static final [INGENIEUR_SYSTEMGRUPPE_ZAHN](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#INGENIEUR_SYSTEMGRUPPE_ZAHN)"]
            pub const INGENIEUR_SYSTEMGRUPPE_ZAHN: i32 = 171;
            #[doc = "public static final [INTEGRATED_SILICON_SOLUTION](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#INTEGRATED_SILICON_SOLUTION)"]
            pub const INTEGRATED_SILICON_SOLUTION: i32 = 65;
            #[doc = "public static final [INTEGRATED_SYSTEM_SOLUTION](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#INTEGRATED_SYSTEM_SOLUTION)"]
            pub const INTEGRATED_SYSTEM_SOLUTION: i32 = 57;
            #[doc = "public static final [INTEL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#INTEL)"]
            pub const INTEL: i32 = 2;
            #[doc = "public static final [INVENTEL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#INVENTEL)"]
            pub const INVENTEL: i32 = 30;
            #[doc = "public static final [IPEXTREME](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#IPEXTREME)"]
            pub const IPEXTREME: i32 = 61;
            #[doc = "public static final [I_TECH_DYNAMIC_GLOBAL_DISTRIBUTION](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#I_TECH_DYNAMIC_GLOBAL_DISTRIBUTION)"]
            pub const I_TECH_DYNAMIC_GLOBAL_DISTRIBUTION: i32 = 153;
            #[doc = "public static final [JAWBONE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#JAWBONE)"]
            pub const JAWBONE: i32 = 138;
            #[doc = "public static final [JIANGSU_TOPPOWER_AUTOMOTIVE_ELECTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#JIANGSU_TOPPOWER_AUTOMOTIVE_ELECTRONICS)"]
            pub const JIANGSU_TOPPOWER_AUTOMOTIVE_ELECTRONICS: i32 = 155;
            #[doc = "public static final [JOHNSON_CONTROLS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#JOHNSON_CONTROLS)"]
            pub const JOHNSON_CONTROLS: i32 = 185;
            #[doc = "public static final [J_AND_M](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#J_AND_M)"]
            pub const J_AND_M: i32 = 82;
            #[doc = "public static final [KAWANTECH](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#KAWANTECH)"]
            pub const KAWANTECH: i32 = 212;
            #[doc = "public static final [KC_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#KC_TECHNOLOGY)"]
            pub const KC_TECHNOLOGY: i32 = 22;
            #[doc = "public static final [KENSINGTON_COMPUTER_PRODUCTS_GROUP](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#KENSINGTON_COMPUTER_PRODUCTS_GROUP)"]
            pub const KENSINGTON_COMPUTER_PRODUCTS_GROUP: i32 = 160;
            #[doc = "public static final [LAIRD_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#LAIRD_TECHNOLOGIES)"]
            pub const LAIRD_TECHNOLOGIES: i32 = 119;
            #[doc = "public static final [LESSWIRE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#LESSWIRE)"]
            pub const LESSWIRE: i32 = 121;
            #[doc = "public static final [LG_ELECTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#LG_ELECTRONICS)"]
            pub const LG_ELECTRONICS: i32 = 196;
            #[doc = "public static final [LINAK](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#LINAK)"]
            pub const LINAK: i32 = 164;
            #[doc = "public static final [LUCENT](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#LUCENT)"]
            pub const LUCENT: i32 = 7;
            #[doc = "public static final [LUDUS_HELSINKI](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#LUDUS_HELSINKI)"]
            pub const LUDUS_HELSINKI: i32 = 132;
            #[doc = "public static final [MACRONIX](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MACRONIX)"]
            pub const MACRONIX: i32 = 44;
            #[doc = "public static final [MAGNETI_MARELLI](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MAGNETI_MARELLI)"]
            pub const MAGNETI_MARELLI: i32 = 169;
            #[doc = "public static final [MANSELLA](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MANSELLA)"]
            pub const MANSELLA: i32 = 33;
            #[doc = "public static final [MARVELL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MARVELL)"]
            pub const MARVELL: i32 = 72;
            #[doc = "public static final [MATSUSHITA_ELECTRIC](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MATSUSHITA_ELECTRIC)"]
            pub const MATSUSHITA_ELECTRIC: i32 = 58;
            #[doc = "public static final [MC10](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MC10)"]
            pub const MC10: i32 = 202;
            #[doc = "public static final [MEDIATEK](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MEDIATEK)"]
            pub const MEDIATEK: i32 = 70;
            #[doc = "public static final [MESO_INTERNATIONAL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MESO_INTERNATIONAL)"]
            pub const MESO_INTERNATIONAL: i32 = 182;
            #[doc = "public static final [META_WATCH](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#META_WATCH)"]
            pub const META_WATCH: i32 = 163;
            #[doc = "public static final [MEWTEL_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MEWTEL_TECHNOLOGY)"]
            pub const MEWTEL_TECHNOLOGY: i32 = 47;
            #[doc = "public static final [MICOMMAND](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MICOMMAND)"]
            pub const MICOMMAND: i32 = 99;
            #[doc = "public static final [MICROCHIP_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MICROCHIP_TECHNOLOGY)"]
            pub const MICROCHIP_TECHNOLOGY: i32 = 205;
            #[doc = "public static final [MICROSOFT](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MICROSOFT)"]
            pub const MICROSOFT: i32 = 6;
            #[doc = "public static final [MINDTREE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MINDTREE)"]
            pub const MINDTREE: i32 = 106;
            #[doc = "public static final [MISFIT_WEARABLES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MISFIT_WEARABLES)"]
            pub const MISFIT_WEARABLES: i32 = 223;
            #[doc = "public static final [MITEL_SEMICONDUCTOR](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MITEL_SEMICONDUCTOR)"]
            pub const MITEL_SEMICONDUCTOR: i32 = 16;
            #[doc = "public static final [MITSUBISHI_ELECTRIC](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MITSUBISHI_ELECTRIC)"]
            pub const MITSUBISHI_ELECTRIC: i32 = 20;
            #[doc = "public static final [MOBILIAN_CORPORATION](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MOBILIAN_CORPORATION)"]
            pub const MOBILIAN_CORPORATION: i32 = 55;
            #[doc = "public static final [MONSTER](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MONSTER)"]
            pub const MONSTER: i32 = 112;
            #[doc = "public static final [MOTOROLA](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MOTOROLA)"]
            pub const MOTOROLA: i32 = 8;
            #[doc = "public static final [MSTAR_SEMICONDUCTOR](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MSTAR_SEMICONDUCTOR)"]
            pub const MSTAR_SEMICONDUCTOR: i32 = 122;
            #[doc = "public static final [MUZIK](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MUZIK)"]
            pub const MUZIK: i32 = 222;
            #[doc = "public static final [NEC](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#NEC)"]
            pub const NEC: i32 = 34;
            #[doc = "public static final [NEC_LIGHTING](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#NEC_LIGHTING)"]
            pub const NEC_LIGHTING: i32 = 149;
            #[doc = "public static final [NEWLOGIC](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#NEWLOGIC)"]
            pub const NEWLOGIC: i32 = 23;
            #[doc = "public static final [NIKE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#NIKE)"]
            pub const NIKE: i32 = 120;
            #[doc = "public static final [NINE_SOLUTIONS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#NINE_SOLUTIONS)"]
            pub const NINE_SOLUTIONS: i32 = 102;
            #[doc = "public static final [NOKIA_MOBILE_PHONES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#NOKIA_MOBILE_PHONES)"]
            pub const NOKIA_MOBILE_PHONES: i32 = 1;
            #[doc = "public static final [NORDIC_SEMICONDUCTOR](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#NORDIC_SEMICONDUCTOR)"]
            pub const NORDIC_SEMICONDUCTOR: i32 = 89;
            #[doc = "public static final [NORWOOD_SYSTEMS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#NORWOOD_SYSTEMS)"]
            pub const NORWOOD_SYSTEMS: i32 = 46;
            #[doc = "public static final [ODM_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ODM_TECHNOLOGY)"]
            pub const ODM_TECHNOLOGY: i32 = 150;
            #[doc = "public static final [OMEGAWAVE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#OMEGAWAVE)"]
            pub const OMEGAWAVE: i32 = 174;
            #[doc = "public static final [ONSET_COMPUTER](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ONSET_COMPUTER)"]
            pub const ONSET_COMPUTER: i32 = 197;
            #[doc = "public static final [OPEN_INTERFACE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#OPEN_INTERFACE)"]
            pub const OPEN_INTERFACE: i32 = 39;
            #[doc = "public static final [OTL_DYNAMICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#OTL_DYNAMICS)"]
            pub const OTL_DYNAMICS: i32 = 165;
            #[doc = "public static final [PANDA_OCEAN](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#PANDA_OCEAN)"]
            pub const PANDA_OCEAN: i32 = 166;
            #[doc = "public static final [PARROT](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#PARROT)"]
            pub const PARROT: i32 = 67;
            #[doc = "public static final [PARTHUS_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#PARTHUS_TECHNOLOGIES)"]
            pub const PARTHUS_TECHNOLOGIES: i32 = 14;
            #[doc = "public static final [PASSIF_SEMICONDUCTOR](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#PASSIF_SEMICONDUCTOR)"]
            pub const PASSIF_SEMICONDUCTOR: i32 = 176;
            #[doc = "public static final [PETER_SYSTEMTECHNIK](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#PETER_SYSTEMTECHNIK)"]
            pub const PETER_SYSTEMTECHNIK: i32 = 173;
            #[doc = "public static final [PHILIPS_SEMICONDUCTORS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#PHILIPS_SEMICONDUCTORS)"]
            pub const PHILIPS_SEMICONDUCTORS: i32 = 37;
            #[doc = "public static final [PLANTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#PLANTRONICS)"]
            pub const PLANTRONICS: i32 = 85;
            #[doc = "public static final [POLAR_ELECTRO](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#POLAR_ELECTRO)"]
            pub const POLAR_ELECTRO: i32 = 107;
            #[doc = "public static final [POLAR_ELECTRO_EUROPE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#POLAR_ELECTRO_EUROPE)"]
            pub const POLAR_ELECTRO_EUROPE: i32 = 209;
            #[doc = "public static final [PROCTER_AND_GAMBLE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#PROCTER_AND_GAMBLE)"]
            pub const PROCTER_AND_GAMBLE: i32 = 220;
            #[doc = "public static final [QUALCOMM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#QUALCOMM)"]
            pub const QUALCOMM: i32 = 29;
            #[doc = "public static final [QUALCOMM_CONNECTED_EXPERIENCES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#QUALCOMM_CONNECTED_EXPERIENCES)"]
            pub const QUALCOMM_CONNECTED_EXPERIENCES: i32 = 216;
            #[doc = "public static final [QUALCOMM_INNOVATION_CENTER](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#QUALCOMM_INNOVATION_CENTER)"]
            pub const QUALCOMM_INNOVATION_CENTER: i32 = 184;
            #[doc = "public static final [QUALCOMM_LABS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#QUALCOMM_LABS)"]
            pub const QUALCOMM_LABS: i32 = 140;
            #[doc = "public static final [QUALCOMM_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#QUALCOMM_TECHNOLOGIES)"]
            pub const QUALCOMM_TECHNOLOGIES: i32 = 215;
            #[doc = "public static final [QUINTIC](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#QUINTIC)"]
            pub const QUINTIC: i32 = 142;
            #[doc = "public static final [QUUPPA](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#QUUPPA)"]
            pub const QUUPPA: i32 = 199;
            #[doc = "public static final [RALINK_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#RALINK_TECHNOLOGY)"]
            pub const RALINK_TECHNOLOGY: i32 = 91;
            #[doc = "public static final [RDA_MICROELECTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#RDA_MICROELECTRONICS)"]
            pub const RDA_MICROELECTRONICS: i32 = 97;
            #[doc = "public static final [REALTEK_SEMICONDUCTOR](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#REALTEK_SEMICONDUCTOR)"]
            pub const REALTEK_SEMICONDUCTOR: i32 = 93;
            #[doc = "public static final [RED_M](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#RED_M)"]
            pub const RED_M: i32 = 50;
            #[doc = "public static final [RENESAS_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#RENESAS_TECHNOLOGY)"]
            pub const RENESAS_TECHNOLOGY: i32 = 54;
            #[doc = "public static final [RESEARCH_IN_MOTION](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#RESEARCH_IN_MOTION)"]
            pub const RESEARCH_IN_MOTION: i32 = 60;
            #[doc = "public static final [RF_MICRO_DEVICES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#RF_MICRO_DEVICES)"]
            pub const RF_MICRO_DEVICES: i32 = 40;
            #[doc = "public static final [RIVIERAWAVES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#RIVIERAWAVES)"]
            pub const RIVIERAWAVES: i32 = 96;
            #[doc = "public static final [ROHDE_AND_SCHWARZ](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ROHDE_AND_SCHWARZ)"]
            pub const ROHDE_AND_SCHWARZ: i32 = 25;
            #[doc = "public static final [RTX_TELECOM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#RTX_TELECOM)"]
            pub const RTX_TELECOM: i32 = 21;
            #[doc = "public static final [SAMSUNG_ELECTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SAMSUNG_ELECTRONICS)"]
            pub const SAMSUNG_ELECTRONICS: i32 = 117;
            #[doc = "public static final [SARIS_CYCLING_GROUP](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SARIS_CYCLING_GROUP)"]
            pub const SARIS_CYCLING_GROUP: i32 = 177;
            #[doc = "public static final [SEERS_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SEERS_TECHNOLOGY)"]
            pub const SEERS_TECHNOLOGY: i32 = 125;
            #[doc = "public static final [SEIKO_EPSON](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SEIKO_EPSON)"]
            pub const SEIKO_EPSON: i32 = 64;
            #[doc = "public static final [SELFLY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SELFLY)"]
            pub const SELFLY: i32 = 198;
            #[doc = "public static final [SEMILINK](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SEMILINK)"]
            pub const SEMILINK: i32 = 226;
            #[doc = "public static final [SENNHEISER_COMMUNICATIONS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SENNHEISER_COMMUNICATIONS)"]
            pub const SENNHEISER_COMMUNICATIONS: i32 = 130;
            #[doc = "public static final [SHANGHAI_SUPER_SMART_ELECTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SHANGHAI_SUPER_SMART_ELECTRONICS)"]
            pub const SHANGHAI_SUPER_SMART_ELECTRONICS: i32 = 114;
            #[doc = "public static final [SHENZHEN_EXCELSECU_DATA_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SHENZHEN_EXCELSECU_DATA_TECHNOLOGY)"]
            pub const SHENZHEN_EXCELSECU_DATA_TECHNOLOGY: i32 = 193;
            #[doc = "public static final [SIGNIA_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SIGNIA_TECHNOLOGIES)"]
            pub const SIGNIA_TECHNOLOGIES: i32 = 27;
            #[doc = "public static final [SILICON_WAVE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SILICON_WAVE)"]
            pub const SILICON_WAVE: i32 = 11;
            #[doc = "public static final [SIRF_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SIRF_TECHNOLOGY)"]
            pub const SIRF_TECHNOLOGY: i32 = 80;
            #[doc = "public static final [SOCKET_MOBILE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SOCKET_MOBILE)"]
            pub const SOCKET_MOBILE: i32 = 68;
            #[doc = "public static final [SONY_ERICSSON](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SONY_ERICSSON)"]
            pub const SONY_ERICSSON: i32 = 86;
            #[doc = "public static final [SOUND_ID](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SOUND_ID)"]
            pub const SOUND_ID: i32 = 111;
            #[doc = "public static final [SPORTS_TRACKING_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SPORTS_TRACKING_TECHNOLOGIES)"]
            pub const SPORTS_TRACKING_TECHNOLOGIES: i32 = 126;
            #[doc = "public static final [SR_MEDIZINELEKTRONIK](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SR_MEDIZINELEKTRONIK)"]
            pub const SR_MEDIZINELEKTRONIK: i32 = 161;
            #[doc = "public static final [STACCATO_COMMUNICATIONS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#STACCATO_COMMUNICATIONS)"]
            pub const STACCATO_COMMUNICATIONS: i32 = 77;
            #[doc = "public static final [STALMART_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#STALMART_TECHNOLOGY)"]
            pub const STALMART_TECHNOLOGY: i32 = 191;
            #[doc = "public static final [STARKEY_LABORATORIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#STARKEY_LABORATORIES)"]
            pub const STARKEY_LABORATORIES: i32 = 186;
            #[doc = "public static final [STOLLMAN_E_PLUS_V](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#STOLLMAN_E_PLUS_V)"]
            pub const STOLLMAN_E_PLUS_V: i32 = 143;
            #[doc = "public static final [STONESTREET_ONE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#STONESTREET_ONE)"]
            pub const STONESTREET_ONE: i32 = 94;
            #[doc = "public static final [ST_MICROELECTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ST_MICROELECTRONICS)"]
            pub const ST_MICROELECTRONICS: i32 = 48;
            #[doc = "public static final [SUMMIT_DATA_COMMUNICATIONS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SUMMIT_DATA_COMMUNICATIONS)"]
            pub const SUMMIT_DATA_COMMUNICATIONS: i32 = 110;
            #[doc = "public static final [SUUNTO](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SUUNTO)"]
            pub const SUUNTO: i32 = 159;
            #[doc = "public static final [SWIRL_NETWORKS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SWIRL_NETWORKS)"]
            pub const SWIRL_NETWORKS: i32 = 181;
            #[doc = "public static final [SYMBOL_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SYMBOL_TECHNOLOGIES)"]
            pub const SYMBOL_TECHNOLOGIES: i32 = 42;
            #[doc = "public static final [SYNOPSYS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SYNOPSYS)"]
            pub const SYNOPSYS: i32 = 49;
            #[doc = "public static final [SYSTEMS_AND_CHIPS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SYSTEMS_AND_CHIPS)"]
            pub const SYSTEMS_AND_CHIPS: i32 = 62;
            #[doc = "public static final [S_POWER_ELECTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#S_POWER_ELECTRONICS)"]
            pub const S_POWER_ELECTRONICS: i32 = 187;
            #[doc = "public static final [TAIXINGBANG_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TAIXINGBANG_TECHNOLOGY)"]
            pub const TAIXINGBANG_TECHNOLOGY: i32 = 211;
            #[doc = "public static final [TENOVIS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TENOVIS)"]
            pub const TENOVIS: i32 = 43;
            #[doc = "public static final [TERAX](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TERAX)"]
            pub const TERAX: i32 = 56;
            #[doc = "public static final [TEXAS_INSTRUMENTS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TEXAS_INSTRUMENTS)"]
            pub const TEXAS_INSTRUMENTS: i32 = 13;
            #[doc = "public static final [THINKOPTICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#THINKOPTICS)"]
            pub const THINKOPTICS: i32 = 146;
            #[doc = "public static final [THREECOM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#THREECOM)"]
            pub const THREECOM: i32 = 5;
            #[doc = "public static final [THREE_DIJOY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#THREE_DIJOY)"]
            pub const THREE_DIJOY: i32 = 84;
            #[doc = "public static final [THREE_DSP](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#THREE_DSP)"]
            pub const THREE_DSP: i32 = 73;
            #[doc = "public static final [TIMEKEEPING_SYSTEMS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TIMEKEEPING_SYSTEMS)"]
            pub const TIMEKEEPING_SYSTEMS: i32 = 131;
            #[doc = "public static final [TIMEX_GROUP_USA](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TIMEX_GROUP_USA)"]
            pub const TIMEX_GROUP_USA: i32 = 214;
            #[doc = "public static final [TOPCORN_POSITIONING_SYSTEMS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TOPCORN_POSITIONING_SYSTEMS)"]
            pub const TOPCORN_POSITIONING_SYSTEMS: i32 = 139;
            #[doc = "public static final [TOSHIBA](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TOSHIBA)"]
            pub const TOSHIBA: i32 = 4;
            #[doc = "public static final [TRANSILICA](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TRANSILICA)"]
            pub const TRANSILICA: i32 = 24;
            #[doc = "public static final [TRELAB](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TRELAB)"]
            pub const TRELAB: i32 = 183;
            #[doc = "public static final [TTPCOM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TTPCOM)"]
            pub const TTPCOM: i32 = 26;
            #[doc = "public static final [TXTR](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TXTR)"]
            pub const TXTR: i32 = 218;
            #[doc = "public static final [TZERO_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TZERO_TECHNOLOGIES)"]
            pub const TZERO_TECHNOLOGIES: i32 = 81;
            #[doc = "public static final [UNIVERSAL_ELECTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#UNIVERSAL_ELECTRONICS)"]
            pub const UNIVERSAL_ELECTRONICS: i32 = 147;
            #[doc = "public static final [VERTU](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#VERTU)"]
            pub const VERTU: i32 = 162;
            #[doc = "public static final [VISTEON](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#VISTEON)"]
            pub const VISTEON: i32 = 167;
            #[doc = "public static final [VIZIO](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#VIZIO)"]
            pub const VIZIO: i32 = 88;
            #[doc = "public static final [VOYETRA_TURTLE_BEACH](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#VOYETRA_TURTLE_BEACH)"]
            pub const VOYETRA_TURTLE_BEACH: i32 = 217;
            #[doc = "public static final [WAVEPLUS_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#WAVEPLUS_TECHNOLOGY)"]
            pub const WAVEPLUS_TECHNOLOGY: i32 = 35;
            #[doc = "public static final [WICENTRIC](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#WICENTRIC)"]
            pub const WICENTRIC: i32 = 95;
            #[doc = "public static final [WIDCOMM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#WIDCOMM)"]
            pub const WIDCOMM: i32 = 17;
            #[doc = "public static final [WUXI_VIMICRO](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#WUXI_VIMICRO)"]
            pub const WUXI_VIMICRO: i32 = 129;
            #[doc = "public static final [ZEEVO](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ZEEVO)"]
            pub const ZEEVO: i32 = 18;
            #[doc = "public static final [ZER01_TV](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ZER01_TV)"]
            pub const ZER01_TV: i32 = 152;
            #[doc = "public static final [ZOMM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ZOMM)"]
            pub const ZOMM: i32 = 116;
            #[doc = "public static final [ZSCAN_SOFTWARE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ZSCAN_SOFTWARE)"]
            pub const ZSCAN_SOFTWARE: i32 = 141;
        }
        #[doc = "final class [BluetoothClass](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html)"]
        pub enum BluetoothClass {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothClass {}
        unsafe impl ::java_spaghetti::JniType for BluetoothClass {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothClass")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothClass {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothClass {}
        impl BluetoothClass {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothClass"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[equals](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#equals(java.lang.Object))"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[hashCode](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#hashCode())"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"hashCode",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toString](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#toString())"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#describeContents())"]
            pub fn describeContents<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"describeContents",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[hasService](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#hasService(int))"]
            pub fn hasService<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"hasService",
                                c"(I)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getMajorDeviceClass](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#getMajorDeviceClass())"]
            pub fn getMajorDeviceClass<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getMajorDeviceClass",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDeviceClass](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#getDeviceClass())"]
            pub fn getDeviceClass<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDeviceClass",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[doesClassMatch](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#doesClassMatch(int))"]
            pub fn doesClassMatch<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"doesClassMatch",
                                c"(I)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [PROFILE_A2DP](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#PROFILE_A2DP)"]
            pub const PROFILE_A2DP: i32 = 1;
            #[doc = "public static final [PROFILE_HEADSET](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#PROFILE_HEADSET)"]
            pub const PROFILE_HEADSET: i32 = 0;
            #[doc = "public static final [PROFILE_HID](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#PROFILE_HID)"]
            pub const PROFILE_HID: i32 = 3;
        }
        #[doc = "class [BluetoothClass.Device](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html)"]
        pub enum BluetoothClass_Device {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothClass_Device {}
        unsafe impl ::java_spaghetti::JniType for BluetoothClass_Device {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothClass$Device")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothClass_Device {}
        impl BluetoothClass_Device {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothClass$Device"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[Device](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#Device())"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [AUDIO_VIDEO_CAMCORDER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_CAMCORDER)"]
            pub const AUDIO_VIDEO_CAMCORDER: i32 = 1076;
            #[doc = "public static final [AUDIO_VIDEO_CAR_AUDIO](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_CAR_AUDIO)"]
            pub const AUDIO_VIDEO_CAR_AUDIO: i32 = 1056;
            #[doc = "public static final [AUDIO_VIDEO_HANDSFREE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_HANDSFREE)"]
            pub const AUDIO_VIDEO_HANDSFREE: i32 = 1032;
            #[doc = "public static final [AUDIO_VIDEO_HEADPHONES](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_HEADPHONES)"]
            pub const AUDIO_VIDEO_HEADPHONES: i32 = 1048;
            #[doc = "public static final [AUDIO_VIDEO_HIFI_AUDIO](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_HIFI_AUDIO)"]
            pub const AUDIO_VIDEO_HIFI_AUDIO: i32 = 1064;
            #[doc = "public static final [AUDIO_VIDEO_LOUDSPEAKER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_LOUDSPEAKER)"]
            pub const AUDIO_VIDEO_LOUDSPEAKER: i32 = 1044;
            #[doc = "public static final [AUDIO_VIDEO_MICROPHONE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_MICROPHONE)"]
            pub const AUDIO_VIDEO_MICROPHONE: i32 = 1040;
            #[doc = "public static final [AUDIO_VIDEO_PORTABLE_AUDIO](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_PORTABLE_AUDIO)"]
            pub const AUDIO_VIDEO_PORTABLE_AUDIO: i32 = 1052;
            #[doc = "public static final [AUDIO_VIDEO_SET_TOP_BOX](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_SET_TOP_BOX)"]
            pub const AUDIO_VIDEO_SET_TOP_BOX: i32 = 1060;
            #[doc = "public static final [AUDIO_VIDEO_UNCATEGORIZED](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_UNCATEGORIZED)"]
            pub const AUDIO_VIDEO_UNCATEGORIZED: i32 = 1024;
            #[doc = "public static final [AUDIO_VIDEO_VCR](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_VCR)"]
            pub const AUDIO_VIDEO_VCR: i32 = 1068;
            #[doc = "public static final [AUDIO_VIDEO_VIDEO_CAMERA](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_VIDEO_CAMERA)"]
            pub const AUDIO_VIDEO_VIDEO_CAMERA: i32 = 1072;
            #[doc = "public static final [AUDIO_VIDEO_VIDEO_CONFERENCING](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_VIDEO_CONFERENCING)"]
            pub const AUDIO_VIDEO_VIDEO_CONFERENCING: i32 = 1088;
            #[doc = "public static final [AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER)"]
            pub const AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER: i32 = 1084;
            #[doc = "public static final [AUDIO_VIDEO_VIDEO_GAMING_TOY](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_VIDEO_GAMING_TOY)"]
            pub const AUDIO_VIDEO_VIDEO_GAMING_TOY: i32 = 1096;
            #[doc = "public static final [AUDIO_VIDEO_VIDEO_MONITOR](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_VIDEO_MONITOR)"]
            pub const AUDIO_VIDEO_VIDEO_MONITOR: i32 = 1080;
            #[doc = "public static final [AUDIO_VIDEO_WEARABLE_HEADSET](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_WEARABLE_HEADSET)"]
            pub const AUDIO_VIDEO_WEARABLE_HEADSET: i32 = 1028;
            #[doc = "public static final [COMPUTER_DESKTOP](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#COMPUTER_DESKTOP)"]
            pub const COMPUTER_DESKTOP: i32 = 260;
            #[doc = "public static final [COMPUTER_HANDHELD_PC_PDA](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#COMPUTER_HANDHELD_PC_PDA)"]
            pub const COMPUTER_HANDHELD_PC_PDA: i32 = 272;
            #[doc = "public static final [COMPUTER_LAPTOP](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#COMPUTER_LAPTOP)"]
            pub const COMPUTER_LAPTOP: i32 = 268;
            #[doc = "public static final [COMPUTER_PALM_SIZE_PC_PDA](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#COMPUTER_PALM_SIZE_PC_PDA)"]
            pub const COMPUTER_PALM_SIZE_PC_PDA: i32 = 276;
            #[doc = "public static final [COMPUTER_SERVER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#COMPUTER_SERVER)"]
            pub const COMPUTER_SERVER: i32 = 264;
            #[doc = "public static final [COMPUTER_UNCATEGORIZED](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#COMPUTER_UNCATEGORIZED)"]
            pub const COMPUTER_UNCATEGORIZED: i32 = 256;
            #[doc = "public static final [COMPUTER_WEARABLE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#COMPUTER_WEARABLE)"]
            pub const COMPUTER_WEARABLE: i32 = 280;
            #[doc = "public static final [HEALTH_BLOOD_PRESSURE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#HEALTH_BLOOD_PRESSURE)"]
            pub const HEALTH_BLOOD_PRESSURE: i32 = 2308;
            #[doc = "public static final [HEALTH_DATA_DISPLAY](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#HEALTH_DATA_DISPLAY)"]
            pub const HEALTH_DATA_DISPLAY: i32 = 2332;
            #[doc = "public static final [HEALTH_GLUCOSE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#HEALTH_GLUCOSE)"]
            pub const HEALTH_GLUCOSE: i32 = 2320;
            #[doc = "public static final [HEALTH_PULSE_OXIMETER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#HEALTH_PULSE_OXIMETER)"]
            pub const HEALTH_PULSE_OXIMETER: i32 = 2324;
            #[doc = "public static final [HEALTH_PULSE_RATE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#HEALTH_PULSE_RATE)"]
            pub const HEALTH_PULSE_RATE: i32 = 2328;
            #[doc = "public static final [HEALTH_THERMOMETER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#HEALTH_THERMOMETER)"]
            pub const HEALTH_THERMOMETER: i32 = 2312;
            #[doc = "public static final [HEALTH_UNCATEGORIZED](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#HEALTH_UNCATEGORIZED)"]
            pub const HEALTH_UNCATEGORIZED: i32 = 2304;
            #[doc = "public static final [HEALTH_WEIGHING](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#HEALTH_WEIGHING)"]
            pub const HEALTH_WEIGHING: i32 = 2316;
            #[doc = "public static final [PERIPHERAL_KEYBOARD](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#PERIPHERAL_KEYBOARD)"]
            pub const PERIPHERAL_KEYBOARD: i32 = 1344;
            #[doc = "public static final [PERIPHERAL_KEYBOARD_POINTING](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#PERIPHERAL_KEYBOARD_POINTING)"]
            pub const PERIPHERAL_KEYBOARD_POINTING: i32 = 1472;
            #[doc = "public static final [PERIPHERAL_NON_KEYBOARD_NON_POINTING](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#PERIPHERAL_NON_KEYBOARD_NON_POINTING)"]
            pub const PERIPHERAL_NON_KEYBOARD_NON_POINTING: i32 = 1280;
            #[doc = "public static final [PERIPHERAL_POINTING](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#PERIPHERAL_POINTING)"]
            pub const PERIPHERAL_POINTING: i32 = 1408;
            #[doc = "public static final [PHONE_CELLULAR](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#PHONE_CELLULAR)"]
            pub const PHONE_CELLULAR: i32 = 516;
            #[doc = "public static final [PHONE_CORDLESS](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#PHONE_CORDLESS)"]
            pub const PHONE_CORDLESS: i32 = 520;
            #[doc = "public static final [PHONE_ISDN](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#PHONE_ISDN)"]
            pub const PHONE_ISDN: i32 = 532;
            #[doc = "public static final [PHONE_MODEM_OR_GATEWAY](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#PHONE_MODEM_OR_GATEWAY)"]
            pub const PHONE_MODEM_OR_GATEWAY: i32 = 528;
            #[doc = "public static final [PHONE_SMART](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#PHONE_SMART)"]
            pub const PHONE_SMART: i32 = 524;
            #[doc = "public static final [PHONE_UNCATEGORIZED](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#PHONE_UNCATEGORIZED)"]
            pub const PHONE_UNCATEGORIZED: i32 = 512;
            #[doc = "public static final [TOY_CONTROLLER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#TOY_CONTROLLER)"]
            pub const TOY_CONTROLLER: i32 = 2064;
            #[doc = "public static final [TOY_DOLL_ACTION_FIGURE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#TOY_DOLL_ACTION_FIGURE)"]
            pub const TOY_DOLL_ACTION_FIGURE: i32 = 2060;
            #[doc = "public static final [TOY_GAME](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#TOY_GAME)"]
            pub const TOY_GAME: i32 = 2068;
            #[doc = "public static final [TOY_ROBOT](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#TOY_ROBOT)"]
            pub const TOY_ROBOT: i32 = 2052;
            #[doc = "public static final [TOY_UNCATEGORIZED](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#TOY_UNCATEGORIZED)"]
            pub const TOY_UNCATEGORIZED: i32 = 2048;
            #[doc = "public static final [TOY_VEHICLE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#TOY_VEHICLE)"]
            pub const TOY_VEHICLE: i32 = 2056;
            #[doc = "public static final [WEARABLE_GLASSES](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#WEARABLE_GLASSES)"]
            pub const WEARABLE_GLASSES: i32 = 1812;
            #[doc = "public static final [WEARABLE_HELMET](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#WEARABLE_HELMET)"]
            pub const WEARABLE_HELMET: i32 = 1808;
            #[doc = "public static final [WEARABLE_JACKET](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#WEARABLE_JACKET)"]
            pub const WEARABLE_JACKET: i32 = 1804;
            #[doc = "public static final [WEARABLE_PAGER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#WEARABLE_PAGER)"]
            pub const WEARABLE_PAGER: i32 = 1800;
            #[doc = "public static final [WEARABLE_UNCATEGORIZED](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#WEARABLE_UNCATEGORIZED)"]
            pub const WEARABLE_UNCATEGORIZED: i32 = 1792;
            #[doc = "public static final [WEARABLE_WRIST_WATCH](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#WEARABLE_WRIST_WATCH)"]
            pub const WEARABLE_WRIST_WATCH: i32 = 1796;
        }
        #[doc = "class [BluetoothClass.Device.Major](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html)"]
        pub enum BluetoothClass_Device_Major {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothClass_Device_Major {}
        unsafe impl ::java_spaghetti::JniType for BluetoothClass_Device_Major {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothClass$Device$Major")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothClass_Device_Major {}
        impl BluetoothClass_Device_Major {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothClass$Device$Major"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[Major](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#Major())"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [AUDIO_VIDEO](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#AUDIO_VIDEO)"]
            pub const AUDIO_VIDEO: i32 = 1024;
            #[doc = "public static final [COMPUTER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#COMPUTER)"]
            pub const COMPUTER: i32 = 256;
            #[doc = "public static final [HEALTH](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#HEALTH)"]
            pub const HEALTH: i32 = 2304;
            #[doc = "public static final [IMAGING](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#IMAGING)"]
            pub const IMAGING: i32 = 1536;
            #[doc = "public static final [MISC](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#MISC)"]
            pub const MISC: i32 = 0;
            #[doc = "public static final [NETWORKING](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#NETWORKING)"]
            pub const NETWORKING: i32 = 768;
            #[doc = "public static final [PERIPHERAL](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#PERIPHERAL)"]
            pub const PERIPHERAL: i32 = 1280;
            #[doc = "public static final [PHONE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#PHONE)"]
            pub const PHONE: i32 = 512;
            #[doc = "public static final [TOY](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#TOY)"]
            pub const TOY: i32 = 2048;
            #[doc = "public static final [UNCATEGORIZED](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#UNCATEGORIZED)"]
            pub const UNCATEGORIZED: i32 = 7936;
            #[doc = "public static final [WEARABLE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#WEARABLE)"]
            pub const WEARABLE: i32 = 1792;
        }
        #[doc = "final class [BluetoothClass.Service](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html)"]
        pub enum BluetoothClass_Service {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothClass_Service {}
        unsafe impl ::java_spaghetti::JniType for BluetoothClass_Service {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothClass$Service")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothClass_Service {}
        impl BluetoothClass_Service {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothClass$Service"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[Service](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#Service())"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [AUDIO](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#AUDIO)"]
            pub const AUDIO: i32 = 2097152;
            #[doc = "public static final [CAPTURE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#CAPTURE)"]
            pub const CAPTURE: i32 = 524288;
            #[doc = "public static final [INFORMATION](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#INFORMATION)"]
            pub const INFORMATION: i32 = 8388608;
            #[doc = "public static final [LE_AUDIO](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#LE_AUDIO)"]
            pub const LE_AUDIO: i32 = 16384;
            #[doc = "public static final [LIMITED_DISCOVERABILITY](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#LIMITED_DISCOVERABILITY)"]
            pub const LIMITED_DISCOVERABILITY: i32 = 8192;
            #[doc = "public static final [NETWORKING](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#NETWORKING)"]
            pub const NETWORKING: i32 = 131072;
            #[doc = "public static final [OBJECT_TRANSFER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#OBJECT_TRANSFER)"]
            pub const OBJECT_TRANSFER: i32 = 1048576;
            #[doc = "public static final [POSITIONING](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#POSITIONING)"]
            pub const POSITIONING: i32 = 65536;
            #[doc = "public static final [RENDER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#RENDER)"]
            pub const RENDER: i32 = 262144;
            #[doc = "public static final [TELEPHONY](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#TELEPHONY)"]
            pub const TELEPHONY: i32 = 4194304;
        }
        #[doc = "final class [BluetoothCodecConfig](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html)"]
        pub enum BluetoothCodecConfig {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothCodecConfig {}
        unsafe impl ::java_spaghetti::JniType for BluetoothCodecConfig {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothCodecConfig")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothCodecConfig {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothCodecConfig {}
        impl BluetoothCodecConfig {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothCodecConfig"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[equals](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#equals(java.lang.Object))"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[hashCode](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#hashCode())"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"hashCode",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toString](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#toString())"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#describeContents())"]
            pub fn describeContents<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"describeContents",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getCodecType](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#getCodecType())"]
            #[deprecated]
            pub fn getCodecType<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCodecType",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getExtendedCodecType](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#getExtendedCodecType())"]
            pub fn getExtendedCodecType<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecType>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getExtendedCodecType",
                                c"()Landroid/bluetooth/BluetoothCodecType;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isMandatoryCodec](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#isMandatoryCodec())"]
            pub fn isMandatoryCodec<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isMandatoryCodec",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getCodecPriority](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#getCodecPriority())"]
            pub fn getCodecPriority<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCodecPriority",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getSampleRate](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#getSampleRate())"]
            pub fn getSampleRate<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getSampleRate",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getBitsPerSample](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#getBitsPerSample())"]
            pub fn getBitsPerSample<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getBitsPerSample",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getChannelMode](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#getChannelMode())"]
            pub fn getChannelMode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getChannelMode",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getCodecSpecific1](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#getCodecSpecific1())"]
            pub fn getCodecSpecific1<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCodecSpecific1",
                                c"()J",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_long_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getCodecSpecific2](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#getCodecSpecific2())"]
            pub fn getCodecSpecific2<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCodecSpecific2",
                                c"()J",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_long_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getCodecSpecific3](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#getCodecSpecific3())"]
            pub fn getCodecSpecific3<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCodecSpecific3",
                                c"()J",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_long_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getCodecSpecific4](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#getCodecSpecific4())"]
            pub fn getCodecSpecific4<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCodecSpecific4",
                                c"()J",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_long_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [BITS_PER_SAMPLE_16](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#BITS_PER_SAMPLE_16)"]
            pub const BITS_PER_SAMPLE_16: i32 = 1;
            #[doc = "public static final [BITS_PER_SAMPLE_24](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#BITS_PER_SAMPLE_24)"]
            pub const BITS_PER_SAMPLE_24: i32 = 2;
            #[doc = "public static final [BITS_PER_SAMPLE_32](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#BITS_PER_SAMPLE_32)"]
            pub const BITS_PER_SAMPLE_32: i32 = 4;
            #[doc = "public static final [BITS_PER_SAMPLE_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#BITS_PER_SAMPLE_NONE)"]
            pub const BITS_PER_SAMPLE_NONE: i32 = 0;
            #[doc = "public static final [CHANNEL_MODE_MONO](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#CHANNEL_MODE_MONO)"]
            pub const CHANNEL_MODE_MONO: i32 = 1;
            #[doc = "public static final [CHANNEL_MODE_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#CHANNEL_MODE_NONE)"]
            pub const CHANNEL_MODE_NONE: i32 = 0;
            #[doc = "public static final [CHANNEL_MODE_STEREO](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#CHANNEL_MODE_STEREO)"]
            pub const CHANNEL_MODE_STEREO: i32 = 2;
            #[doc = "public static final [CODEC_PRIORITY_DEFAULT](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#CODEC_PRIORITY_DEFAULT)"]
            pub const CODEC_PRIORITY_DEFAULT: i32 = 0;
            #[doc = "public static final [CODEC_PRIORITY_DISABLED](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#CODEC_PRIORITY_DISABLED)"]
            pub const CODEC_PRIORITY_DISABLED: i32 = -1;
            #[doc = "public static final [CODEC_PRIORITY_HIGHEST](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#CODEC_PRIORITY_HIGHEST)"]
            pub const CODEC_PRIORITY_HIGHEST: i32 = 1000000;
            #[doc = "public static final [SAMPLE_RATE_176400](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SAMPLE_RATE_176400)"]
            pub const SAMPLE_RATE_176400: i32 = 16;
            #[doc = "public static final [SAMPLE_RATE_192000](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SAMPLE_RATE_192000)"]
            pub const SAMPLE_RATE_192000: i32 = 32;
            #[doc = "public static final [SAMPLE_RATE_44100](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SAMPLE_RATE_44100)"]
            pub const SAMPLE_RATE_44100: i32 = 1;
            #[doc = "public static final [SAMPLE_RATE_48000](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SAMPLE_RATE_48000)"]
            pub const SAMPLE_RATE_48000: i32 = 2;
            #[doc = "public static final [SAMPLE_RATE_88200](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SAMPLE_RATE_88200)"]
            pub const SAMPLE_RATE_88200: i32 = 4;
            #[doc = "public static final [SAMPLE_RATE_96000](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SAMPLE_RATE_96000)"]
            pub const SAMPLE_RATE_96000: i32 = 8;
            #[doc = "public static final [SAMPLE_RATE_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SAMPLE_RATE_NONE)"]
            pub const SAMPLE_RATE_NONE: i32 = 0;
            #[doc = "public static final [SOURCE_CODEC_TYPE_AAC](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SOURCE_CODEC_TYPE_AAC)"]
            #[deprecated]
            pub const SOURCE_CODEC_TYPE_AAC: i32 = 1;
            #[doc = "public static final [SOURCE_CODEC_TYPE_APTX](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SOURCE_CODEC_TYPE_APTX)"]
            #[deprecated]
            pub const SOURCE_CODEC_TYPE_APTX: i32 = 2;
            #[doc = "public static final [SOURCE_CODEC_TYPE_APTX_HD](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SOURCE_CODEC_TYPE_APTX_HD)"]
            #[deprecated]
            pub const SOURCE_CODEC_TYPE_APTX_HD: i32 = 3;
            #[doc = "public static final [SOURCE_CODEC_TYPE_INVALID](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SOURCE_CODEC_TYPE_INVALID)"]
            #[deprecated]
            pub const SOURCE_CODEC_TYPE_INVALID: i32 = 1000000;
            #[doc = "public static final [SOURCE_CODEC_TYPE_LC3](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SOURCE_CODEC_TYPE_LC3)"]
            #[deprecated]
            pub const SOURCE_CODEC_TYPE_LC3: i32 = 5;
            #[doc = "public static final [SOURCE_CODEC_TYPE_LDAC](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SOURCE_CODEC_TYPE_LDAC)"]
            #[deprecated]
            pub const SOURCE_CODEC_TYPE_LDAC: i32 = 4;
            #[doc = "public static final [SOURCE_CODEC_TYPE_OPUS](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SOURCE_CODEC_TYPE_OPUS)"]
            #[deprecated]
            pub const SOURCE_CODEC_TYPE_OPUS: i32 = 6;
            #[doc = "public static final [SOURCE_CODEC_TYPE_SBC](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SOURCE_CODEC_TYPE_SBC)"]
            #[deprecated]
            pub const SOURCE_CODEC_TYPE_SBC: i32 = 0;
        }
        #[doc = "final class [BluetoothCodecConfig.Builder](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html)"]
        pub enum BluetoothCodecConfig_Builder {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothCodecConfig_Builder {}
        unsafe impl ::java_spaghetti::JniType for BluetoothCodecConfig_Builder {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothCodecConfig$Builder")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothCodecConfig_Builder {}
        impl BluetoothCodecConfig_Builder {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothCodecConfig$Builder"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[Builder](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#Builder())"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setCodecType](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#setCodecType(int))"]
            #[deprecated]
            pub fn setCodecType<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setCodecType",
                                c"(I)Landroid/bluetooth/BluetoothCodecConfig$Builder;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setExtendedCodecType](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#setExtendedCodecType(android.bluetooth.BluetoothCodecType))"]
            pub fn setExtendedCodecType<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothCodecType>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"setExtendedCodecType" , c"(Landroid/bluetooth/BluetoothCodecType;)Landroid/bluetooth/BluetoothCodecConfig$Builder;" ))). as_raw ();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setCodecPriority](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#setCodecPriority(int))"]
            pub fn setCodecPriority<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setCodecPriority",
                                c"(I)Landroid/bluetooth/BluetoothCodecConfig$Builder;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setSampleRate](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#setSampleRate(int))"]
            pub fn setSampleRate<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setSampleRate",
                                c"(I)Landroid/bluetooth/BluetoothCodecConfig$Builder;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setBitsPerSample](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#setBitsPerSample(int))"]
            pub fn setBitsPerSample<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setBitsPerSample",
                                c"(I)Landroid/bluetooth/BluetoothCodecConfig$Builder;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setChannelMode](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#setChannelMode(int))"]
            pub fn setChannelMode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setChannelMode",
                                c"(I)Landroid/bluetooth/BluetoothCodecConfig$Builder;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setCodecSpecific1](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#setCodecSpecific1(long))"]
            pub fn setCodecSpecific1<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i64,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setCodecSpecific1",
                                c"(J)Landroid/bluetooth/BluetoothCodecConfig$Builder;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setCodecSpecific2](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#setCodecSpecific2(long))"]
            pub fn setCodecSpecific2<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i64,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setCodecSpecific2",
                                c"(J)Landroid/bluetooth/BluetoothCodecConfig$Builder;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setCodecSpecific3](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#setCodecSpecific3(long))"]
            pub fn setCodecSpecific3<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i64,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setCodecSpecific3",
                                c"(J)Landroid/bluetooth/BluetoothCodecConfig$Builder;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setCodecSpecific4](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#setCodecSpecific4(long))"]
            pub fn setCodecSpecific4<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i64,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setCodecSpecific4",
                                c"(J)Landroid/bluetooth/BluetoothCodecConfig$Builder;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[build](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#build())"]
            pub fn build<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"build",
                                c"()Landroid/bluetooth/BluetoothCodecConfig;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "final class [BluetoothCodecStatus](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.html)"]
        pub enum BluetoothCodecStatus {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothCodecStatus {}
        unsafe impl ::java_spaghetti::JniType for BluetoothCodecStatus {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothCodecStatus")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothCodecStatus {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothCodecStatus {}
        impl BluetoothCodecStatus {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothCodecStatus"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[equals](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.html#equals(java.lang.Object))"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isCodecConfigSelectable](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.html#isCodecConfigSelectable(android.bluetooth.BluetoothCodecConfig))"]
            pub fn isCodecConfigSelectable<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothCodecConfig>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isCodecConfigSelectable",
                                c"(Landroid/bluetooth/BluetoothCodecConfig;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[hashCode](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.html#hashCode())"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"hashCode",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toString](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.html#toString())"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.html#describeContents())"]
            pub fn describeContents<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"describeContents",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getCodecConfig](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.html#getCodecConfig())"]
            pub fn getCodecConfig<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCodecConfig",
                                c"()Landroid/bluetooth/BluetoothCodecConfig;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getCodecsLocalCapabilities](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.html#getCodecsLocalCapabilities())"]
            pub fn getCodecsLocalCapabilities<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCodecsLocalCapabilities",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getCodecsSelectableCapabilities](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.html#getCodecsSelectableCapabilities())"]
            pub fn getCodecsSelectableCapabilities<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCodecsSelectableCapabilities",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [EXTRA_CODEC_STATUS](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.html#EXTRA_CODEC_STATUS)"]
            pub const EXTRA_CODEC_STATUS: &'static str = "android.bluetooth.extra.CODEC_STATUS";
        }
        #[doc = "final class [BluetoothCodecStatus.Builder](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.Builder.html)"]
        pub enum BluetoothCodecStatus_Builder {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothCodecStatus_Builder {}
        unsafe impl ::java_spaghetti::JniType for BluetoothCodecStatus_Builder {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothCodecStatus$Builder")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothCodecStatus_Builder {}
        impl BluetoothCodecStatus_Builder {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothCodecStatus$Builder"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[Builder](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.Builder.html#Builder())"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setCodecConfig](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.Builder.html#setCodecConfig(android.bluetooth.BluetoothCodecConfig))"]
            pub fn setCodecConfig<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothCodecConfig>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecStatus_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"setCodecConfig" , c"(Landroid/bluetooth/BluetoothCodecConfig;)Landroid/bluetooth/BluetoothCodecStatus$Builder;" ))). as_raw ();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setCodecsLocalCapabilities](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.Builder.html#setCodecsLocalCapabilities(java.util.List))"]
            pub fn setCodecsLocalCapabilities<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecStatus_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setCodecsLocalCapabilities",
                                c"(Ljava/util/List;)Landroid/bluetooth/BluetoothCodecStatus$Builder;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setCodecsSelectableCapabilities](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.Builder.html#setCodecsSelectableCapabilities(java.util.List))"]
            pub fn setCodecsSelectableCapabilities<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecStatus_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setCodecsSelectableCapabilities",
                                c"(Ljava/util/List;)Landroid/bluetooth/BluetoothCodecStatus$Builder;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[build](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.Builder.html#build())"]
            pub fn build<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecStatus>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"build",
                                c"()Landroid/bluetooth/BluetoothCodecStatus;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "final class [BluetoothCodecType](https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html)"]
        pub enum BluetoothCodecType {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothCodecType {}
        unsafe impl ::java_spaghetti::JniType for BluetoothCodecType {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothCodecType")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothCodecType {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothCodecType {}
        impl BluetoothCodecType {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothCodecType"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[isMandatoryCodec](https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#isMandatoryCodec())"]
            pub fn isMandatoryCodec<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isMandatoryCodec",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getCodecId](https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#getCodecId())"]
            pub fn getCodecId<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCodecId",
                                c"()J",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_long_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getCodecName](https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#getCodecName())"]
            pub fn getCodecName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCodecName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toString](https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#toString())"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[hashCode](https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#hashCode())"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"hashCode",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[equals](https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#equals(java.lang.Object))"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#describeContents())"]
            pub fn describeContents<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"describeContents",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [CODEC_ID_AAC](https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#CODEC_ID_AAC)"]
            pub const CODEC_ID_AAC: i64 = 2;
            #[doc = "public static final [CODEC_ID_APTX](https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#CODEC_ID_APTX)"]
            pub const CODEC_ID_APTX: i64 = 16797695;
            #[doc = "public static final [CODEC_ID_APTX_HD](https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#CODEC_ID_APTX_HD)"]
            pub const CODEC_ID_APTX_HD: i64 = 604035071;
            #[doc = "public static final [CODEC_ID_LDAC](https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#CODEC_ID_LDAC)"]
            pub const CODEC_ID_LDAC: i64 = -1442763265;
            #[doc = "public static final [CODEC_ID_OPUS](https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#CODEC_ID_OPUS)"]
            pub const CODEC_ID_OPUS: i64 = 16834815;
            #[doc = "public static final [CODEC_ID_SBC](https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#CODEC_ID_SBC)"]
            pub const CODEC_ID_SBC: i64 = 0;
        }
        #[doc = "final class [BluetoothCsipSetCoordinator](https://developer.android.com/reference/android/bluetooth/BluetoothCsipSetCoordinator.html)"]
        pub enum BluetoothCsipSetCoordinator {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothCsipSetCoordinator {}
        unsafe impl ::java_spaghetti::JniType for BluetoothCsipSetCoordinator {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothCsipSetCoordinator")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<BluetoothProfile> for BluetoothCsipSetCoordinator {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothCsipSetCoordinator {}
        impl BluetoothCsipSetCoordinator {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothCsipSetCoordinator"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[close](https://developer.android.com/reference/android/bluetooth/BluetoothCsipSetCoordinator.html#close())"]
            pub fn close<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"close",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothCsipSetCoordinator.html#getConnectedDevices())"]
            pub fn getConnectedDevices<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectedDevices",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothCsipSetCoordinator.html#getDevicesMatchingConnectionStates(int[]))"]
            pub fn getDevicesMatchingConnectionStates<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDevicesMatchingConnectionStates",
                                c"([I)Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothCsipSetCoordinator.html#getConnectionState(android.bluetooth.BluetoothDevice))"]
            pub fn getConnectionState<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectionState",
                                c"(Landroid/bluetooth/BluetoothDevice;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [ACTION_CSIS_CONNECTION_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothCsipSetCoordinator.html#ACTION_CSIS_CONNECTION_STATE_CHANGED)"]
            pub const ACTION_CSIS_CONNECTION_STATE_CHANGED: &'static str =
                "android.bluetooth.action.CSIS_CONNECTION_STATE_CHANGED";
        }
        #[doc = "final class [BluetoothDevice](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html)"]
        pub enum BluetoothDevice {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothDevice {}
        unsafe impl ::java_spaghetti::JniType for BluetoothDevice {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothDevice")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothDevice {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothDevice {}
        impl BluetoothDevice {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothDevice"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[equals](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#equals(java.lang.Object))"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[hashCode](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#hashCode())"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"hashCode",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toString](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#toString())"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#describeContents())"]
            pub fn describeContents<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"describeContents",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getAddress](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getAddress())"]
            pub fn getAddress<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getAddress",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getAddressType](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getAddressType())"]
            pub fn getAddressType<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getAddressType",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getName](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getName())"]
            pub fn getName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getType](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getType())"]
            pub fn getType<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getType",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getAlias](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getAlias())"]
            pub fn getAlias<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getAlias",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setAlias](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#setAlias(java.lang.String))"]
            pub fn setAlias<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setAlias",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createBond](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createBond())"]
            pub fn createBond<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createBond",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getBondState](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getBondState())"]
            pub fn getBondState<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getBondState",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getBluetoothClass](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getBluetoothClass())"]
            pub fn getBluetoothClass<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothClass>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getBluetoothClass",
                                c"()Landroid/bluetooth/BluetoothClass;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getUuids](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getUuids())"]
            pub fn getUuids<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::os::ParcelUuid, super::super::java::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getUuids",
                                c"()[Landroid/os/ParcelUuid;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[fetchUuidsWithSdp](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#fetchUuidsWithSdp())"]
            pub fn fetchUuidsWithSdp<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"fetchUuidsWithSdp",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setPin](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#setPin(byte[]))"]
            pub fn setPin<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setPin",
                                c"([B)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setPairingConfirmation](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#setPairingConfirmation(boolean))"]
            pub fn setPairingConfirmation<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setPairingConfirmation",
                                c"(Z)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createRfcommSocketToServiceRecord](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createRfcommSocketToServiceRecord(java.util.UUID))"]
            pub fn createRfcommSocketToServiceRecord<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothSocket>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createRfcommSocketToServiceRecord",
                                c"(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createInsecureRfcommSocketToServiceRecord](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createInsecureRfcommSocketToServiceRecord(java.util.UUID))"]
            pub fn createInsecureRfcommSocketToServiceRecord<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothSocket>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createInsecureRfcommSocketToServiceRecord",
                                c"(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[connectGatt](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#connectGatt(android.content.Context,%20boolean,%20android.bluetooth.BluetoothGattCallback))"]
            pub fn connectGatt_Context_boolean_BluetoothGattCallback<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::content::Context>,
                arg1: bool,
                arg2: impl ::java_spaghetti::AsArg<BluetoothGattCallback>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothGatt>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"connectGatt" , c"(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;)Landroid/bluetooth/BluetoothGatt;" ))). as_raw ();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[connectGatt](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#connectGatt(android.content.Context,%20boolean,%20android.bluetooth.BluetoothGattCallback,%20int))"]
            pub fn connectGatt_Context_boolean_BluetoothGattCallback_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::content::Context>,
                arg1: bool,
                arg2: impl ::java_spaghetti::AsArg<BluetoothGattCallback>,
                arg3: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothGatt>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"connectGatt" , c"(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;I)Landroid/bluetooth/BluetoothGatt;" ))). as_raw ();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[connectGatt](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#connectGatt(android.content.Context,%20boolean,%20android.bluetooth.BluetoothGattCallback,%20int,%20int))"]
            pub fn connectGatt_Context_boolean_BluetoothGattCallback_int_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::content::Context>,
                arg1: bool,
                arg2: impl ::java_spaghetti::AsArg<BluetoothGattCallback>,
                arg3: i32,
                arg4: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothGatt>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"connectGatt" , c"(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;II)Landroid/bluetooth/BluetoothGatt;" ))). as_raw ();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createL2capChannel](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createL2capChannel(int))"]
            pub fn createL2capChannel<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothSocket>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createL2capChannel",
                                c"(I)Landroid/bluetooth/BluetoothSocket;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createInsecureL2capChannel](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createInsecureL2capChannel(int))"]
            pub fn createInsecureL2capChannel<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothSocket>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createInsecureL2capChannel",
                                c"(I)Landroid/bluetooth/BluetoothSocket;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [ACTION_ACL_CONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_ACL_CONNECTED)"]
            pub const ACTION_ACL_CONNECTED: &'static str = "android.bluetooth.device.action.ACL_CONNECTED";
            #[doc = "public static final [ACTION_ACL_DISCONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_ACL_DISCONNECTED)"]
            pub const ACTION_ACL_DISCONNECTED: &'static str = "android.bluetooth.device.action.ACL_DISCONNECTED";
            #[doc = "public static final [ACTION_ACL_DISCONNECT_REQUESTED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_ACL_DISCONNECT_REQUESTED)"]
            pub const ACTION_ACL_DISCONNECT_REQUESTED: &'static str =
                "android.bluetooth.device.action.ACL_DISCONNECT_REQUESTED";
            #[doc = "public static final [ACTION_ALIAS_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_ALIAS_CHANGED)"]
            pub const ACTION_ALIAS_CHANGED: &'static str = "android.bluetooth.device.action.ALIAS_CHANGED";
            #[doc = "public static final [ACTION_BOND_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_BOND_STATE_CHANGED)"]
            pub const ACTION_BOND_STATE_CHANGED: &'static str = "android.bluetooth.device.action.BOND_STATE_CHANGED";
            #[doc = "public static final [ACTION_CLASS_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_CLASS_CHANGED)"]
            pub const ACTION_CLASS_CHANGED: &'static str = "android.bluetooth.device.action.CLASS_CHANGED";
            #[doc = "public static final [ACTION_FOUND](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_FOUND)"]
            pub const ACTION_FOUND: &'static str = "android.bluetooth.device.action.FOUND";
            #[doc = "public static final [ACTION_NAME_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_NAME_CHANGED)"]
            pub const ACTION_NAME_CHANGED: &'static str = "android.bluetooth.device.action.NAME_CHANGED";
            #[doc = "public static final [ACTION_PAIRING_REQUEST](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_PAIRING_REQUEST)"]
            pub const ACTION_PAIRING_REQUEST: &'static str = "android.bluetooth.device.action.PAIRING_REQUEST";
            #[doc = "public static final [ACTION_UUID](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_UUID)"]
            pub const ACTION_UUID: &'static str = "android.bluetooth.device.action.UUID";
            #[doc = "public static final [ADDRESS_TYPE_ANONYMOUS](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ADDRESS_TYPE_ANONYMOUS)"]
            pub const ADDRESS_TYPE_ANONYMOUS: i32 = 255;
            #[doc = "public static final [ADDRESS_TYPE_PUBLIC](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ADDRESS_TYPE_PUBLIC)"]
            pub const ADDRESS_TYPE_PUBLIC: i32 = 0;
            #[doc = "public static final [ADDRESS_TYPE_RANDOM](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ADDRESS_TYPE_RANDOM)"]
            pub const ADDRESS_TYPE_RANDOM: i32 = 1;
            #[doc = "public static final [ADDRESS_TYPE_UNKNOWN](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ADDRESS_TYPE_UNKNOWN)"]
            pub const ADDRESS_TYPE_UNKNOWN: i32 = 65535;
            #[doc = "public static final [BOND_BONDED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#BOND_BONDED)"]
            pub const BOND_BONDED: i32 = 12;
            #[doc = "public static final [BOND_BONDING](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#BOND_BONDING)"]
            pub const BOND_BONDING: i32 = 11;
            #[doc = "public static final [BOND_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#BOND_NONE)"]
            pub const BOND_NONE: i32 = 10;
            #[doc = "public static final [DEVICE_TYPE_CLASSIC](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#DEVICE_TYPE_CLASSIC)"]
            pub const DEVICE_TYPE_CLASSIC: i32 = 1;
            #[doc = "public static final [DEVICE_TYPE_DUAL](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#DEVICE_TYPE_DUAL)"]
            pub const DEVICE_TYPE_DUAL: i32 = 3;
            #[doc = "public static final [DEVICE_TYPE_LE](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#DEVICE_TYPE_LE)"]
            pub const DEVICE_TYPE_LE: i32 = 2;
            #[doc = "public static final [DEVICE_TYPE_UNKNOWN](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#DEVICE_TYPE_UNKNOWN)"]
            pub const DEVICE_TYPE_UNKNOWN: i32 = 0;
            #[doc = "public static final [ERROR](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ERROR)"]
            pub const ERROR: i32 = -2147483648;
            #[doc = "public static final [EXTRA_BOND_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_BOND_STATE)"]
            pub const EXTRA_BOND_STATE: &'static str = "android.bluetooth.device.extra.BOND_STATE";
            #[doc = "public static final [EXTRA_CLASS](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_CLASS)"]
            pub const EXTRA_CLASS: &'static str = "android.bluetooth.device.extra.CLASS";
            #[doc = "public static final [EXTRA_DEVICE](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_DEVICE)"]
            pub const EXTRA_DEVICE: &'static str = "android.bluetooth.device.extra.DEVICE";
            #[doc = "public static final [EXTRA_IS_COORDINATED_SET_MEMBER](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_IS_COORDINATED_SET_MEMBER)"]
            pub const EXTRA_IS_COORDINATED_SET_MEMBER: &'static str =
                "android.bluetooth.extra.IS_COORDINATED_SET_MEMBER";
            #[doc = "public static final [EXTRA_NAME](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_NAME)"]
            pub const EXTRA_NAME: &'static str = "android.bluetooth.device.extra.NAME";
            #[doc = "public static final [EXTRA_PAIRING_KEY](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_PAIRING_KEY)"]
            pub const EXTRA_PAIRING_KEY: &'static str = "android.bluetooth.device.extra.PAIRING_KEY";
            #[doc = "public static final [EXTRA_PAIRING_VARIANT](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_PAIRING_VARIANT)"]
            pub const EXTRA_PAIRING_VARIANT: &'static str = "android.bluetooth.device.extra.PAIRING_VARIANT";
            #[doc = "public static final [EXTRA_PREVIOUS_BOND_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_PREVIOUS_BOND_STATE)"]
            pub const EXTRA_PREVIOUS_BOND_STATE: &'static str = "android.bluetooth.device.extra.PREVIOUS_BOND_STATE";
            #[doc = "public static final [EXTRA_RSSI](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_RSSI)"]
            pub const EXTRA_RSSI: &'static str = "android.bluetooth.device.extra.RSSI";
            #[doc = "public static final [EXTRA_TRANSPORT](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_TRANSPORT)"]
            pub const EXTRA_TRANSPORT: &'static str = "android.bluetooth.device.extra.TRANSPORT";
            #[doc = "public static final [EXTRA_UUID](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_UUID)"]
            pub const EXTRA_UUID: &'static str = "android.bluetooth.device.extra.UUID";
            #[doc = "public static final [PAIRING_VARIANT_PASSKEY_CONFIRMATION](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PAIRING_VARIANT_PASSKEY_CONFIRMATION)"]
            pub const PAIRING_VARIANT_PASSKEY_CONFIRMATION: i32 = 2;
            #[doc = "public static final [PAIRING_VARIANT_PIN](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PAIRING_VARIANT_PIN)"]
            pub const PAIRING_VARIANT_PIN: i32 = 0;
            #[doc = "public static final [PHY_LE_1M](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_1M)"]
            pub const PHY_LE_1M: i32 = 1;
            #[doc = "public static final [PHY_LE_1M_MASK](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_1M_MASK)"]
            pub const PHY_LE_1M_MASK: i32 = 1;
            #[doc = "public static final [PHY_LE_2M](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_2M)"]
            pub const PHY_LE_2M: i32 = 2;
            #[doc = "public static final [PHY_LE_2M_MASK](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_2M_MASK)"]
            pub const PHY_LE_2M_MASK: i32 = 2;
            #[doc = "public static final [PHY_LE_CODED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_CODED)"]
            pub const PHY_LE_CODED: i32 = 3;
            #[doc = "public static final [PHY_LE_CODED_MASK](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_CODED_MASK)"]
            pub const PHY_LE_CODED_MASK: i32 = 4;
            #[doc = "public static final [PHY_OPTION_NO_PREFERRED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_OPTION_NO_PREFERRED)"]
            pub const PHY_OPTION_NO_PREFERRED: i32 = 0;
            #[doc = "public static final [PHY_OPTION_S2](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_OPTION_S2)"]
            pub const PHY_OPTION_S2: i32 = 1;
            #[doc = "public static final [PHY_OPTION_S8](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_OPTION_S8)"]
            pub const PHY_OPTION_S8: i32 = 2;
            #[doc = "public static final [TRANSPORT_AUTO](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#TRANSPORT_AUTO)"]
            pub const TRANSPORT_AUTO: i32 = 0;
            #[doc = "public static final [TRANSPORT_BREDR](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#TRANSPORT_BREDR)"]
            pub const TRANSPORT_BREDR: i32 = 1;
            #[doc = "public static final [TRANSPORT_LE](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#TRANSPORT_LE)"]
            pub const TRANSPORT_LE: i32 = 2;
        }
        #[doc = "final class [BluetoothGatt](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html)"]
        pub enum BluetoothGatt {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothGatt {}
        unsafe impl ::java_spaghetti::JniType for BluetoothGatt {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothGatt")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<BluetoothProfile> for BluetoothGatt {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothGatt {}
        impl BluetoothGatt {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothGatt"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[close](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#close())"]
            pub fn close<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"close",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[disconnect](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#disconnect())"]
            pub fn disconnect<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"disconnect",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[connect](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#connect())"]
            pub fn connect<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"connect",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setPreferredPhy](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#setPreferredPhy(int,%20int,%20int))"]
            pub fn setPreferredPhy<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setPreferredPhy",
                                c"(III)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[readPhy](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#readPhy())"]
            pub fn readPhy<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"readPhy",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDevice](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#getDevice())"]
            pub fn getDevice<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothDevice>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDevice",
                                c"()Landroid/bluetooth/BluetoothDevice;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[discoverServices](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#discoverServices())"]
            pub fn discoverServices<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"discoverServices",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getServices](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#getServices())"]
            pub fn getServices<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getServices",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getService](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#getService(java.util.UUID))"]
            pub fn getService<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothGattService>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getService",
                                c"(Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattService;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[readCharacteristic](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#readCharacteristic(android.bluetooth.BluetoothGattCharacteristic))"]
            pub fn readCharacteristic<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"readCharacteristic",
                                c"(Landroid/bluetooth/BluetoothGattCharacteristic;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[writeCharacteristic](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic))"]
            #[deprecated]
            pub fn writeCharacteristic_BluetoothGattCharacteristic<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"writeCharacteristic",
                                c"(Landroid/bluetooth/BluetoothGattCharacteristic;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[writeCharacteristic](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic,%20byte[],%20int))"]
            pub fn writeCharacteristic_BluetoothGattCharacteristic_byte_array_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg2: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"writeCharacteristic",
                                c"(Landroid/bluetooth/BluetoothGattCharacteristic;[BI)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[readDescriptor](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#readDescriptor(android.bluetooth.BluetoothGattDescriptor))"]
            pub fn readDescriptor<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattDescriptor>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"readDescriptor",
                                c"(Landroid/bluetooth/BluetoothGattDescriptor;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[writeDescriptor](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#writeDescriptor(android.bluetooth.BluetoothGattDescriptor))"]
            #[deprecated]
            pub fn writeDescriptor_BluetoothGattDescriptor<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattDescriptor>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"writeDescriptor",
                                c"(Landroid/bluetooth/BluetoothGattDescriptor;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[writeDescriptor](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#writeDescriptor(android.bluetooth.BluetoothGattDescriptor,%20byte[]))"]
            pub fn writeDescriptor_BluetoothGattDescriptor_byte_array<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattDescriptor>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"writeDescriptor",
                                c"(Landroid/bluetooth/BluetoothGattDescriptor;[B)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[beginReliableWrite](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#beginReliableWrite())"]
            pub fn beginReliableWrite<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"beginReliableWrite",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[executeReliableWrite](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#executeReliableWrite())"]
            pub fn executeReliableWrite<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"executeReliableWrite",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[abortReliableWrite](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#abortReliableWrite())"]
            pub fn abortReliableWrite<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"abortReliableWrite",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[abortReliableWrite](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#abortReliableWrite(android.bluetooth.BluetoothDevice))"]
            #[deprecated]
            pub fn abortReliableWrite_BluetoothDevice<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"abortReliableWrite",
                                c"(Landroid/bluetooth/BluetoothDevice;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setCharacteristicNotification](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic,%20boolean))"]
            pub fn setCharacteristicNotification<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
                arg1: bool,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setCharacteristicNotification",
                                c"(Landroid/bluetooth/BluetoothGattCharacteristic;Z)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[readRemoteRssi](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#readRemoteRssi())"]
            pub fn readRemoteRssi<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"readRemoteRssi",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[requestMtu](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#requestMtu(int))"]
            pub fn requestMtu<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"requestMtu",
                                c"(I)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[requestConnectionPriority](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#requestConnectionPriority(int))"]
            pub fn requestConnectionPriority<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"requestConnectionPriority",
                                c"(I)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#getConnectionState(android.bluetooth.BluetoothDevice))"]
            #[deprecated]
            pub fn getConnectionState<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectionState",
                                c"(Landroid/bluetooth/BluetoothDevice;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#getConnectedDevices())"]
            #[deprecated]
            pub fn getConnectedDevices<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectedDevices",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#getDevicesMatchingConnectionStates(int[]))"]
            #[deprecated]
            pub fn getDevicesMatchingConnectionStates<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDevicesMatchingConnectionStates",
                                c"([I)Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [CONNECTION_PRIORITY_BALANCED](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#CONNECTION_PRIORITY_BALANCED)"]
            pub const CONNECTION_PRIORITY_BALANCED: i32 = 0;
            #[doc = "public static final [CONNECTION_PRIORITY_DCK](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#CONNECTION_PRIORITY_DCK)"]
            pub const CONNECTION_PRIORITY_DCK: i32 = 3;
            #[doc = "public static final [CONNECTION_PRIORITY_HIGH](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#CONNECTION_PRIORITY_HIGH)"]
            pub const CONNECTION_PRIORITY_HIGH: i32 = 1;
            #[doc = "public static final [CONNECTION_PRIORITY_LOW_POWER](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#CONNECTION_PRIORITY_LOW_POWER)"]
            pub const CONNECTION_PRIORITY_LOW_POWER: i32 = 2;
            #[doc = "public static final [GATT_CONNECTION_CONGESTED](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_CONNECTION_CONGESTED)"]
            pub const GATT_CONNECTION_CONGESTED: i32 = 143;
            #[doc = "public static final [GATT_CONNECTION_TIMEOUT](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_CONNECTION_TIMEOUT)"]
            pub const GATT_CONNECTION_TIMEOUT: i32 = 147;
            #[doc = "public static final [GATT_FAILURE](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_FAILURE)"]
            pub const GATT_FAILURE: i32 = 257;
            #[doc = "public static final [GATT_INSUFFICIENT_AUTHENTICATION](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_INSUFFICIENT_AUTHENTICATION)"]
            pub const GATT_INSUFFICIENT_AUTHENTICATION: i32 = 5;
            #[doc = "public static final [GATT_INSUFFICIENT_AUTHORIZATION](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_INSUFFICIENT_AUTHORIZATION)"]
            pub const GATT_INSUFFICIENT_AUTHORIZATION: i32 = 8;
            #[doc = "public static final [GATT_INSUFFICIENT_ENCRYPTION](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_INSUFFICIENT_ENCRYPTION)"]
            pub const GATT_INSUFFICIENT_ENCRYPTION: i32 = 15;
            #[doc = "public static final [GATT_INVALID_ATTRIBUTE_LENGTH](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_INVALID_ATTRIBUTE_LENGTH)"]
            pub const GATT_INVALID_ATTRIBUTE_LENGTH: i32 = 13;
            #[doc = "public static final [GATT_INVALID_OFFSET](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_INVALID_OFFSET)"]
            pub const GATT_INVALID_OFFSET: i32 = 7;
            #[doc = "public static final [GATT_READ_NOT_PERMITTED](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_READ_NOT_PERMITTED)"]
            pub const GATT_READ_NOT_PERMITTED: i32 = 2;
            #[doc = "public static final [GATT_REQUEST_NOT_SUPPORTED](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_REQUEST_NOT_SUPPORTED)"]
            pub const GATT_REQUEST_NOT_SUPPORTED: i32 = 6;
            #[doc = "public static final [GATT_SUCCESS](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_SUCCESS)"]
            pub const GATT_SUCCESS: i32 = 0;
            #[doc = "public static final [GATT_WRITE_NOT_PERMITTED](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_WRITE_NOT_PERMITTED)"]
            pub const GATT_WRITE_NOT_PERMITTED: i32 = 3;
        }
        #[doc = "class [BluetoothGattCallback](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html)"]
        pub enum BluetoothGattCallback {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothGattCallback {}
        unsafe impl ::java_spaghetti::JniType for BluetoothGattCallback {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothGattCallback")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothGattCallback {}
        impl BluetoothGattCallback {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothGattCallback"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[BluetoothGattCallback](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#BluetoothGattCallback())"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onPhyUpdate](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onPhyUpdate(android.bluetooth.BluetoothGatt,%20int,%20int,%20int))"]
            pub fn onPhyUpdate<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: i32,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onPhyUpdate",
                                c"(Landroid/bluetooth/BluetoothGatt;III)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onPhyRead](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onPhyRead(android.bluetooth.BluetoothGatt,%20int,%20int,%20int))"]
            pub fn onPhyRead<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: i32,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onPhyRead",
                                c"(Landroid/bluetooth/BluetoothGatt;III)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onConnectionStateChange](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onConnectionStateChange(android.bluetooth.BluetoothGatt,%20int,%20int))"]
            pub fn onConnectionStateChange<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onConnectionStateChange",
                                c"(Landroid/bluetooth/BluetoothGatt;II)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onServicesDiscovered](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onServicesDiscovered(android.bluetooth.BluetoothGatt,%20int))"]
            pub fn onServicesDiscovered<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onServicesDiscovered",
                                c"(Landroid/bluetooth/BluetoothGatt;I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onCharacteristicRead](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onCharacteristicRead(android.bluetooth.BluetoothGatt,%20android.bluetooth.BluetoothGattCharacteristic,%20int))"]
            #[deprecated]
            pub fn onCharacteristicRead_BluetoothGatt_BluetoothGattCharacteristic_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onCharacteristicRead",
                                c"(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onCharacteristicRead](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onCharacteristicRead(android.bluetooth.BluetoothGatt,%20android.bluetooth.BluetoothGattCharacteristic,%20byte[],%20int))"]
            pub fn onCharacteristicRead_BluetoothGatt_BluetoothGattCharacteristic_byte_array_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
                arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg3: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"onCharacteristicRead" , c"(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;[BI)V" ))). as_raw ();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onCharacteristicWrite](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onCharacteristicWrite(android.bluetooth.BluetoothGatt,%20android.bluetooth.BluetoothGattCharacteristic,%20int))"]
            pub fn onCharacteristicWrite<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onCharacteristicWrite",
                                c"(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onCharacteristicChanged](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onCharacteristicChanged(android.bluetooth.BluetoothGatt,%20android.bluetooth.BluetoothGattCharacteristic))"]
            #[deprecated]
            pub fn onCharacteristicChanged_BluetoothGatt_BluetoothGattCharacteristic<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onCharacteristicChanged",
                                c"(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onCharacteristicChanged](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onCharacteristicChanged(android.bluetooth.BluetoothGatt,%20android.bluetooth.BluetoothGattCharacteristic,%20byte[]))"]
            pub fn onCharacteristicChanged_BluetoothGatt_BluetoothGattCharacteristic_byte_array<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
                arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"onCharacteristicChanged" , c"(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;[B)V" ))). as_raw ();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onDescriptorRead](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onDescriptorRead(android.bluetooth.BluetoothGatt,%20android.bluetooth.BluetoothGattDescriptor,%20int))"]
            #[deprecated]
            pub fn onDescriptorRead_BluetoothGatt_BluetoothGattDescriptor_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattDescriptor>,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onDescriptorRead",
                                c"(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattDescriptor;I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onDescriptorRead](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onDescriptorRead(android.bluetooth.BluetoothGatt,%20android.bluetooth.BluetoothGattDescriptor,%20int,%20byte[]))"]
            pub fn onDescriptorRead_BluetoothGatt_BluetoothGattDescriptor_int_byte_array<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattDescriptor>,
                arg2: i32,
                arg3: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onDescriptorRead",
                                c"(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattDescriptor;I[B)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onDescriptorWrite](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onDescriptorWrite(android.bluetooth.BluetoothGatt,%20android.bluetooth.BluetoothGattDescriptor,%20int))"]
            pub fn onDescriptorWrite<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattDescriptor>,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onDescriptorWrite",
                                c"(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattDescriptor;I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onReliableWriteCompleted](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onReliableWriteCompleted(android.bluetooth.BluetoothGatt,%20int))"]
            pub fn onReliableWriteCompleted<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onReliableWriteCompleted",
                                c"(Landroid/bluetooth/BluetoothGatt;I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onReadRemoteRssi](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onReadRemoteRssi(android.bluetooth.BluetoothGatt,%20int,%20int))"]
            pub fn onReadRemoteRssi<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onReadRemoteRssi",
                                c"(Landroid/bluetooth/BluetoothGatt;II)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onMtuChanged](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onMtuChanged(android.bluetooth.BluetoothGatt,%20int,%20int))"]
            pub fn onMtuChanged<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onMtuChanged",
                                c"(Landroid/bluetooth/BluetoothGatt;II)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onServiceChanged](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onServiceChanged(android.bluetooth.BluetoothGatt))"]
            pub fn onServiceChanged<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onServiceChanged",
                                c"(Landroid/bluetooth/BluetoothGatt;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[unsafe(no_mangle)]
        extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_BluetoothGattCallback_native_1onPhyUpdate__JLandroid_bluetooth_BluetoothGatt_2III<
            'env,
        >(
            __jni_env: ::java_spaghetti::Env<'env>,
            _class: *mut (),
            ptr: i64,
            arg0: ::java_spaghetti::Arg<BluetoothGatt>,
            arg1: i32,
            arg2: i32,
            arg3: i32,
        ) -> () {
            let ptr: *const std::sync::Arc<dyn BluetoothGattCallbackProxy> =
                ::std::ptr::with_exposed_provenance(ptr as usize);
            unsafe { (*ptr).onPhyUpdate(__jni_env, arg0.into_ref(__jni_env), arg1, arg2, arg3) }
        }
        #[unsafe(no_mangle)]
        extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_BluetoothGattCallback_native_1onPhyRead__JLandroid_bluetooth_BluetoothGatt_2III<
            'env,
        >(
            __jni_env: ::java_spaghetti::Env<'env>,
            _class: *mut (),
            ptr: i64,
            arg0: ::java_spaghetti::Arg<BluetoothGatt>,
            arg1: i32,
            arg2: i32,
            arg3: i32,
        ) -> () {
            let ptr: *const std::sync::Arc<dyn BluetoothGattCallbackProxy> =
                ::std::ptr::with_exposed_provenance(ptr as usize);
            unsafe { (*ptr).onPhyRead(__jni_env, arg0.into_ref(__jni_env), arg1, arg2, arg3) }
        }
        #[unsafe(no_mangle)]
        extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_BluetoothGattCallback_native_1onConnectionStateChange__JLandroid_bluetooth_BluetoothGatt_2II<
            'env,
        >(
            __jni_env: ::java_spaghetti::Env<'env>,
            _class: *mut (),
            ptr: i64,
            arg0: ::java_spaghetti::Arg<BluetoothGatt>,
            arg1: i32,
            arg2: i32,
        ) -> () {
            let ptr: *const std::sync::Arc<dyn BluetoothGattCallbackProxy> =
                ::std::ptr::with_exposed_provenance(ptr as usize);
            unsafe { (*ptr).onConnectionStateChange(__jni_env, arg0.into_ref(__jni_env), arg1, arg2) }
        }
        #[unsafe(no_mangle)]
        extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_BluetoothGattCallback_native_1onServicesDiscovered__JLandroid_bluetooth_BluetoothGatt_2I<
            'env,
        >(
            __jni_env: ::java_spaghetti::Env<'env>,
            _class: *mut (),
            ptr: i64,
            arg0: ::java_spaghetti::Arg<BluetoothGatt>,
            arg1: i32,
        ) -> () {
            let ptr: *const std::sync::Arc<dyn BluetoothGattCallbackProxy> =
                ::std::ptr::with_exposed_provenance(ptr as usize);
            unsafe { (*ptr).onServicesDiscovered(__jni_env, arg0.into_ref(__jni_env), arg1) }
        }
        #[unsafe(no_mangle)]
        extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_BluetoothGattCallback_native_1onCharacteristicRead__JLandroid_bluetooth_BluetoothGatt_2Landroid_bluetooth_BluetoothGattCharacteristic_2I<
            'env,
        >(
            __jni_env: ::java_spaghetti::Env<'env>,
            _class: *mut (),
            ptr: i64,
            arg0: ::java_spaghetti::Arg<BluetoothGatt>,
            arg1: ::java_spaghetti::Arg<BluetoothGattCharacteristic>,
            arg2: i32,
        ) -> () {
            let ptr: *const std::sync::Arc<dyn BluetoothGattCallbackProxy> =
                ::std::ptr::with_exposed_provenance(ptr as usize);
            unsafe {
                (*ptr).onCharacteristicRead_BluetoothGatt_BluetoothGattCharacteristic_int(
                    __jni_env,
                    arg0.into_ref(__jni_env),
                    arg1.into_ref(__jni_env),
                    arg2,
                )
            }
        }
        #[unsafe(no_mangle)]
        extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_BluetoothGattCallback_native_1onCharacteristicRead__JLandroid_bluetooth_BluetoothGatt_2Landroid_bluetooth_BluetoothGattCharacteristic_2_3BI<
            'env,
        >(
            __jni_env: ::java_spaghetti::Env<'env>,
            _class: *mut (),
            ptr: i64,
            arg0: ::java_spaghetti::Arg<BluetoothGatt>,
            arg1: ::java_spaghetti::Arg<BluetoothGattCharacteristic>,
            arg2: ::java_spaghetti::Arg<::java_spaghetti::ByteArray>,
            arg3: i32,
        ) -> () {
            let ptr: *const std::sync::Arc<dyn BluetoothGattCallbackProxy> =
                ::std::ptr::with_exposed_provenance(ptr as usize);
            unsafe {
                (*ptr).onCharacteristicRead_BluetoothGatt_BluetoothGattCharacteristic_byte_array_int(
                    __jni_env,
                    arg0.into_ref(__jni_env),
                    arg1.into_ref(__jni_env),
                    arg2.into_ref(__jni_env),
                    arg3,
                )
            }
        }
        #[unsafe(no_mangle)]
        extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_BluetoothGattCallback_native_1onCharacteristicWrite__JLandroid_bluetooth_BluetoothGatt_2Landroid_bluetooth_BluetoothGattCharacteristic_2I<
            'env,
        >(
            __jni_env: ::java_spaghetti::Env<'env>,
            _class: *mut (),
            ptr: i64,
            arg0: ::java_spaghetti::Arg<BluetoothGatt>,
            arg1: ::java_spaghetti::Arg<BluetoothGattCharacteristic>,
            arg2: i32,
        ) -> () {
            let ptr: *const std::sync::Arc<dyn BluetoothGattCallbackProxy> =
                ::std::ptr::with_exposed_provenance(ptr as usize);
            unsafe { (*ptr).onCharacteristicWrite(__jni_env, arg0.into_ref(__jni_env), arg1.into_ref(__jni_env), arg2) }
        }
        #[unsafe(no_mangle)]
        extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_BluetoothGattCallback_native_1onCharacteristicChanged__JLandroid_bluetooth_BluetoothGatt_2Landroid_bluetooth_BluetoothGattCharacteristic_2<
            'env,
        >(
            __jni_env: ::java_spaghetti::Env<'env>,
            _class: *mut (),
            ptr: i64,
            arg0: ::java_spaghetti::Arg<BluetoothGatt>,
            arg1: ::java_spaghetti::Arg<BluetoothGattCharacteristic>,
        ) -> () {
            let ptr: *const std::sync::Arc<dyn BluetoothGattCallbackProxy> =
                ::std::ptr::with_exposed_provenance(ptr as usize);
            unsafe {
                (*ptr).onCharacteristicChanged_BluetoothGatt_BluetoothGattCharacteristic(
                    __jni_env,
                    arg0.into_ref(__jni_env),
                    arg1.into_ref(__jni_env),
                )
            }
        }
        #[unsafe(no_mangle)]
        extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_BluetoothGattCallback_native_1onCharacteristicChanged__JLandroid_bluetooth_BluetoothGatt_2Landroid_bluetooth_BluetoothGattCharacteristic_2_3B<
            'env,
        >(
            __jni_env: ::java_spaghetti::Env<'env>,
            _class: *mut (),
            ptr: i64,
            arg0: ::java_spaghetti::Arg<BluetoothGatt>,
            arg1: ::java_spaghetti::Arg<BluetoothGattCharacteristic>,
            arg2: ::java_spaghetti::Arg<::java_spaghetti::ByteArray>,
        ) -> () {
            let ptr: *const std::sync::Arc<dyn BluetoothGattCallbackProxy> =
                ::std::ptr::with_exposed_provenance(ptr as usize);
            unsafe {
                (*ptr).onCharacteristicChanged_BluetoothGatt_BluetoothGattCharacteristic_byte_array(
                    __jni_env,
                    arg0.into_ref(__jni_env),
                    arg1.into_ref(__jni_env),
                    arg2.into_ref(__jni_env),
                )
            }
        }
        #[unsafe(no_mangle)]
        extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_BluetoothGattCallback_native_1onDescriptorRead__JLandroid_bluetooth_BluetoothGatt_2Landroid_bluetooth_BluetoothGattDescriptor_2I<
            'env,
        >(
            __jni_env: ::java_spaghetti::Env<'env>,
            _class: *mut (),
            ptr: i64,
            arg0: ::java_spaghetti::Arg<BluetoothGatt>,
            arg1: ::java_spaghetti::Arg<BluetoothGattDescriptor>,
            arg2: i32,
        ) -> () {
            let ptr: *const std::sync::Arc<dyn BluetoothGattCallbackProxy> =
                ::std::ptr::with_exposed_provenance(ptr as usize);
            unsafe {
                (*ptr).onDescriptorRead_BluetoothGatt_BluetoothGattDescriptor_int(
                    __jni_env,
                    arg0.into_ref(__jni_env),
                    arg1.into_ref(__jni_env),
                    arg2,
                )
            }
        }
        #[unsafe(no_mangle)]
        extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_BluetoothGattCallback_native_1onDescriptorRead__JLandroid_bluetooth_BluetoothGatt_2Landroid_bluetooth_BluetoothGattDescriptor_2I_3B<
            'env,
        >(
            __jni_env: ::java_spaghetti::Env<'env>,
            _class: *mut (),
            ptr: i64,
            arg0: ::java_spaghetti::Arg<BluetoothGatt>,
            arg1: ::java_spaghetti::Arg<BluetoothGattDescriptor>,
            arg2: i32,
            arg3: ::java_spaghetti::Arg<::java_spaghetti::ByteArray>,
        ) -> () {
            let ptr: *const std::sync::Arc<dyn BluetoothGattCallbackProxy> =
                ::std::ptr::with_exposed_provenance(ptr as usize);
            unsafe {
                (*ptr).onDescriptorRead_BluetoothGatt_BluetoothGattDescriptor_int_byte_array(
                    __jni_env,
                    arg0.into_ref(__jni_env),
                    arg1.into_ref(__jni_env),
                    arg2,
                    arg3.into_ref(__jni_env),
                )
            }
        }
        #[unsafe(no_mangle)]
        extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_BluetoothGattCallback_native_1onDescriptorWrite__JLandroid_bluetooth_BluetoothGatt_2Landroid_bluetooth_BluetoothGattDescriptor_2I<
            'env,
        >(
            __jni_env: ::java_spaghetti::Env<'env>,
            _class: *mut (),
            ptr: i64,
            arg0: ::java_spaghetti::Arg<BluetoothGatt>,
            arg1: ::java_spaghetti::Arg<BluetoothGattDescriptor>,
            arg2: i32,
        ) -> () {
            let ptr: *const std::sync::Arc<dyn BluetoothGattCallbackProxy> =
                ::std::ptr::with_exposed_provenance(ptr as usize);
            unsafe { (*ptr).onDescriptorWrite(__jni_env, arg0.into_ref(__jni_env), arg1.into_ref(__jni_env), arg2) }
        }
        #[unsafe(no_mangle)]
        extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_BluetoothGattCallback_native_1onReliableWriteCompleted__JLandroid_bluetooth_BluetoothGatt_2I<
            'env,
        >(
            __jni_env: ::java_spaghetti::Env<'env>,
            _class: *mut (),
            ptr: i64,
            arg0: ::java_spaghetti::Arg<BluetoothGatt>,
            arg1: i32,
        ) -> () {
            let ptr: *const std::sync::Arc<dyn BluetoothGattCallbackProxy> =
                ::std::ptr::with_exposed_provenance(ptr as usize);
            unsafe { (*ptr).onReliableWriteCompleted(__jni_env, arg0.into_ref(__jni_env), arg1) }
        }
        #[unsafe(no_mangle)]
        extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_BluetoothGattCallback_native_1onReadRemoteRssi__JLandroid_bluetooth_BluetoothGatt_2II<
            'env,
        >(
            __jni_env: ::java_spaghetti::Env<'env>,
            _class: *mut (),
            ptr: i64,
            arg0: ::java_spaghetti::Arg<BluetoothGatt>,
            arg1: i32,
            arg2: i32,
        ) -> () {
            let ptr: *const std::sync::Arc<dyn BluetoothGattCallbackProxy> =
                ::std::ptr::with_exposed_provenance(ptr as usize);
            unsafe { (*ptr).onReadRemoteRssi(__jni_env, arg0.into_ref(__jni_env), arg1, arg2) }
        }
        #[unsafe(no_mangle)]
        extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_BluetoothGattCallback_native_1onMtuChanged__JLandroid_bluetooth_BluetoothGatt_2II<
            'env,
        >(
            __jni_env: ::java_spaghetti::Env<'env>,
            _class: *mut (),
            ptr: i64,
            arg0: ::java_spaghetti::Arg<BluetoothGatt>,
            arg1: i32,
            arg2: i32,
        ) -> () {
            let ptr: *const std::sync::Arc<dyn BluetoothGattCallbackProxy> =
                ::std::ptr::with_exposed_provenance(ptr as usize);
            unsafe { (*ptr).onMtuChanged(__jni_env, arg0.into_ref(__jni_env), arg1, arg2) }
        }
        #[unsafe(no_mangle)]
        extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_BluetoothGattCallback_native_1onServiceChanged__JLandroid_bluetooth_BluetoothGatt_2<
            'env,
        >(
            __jni_env: ::java_spaghetti::Env<'env>,
            _class: *mut (),
            ptr: i64,
            arg0: ::java_spaghetti::Arg<BluetoothGatt>,
        ) -> () {
            let ptr: *const std::sync::Arc<dyn BluetoothGattCallbackProxy> =
                ::std::ptr::with_exposed_provenance(ptr as usize);
            unsafe { (*ptr).onServiceChanged(__jni_env, arg0.into_ref(__jni_env)) }
        }
        pub trait BluetoothGattCallbackProxy: ::std::marker::Send + ::std::marker::Sync + 'static {
            fn onPhyUpdate<'env>(
                &self,
                env: ::java_spaghetti::Env<'env>,
                arg0: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGatt>>,
                arg1: i32,
                arg2: i32,
                arg3: i32,
            ) -> ();
            fn onPhyRead<'env>(
                &self,
                env: ::java_spaghetti::Env<'env>,
                arg0: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGatt>>,
                arg1: i32,
                arg2: i32,
                arg3: i32,
            ) -> ();
            fn onConnectionStateChange<'env>(
                &self,
                env: ::java_spaghetti::Env<'env>,
                arg0: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGatt>>,
                arg1: i32,
                arg2: i32,
            ) -> ();
            fn onServicesDiscovered<'env>(
                &self,
                env: ::java_spaghetti::Env<'env>,
                arg0: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGatt>>,
                arg1: i32,
            ) -> ();
            fn onCharacteristicRead_BluetoothGatt_BluetoothGattCharacteristic_int<'env>(
                &self,
                env: ::java_spaghetti::Env<'env>,
                arg0: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGatt>>,
                arg1: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGattCharacteristic>>,
                arg2: i32,
            ) -> ();
            fn onCharacteristicRead_BluetoothGatt_BluetoothGattCharacteristic_byte_array_int<'env>(
                &self,
                env: ::java_spaghetti::Env<'env>,
                arg0: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGatt>>,
                arg1: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGattCharacteristic>>,
                arg2: ::std::option::Option<::java_spaghetti::Ref<'env, ::java_spaghetti::ByteArray>>,
                arg3: i32,
            ) -> ();
            fn onCharacteristicWrite<'env>(
                &self,
                env: ::java_spaghetti::Env<'env>,
                arg0: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGatt>>,
                arg1: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGattCharacteristic>>,
                arg2: i32,
            ) -> ();
            fn onCharacteristicChanged_BluetoothGatt_BluetoothGattCharacteristic<'env>(
                &self,
                env: ::java_spaghetti::Env<'env>,
                arg0: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGatt>>,
                arg1: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGattCharacteristic>>,
            ) -> ();
            fn onCharacteristicChanged_BluetoothGatt_BluetoothGattCharacteristic_byte_array<'env>(
                &self,
                env: ::java_spaghetti::Env<'env>,
                arg0: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGatt>>,
                arg1: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGattCharacteristic>>,
                arg2: ::std::option::Option<::java_spaghetti::Ref<'env, ::java_spaghetti::ByteArray>>,
            ) -> ();
            fn onDescriptorRead_BluetoothGatt_BluetoothGattDescriptor_int<'env>(
                &self,
                env: ::java_spaghetti::Env<'env>,
                arg0: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGatt>>,
                arg1: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGattDescriptor>>,
                arg2: i32,
            ) -> ();
            fn onDescriptorRead_BluetoothGatt_BluetoothGattDescriptor_int_byte_array<'env>(
                &self,
                env: ::java_spaghetti::Env<'env>,
                arg0: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGatt>>,
                arg1: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGattDescriptor>>,
                arg2: i32,
                arg3: ::std::option::Option<::java_spaghetti::Ref<'env, ::java_spaghetti::ByteArray>>,
            ) -> ();
            fn onDescriptorWrite<'env>(
                &self,
                env: ::java_spaghetti::Env<'env>,
                arg0: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGatt>>,
                arg1: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGattDescriptor>>,
                arg2: i32,
            ) -> ();
            fn onReliableWriteCompleted<'env>(
                &self,
                env: ::java_spaghetti::Env<'env>,
                arg0: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGatt>>,
                arg1: i32,
            ) -> ();
            fn onReadRemoteRssi<'env>(
                &self,
                env: ::java_spaghetti::Env<'env>,
                arg0: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGatt>>,
                arg1: i32,
                arg2: i32,
            ) -> ();
            fn onMtuChanged<'env>(
                &self,
                env: ::java_spaghetti::Env<'env>,
                arg0: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGatt>>,
                arg1: i32,
                arg2: i32,
            ) -> ();
            fn onServiceChanged<'env>(
                &self,
                env: ::java_spaghetti::Env<'env>,
                arg0: ::std::option::Option<::java_spaghetti::Ref<'env, BluetoothGatt>>,
            ) -> ();
        }
        #[unsafe(no_mangle)]
        extern "system" fn Java_com_github_alexmoon_bluest_proxy_android_bluetooth_BluetoothGattCallback_native_1finalize__J(
            __jni_env: ::java_spaghetti::Env<'_>,
            _class: *mut (),
            ptr: i64,
        ) {
            let ptr: *mut std::sync::Arc<dyn BluetoothGattCallbackProxy> =
                ::std::ptr::with_exposed_provenance_mut(ptr as usize);
            let _ = unsafe { Box::from_raw(ptr) };
        }
        impl BluetoothGattCallback {
            pub fn new_proxy<'env>(
                env: ::java_spaghetti::Env<'env>,
                proxy: ::std::sync::Arc<dyn BluetoothGattCallbackProxy>,
            ) -> Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                let __jni_class = __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            env,
                            env.require_class(
                                c"com/github/alexmoon/bluest/proxy/android/bluetooth/BluetoothGattCallback",
                            ),
                        )
                        .as_global()
                    })
                    .as_raw();
                let b = ::std::boxed::Box::new(proxy);
                let ptr = ::std::boxed::Box::into_raw(b);
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::sys::jvalue {
                        j: ptr.expose_provenance() as i64,
                    }];
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(env.require_method(__jni_class, c"<init>", c"(J)V"))
                        })
                        .as_raw();
                    env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "class [BluetoothGattCharacteristic](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html)"]
        pub enum BluetoothGattCharacteristic {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothGattCharacteristic {}
        unsafe impl ::java_spaghetti::JniType for BluetoothGattCharacteristic {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothGattCharacteristic")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothGattCharacteristic {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothGattCharacteristic {}
        impl BluetoothGattCharacteristic {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothGattCharacteristic"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[BluetoothGattCharacteristic](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#BluetoothGattCharacteristic(java.util.UUID,%20int,%20int))"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Ljava/util/UUID;II)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#describeContents())"]
            pub fn describeContents<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"describeContents",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[addDescriptor](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#addDescriptor(android.bluetooth.BluetoothGattDescriptor))"]
            pub fn addDescriptor<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattDescriptor>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"addDescriptor",
                                c"(Landroid/bluetooth/BluetoothGattDescriptor;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getService](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#getService())"]
            pub fn getService<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothGattService>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getService",
                                c"()Landroid/bluetooth/BluetoothGattService;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getUuid](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#getUuid())"]
            pub fn getUuid<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::UUID>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getUuid",
                                c"()Ljava/util/UUID;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getInstanceId](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#getInstanceId())"]
            pub fn getInstanceId<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getInstanceId",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getProperties](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#getProperties())"]
            pub fn getProperties<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getProperties",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getPermissions](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#getPermissions())"]
            pub fn getPermissions<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getPermissions",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getWriteType](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#getWriteType())"]
            pub fn getWriteType<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getWriteType",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setWriteType](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#setWriteType(int))"]
            pub fn setWriteType<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setWriteType",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDescriptors](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#getDescriptors())"]
            pub fn getDescriptors<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDescriptors",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDescriptor](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#getDescriptor(java.util.UUID))"]
            pub fn getDescriptor<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothGattDescriptor>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDescriptor",
                                c"(Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattDescriptor;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getValue](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#getValue())"]
            #[deprecated]
            pub fn getValue<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getValue",
                                c"()[B",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getStringValue](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#getStringValue(int))"]
            #[deprecated]
            pub fn getStringValue<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getStringValue",
                                c"(I)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setValue](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#setValue(byte[]))"]
            #[deprecated]
            pub fn setValue_byte_array<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setValue",
                                c"([B)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setValue](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#setValue(int,%20int,%20int))"]
            #[deprecated]
            pub fn setValue_int_int_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setValue",
                                c"(III)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setValue](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#setValue(int,%20int,%20int,%20int))"]
            #[deprecated]
            pub fn setValue_int_int_int_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setValue",
                                c"(IIII)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setValue](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#setValue(java.lang.String))"]
            #[deprecated]
            pub fn setValue_String<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setValue",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [FORMAT_FLOAT](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#FORMAT_FLOAT)"]
            pub const FORMAT_FLOAT: i32 = 52;
            #[doc = "public static final [FORMAT_SFLOAT](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#FORMAT_SFLOAT)"]
            pub const FORMAT_SFLOAT: i32 = 50;
            #[doc = "public static final [FORMAT_SINT16](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#FORMAT_SINT16)"]
            pub const FORMAT_SINT16: i32 = 34;
            #[doc = "public static final [FORMAT_SINT32](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#FORMAT_SINT32)"]
            pub const FORMAT_SINT32: i32 = 36;
            #[doc = "public static final [FORMAT_SINT8](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#FORMAT_SINT8)"]
            pub const FORMAT_SINT8: i32 = 33;
            #[doc = "public static final [FORMAT_UINT16](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#FORMAT_UINT16)"]
            pub const FORMAT_UINT16: i32 = 18;
            #[doc = "public static final [FORMAT_UINT32](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#FORMAT_UINT32)"]
            pub const FORMAT_UINT32: i32 = 20;
            #[doc = "public static final [FORMAT_UINT8](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#FORMAT_UINT8)"]
            pub const FORMAT_UINT8: i32 = 17;
            #[doc = "public static final [PERMISSION_READ](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PERMISSION_READ)"]
            pub const PERMISSION_READ: i32 = 1;
            #[doc = "public static final [PERMISSION_READ_ENCRYPTED](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PERMISSION_READ_ENCRYPTED)"]
            pub const PERMISSION_READ_ENCRYPTED: i32 = 2;
            #[doc = "public static final [PERMISSION_READ_ENCRYPTED_MITM](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PERMISSION_READ_ENCRYPTED_MITM)"]
            pub const PERMISSION_READ_ENCRYPTED_MITM: i32 = 4;
            #[doc = "public static final [PERMISSION_WRITE](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PERMISSION_WRITE)"]
            pub const PERMISSION_WRITE: i32 = 16;
            #[doc = "public static final [PERMISSION_WRITE_ENCRYPTED](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PERMISSION_WRITE_ENCRYPTED)"]
            pub const PERMISSION_WRITE_ENCRYPTED: i32 = 32;
            #[doc = "public static final [PERMISSION_WRITE_ENCRYPTED_MITM](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PERMISSION_WRITE_ENCRYPTED_MITM)"]
            pub const PERMISSION_WRITE_ENCRYPTED_MITM: i32 = 64;
            #[doc = "public static final [PERMISSION_WRITE_SIGNED](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PERMISSION_WRITE_SIGNED)"]
            pub const PERMISSION_WRITE_SIGNED: i32 = 128;
            #[doc = "public static final [PERMISSION_WRITE_SIGNED_MITM](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PERMISSION_WRITE_SIGNED_MITM)"]
            pub const PERMISSION_WRITE_SIGNED_MITM: i32 = 256;
            #[doc = "public static final [PROPERTY_BROADCAST](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PROPERTY_BROADCAST)"]
            pub const PROPERTY_BROADCAST: i32 = 1;
            #[doc = "public static final [PROPERTY_EXTENDED_PROPS](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PROPERTY_EXTENDED_PROPS)"]
            pub const PROPERTY_EXTENDED_PROPS: i32 = 128;
            #[doc = "public static final [PROPERTY_INDICATE](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PROPERTY_INDICATE)"]
            pub const PROPERTY_INDICATE: i32 = 32;
            #[doc = "public static final [PROPERTY_NOTIFY](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PROPERTY_NOTIFY)"]
            pub const PROPERTY_NOTIFY: i32 = 16;
            #[doc = "public static final [PROPERTY_READ](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PROPERTY_READ)"]
            pub const PROPERTY_READ: i32 = 2;
            #[doc = "public static final [PROPERTY_SIGNED_WRITE](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PROPERTY_SIGNED_WRITE)"]
            pub const PROPERTY_SIGNED_WRITE: i32 = 64;
            #[doc = "public static final [PROPERTY_WRITE](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PROPERTY_WRITE)"]
            pub const PROPERTY_WRITE: i32 = 8;
            #[doc = "public static final [PROPERTY_WRITE_NO_RESPONSE](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PROPERTY_WRITE_NO_RESPONSE)"]
            pub const PROPERTY_WRITE_NO_RESPONSE: i32 = 4;
            #[doc = "public static final [WRITE_TYPE_DEFAULT](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#WRITE_TYPE_DEFAULT)"]
            pub const WRITE_TYPE_DEFAULT: i32 = 2;
            #[doc = "public static final [WRITE_TYPE_NO_RESPONSE](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#WRITE_TYPE_NO_RESPONSE)"]
            pub const WRITE_TYPE_NO_RESPONSE: i32 = 1;
            #[doc = "public static final [WRITE_TYPE_SIGNED](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#WRITE_TYPE_SIGNED)"]
            pub const WRITE_TYPE_SIGNED: i32 = 4;
        }
        #[doc = "class [BluetoothGattDescriptor](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html)"]
        pub enum BluetoothGattDescriptor {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothGattDescriptor {}
        unsafe impl ::java_spaghetti::JniType for BluetoothGattDescriptor {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothGattDescriptor")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothGattDescriptor {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothGattDescriptor {}
        impl BluetoothGattDescriptor {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothGattDescriptor"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[BluetoothGattDescriptor](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#BluetoothGattDescriptor(java.util.UUID,%20int))"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Ljava/util/UUID;I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#describeContents())"]
            pub fn describeContents<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"describeContents",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getCharacteristic](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#getCharacteristic())"]
            pub fn getCharacteristic<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothGattCharacteristic>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCharacteristic",
                                c"()Landroid/bluetooth/BluetoothGattCharacteristic;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getUuid](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#getUuid())"]
            pub fn getUuid<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::UUID>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getUuid",
                                c"()Ljava/util/UUID;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getPermissions](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#getPermissions())"]
            pub fn getPermissions<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getPermissions",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getValue](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#getValue())"]
            #[deprecated]
            pub fn getValue<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getValue",
                                c"()[B",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setValue](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#setValue(byte[]))"]
            #[deprecated]
            pub fn setValue<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setValue",
                                c"([B)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "**get** public static final [DISABLE_NOTIFICATION_VALUE](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#DISABLE_NOTIFICATION_VALUE)"]
            pub fn DISABLE_NOTIFICATION_VALUE<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>> {
                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                let __jni_class = Self::__class_global_ref(__jni_env);
                unsafe {
                    let __jni_field = __FIELD
                        .get_or_init(|| {
                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                __jni_class,
                                c"DISABLE_NOTIFICATION_VALUE",
                                c"[B",
                            ))
                        })
                        .as_raw();
                    __jni_env.get_static_object_field(__jni_class, __jni_field)
                }
            }
            #[doc = "**get** public static final [ENABLE_INDICATION_VALUE](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#ENABLE_INDICATION_VALUE)"]
            pub fn ENABLE_INDICATION_VALUE<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>> {
                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                let __jni_class = Self::__class_global_ref(__jni_env);
                unsafe {
                    let __jni_field = __FIELD
                        .get_or_init(|| {
                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                __jni_class,
                                c"ENABLE_INDICATION_VALUE",
                                c"[B",
                            ))
                        })
                        .as_raw();
                    __jni_env.get_static_object_field(__jni_class, __jni_field)
                }
            }
            #[doc = "**get** public static final [ENABLE_NOTIFICATION_VALUE](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#ENABLE_NOTIFICATION_VALUE)"]
            pub fn ENABLE_NOTIFICATION_VALUE<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>> {
                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                let __jni_class = Self::__class_global_ref(__jni_env);
                unsafe {
                    let __jni_field = __FIELD
                        .get_or_init(|| {
                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                __jni_class,
                                c"ENABLE_NOTIFICATION_VALUE",
                                c"[B",
                            ))
                        })
                        .as_raw();
                    __jni_env.get_static_object_field(__jni_class, __jni_field)
                }
            }
            #[doc = "public static final [PERMISSION_READ](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#PERMISSION_READ)"]
            pub const PERMISSION_READ: i32 = 1;
            #[doc = "public static final [PERMISSION_READ_ENCRYPTED](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#PERMISSION_READ_ENCRYPTED)"]
            pub const PERMISSION_READ_ENCRYPTED: i32 = 2;
            #[doc = "public static final [PERMISSION_READ_ENCRYPTED_MITM](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#PERMISSION_READ_ENCRYPTED_MITM)"]
            pub const PERMISSION_READ_ENCRYPTED_MITM: i32 = 4;
            #[doc = "public static final [PERMISSION_WRITE](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#PERMISSION_WRITE)"]
            pub const PERMISSION_WRITE: i32 = 16;
            #[doc = "public static final [PERMISSION_WRITE_ENCRYPTED](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#PERMISSION_WRITE_ENCRYPTED)"]
            pub const PERMISSION_WRITE_ENCRYPTED: i32 = 32;
            #[doc = "public static final [PERMISSION_WRITE_ENCRYPTED_MITM](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#PERMISSION_WRITE_ENCRYPTED_MITM)"]
            pub const PERMISSION_WRITE_ENCRYPTED_MITM: i32 = 64;
            #[doc = "public static final [PERMISSION_WRITE_SIGNED](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#PERMISSION_WRITE_SIGNED)"]
            pub const PERMISSION_WRITE_SIGNED: i32 = 128;
            #[doc = "public static final [PERMISSION_WRITE_SIGNED_MITM](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#PERMISSION_WRITE_SIGNED_MITM)"]
            pub const PERMISSION_WRITE_SIGNED_MITM: i32 = 256;
        }
        #[doc = "final class [BluetoothGattServer](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html)"]
        pub enum BluetoothGattServer {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothGattServer {}
        unsafe impl ::java_spaghetti::JniType for BluetoothGattServer {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothGattServer")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<BluetoothProfile> for BluetoothGattServer {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothGattServer {}
        impl BluetoothGattServer {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothGattServer"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[close](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#close())"]
            pub fn close<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"close",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[connect](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#connect(android.bluetooth.BluetoothDevice,%20boolean))"]
            pub fn connect<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: bool,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"connect",
                                c"(Landroid/bluetooth/BluetoothDevice;Z)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[cancelConnection](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#cancelConnection(android.bluetooth.BluetoothDevice))"]
            pub fn cancelConnection<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"cancelConnection",
                                c"(Landroid/bluetooth/BluetoothDevice;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setPreferredPhy](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#setPreferredPhy(android.bluetooth.BluetoothDevice,%20int,%20int,%20int))"]
            pub fn setPreferredPhy<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setPreferredPhy",
                                c"(Landroid/bluetooth/BluetoothDevice;III)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[readPhy](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#readPhy(android.bluetooth.BluetoothDevice))"]
            pub fn readPhy<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"readPhy",
                                c"(Landroid/bluetooth/BluetoothDevice;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[sendResponse](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#sendResponse(android.bluetooth.BluetoothDevice,%20int,%20int,%20int,%20byte[]))"]
            pub fn sendResponse<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: i32,
                arg3: i32,
                arg4: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"sendResponse",
                                c"(Landroid/bluetooth/BluetoothDevice;III[B)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[notifyCharacteristicChanged](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#notifyCharacteristicChanged(android.bluetooth.BluetoothDevice,%20android.bluetooth.BluetoothGattCharacteristic,%20boolean))"]
            #[deprecated]
            pub fn notifyCharacteristicChanged_BluetoothDevice_BluetoothGattCharacteristic_boolean<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
                arg2: bool,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"notifyCharacteristicChanged" , c"(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothGattCharacteristic;Z)Z" ))). as_raw ();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[notifyCharacteristicChanged](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#notifyCharacteristicChanged(android.bluetooth.BluetoothDevice,%20android.bluetooth.BluetoothGattCharacteristic,%20boolean,%20byte[]))"]
            pub fn notifyCharacteristicChanged_BluetoothDevice_BluetoothGattCharacteristic_boolean_byte_array<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
                arg2: bool,
                arg3: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"notifyCharacteristicChanged" , c"(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothGattCharacteristic;Z[B)I" ))). as_raw ();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[addService](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#addService(android.bluetooth.BluetoothGattService))"]
            pub fn addService<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattService>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"addService",
                                c"(Landroid/bluetooth/BluetoothGattService;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[removeService](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#removeService(android.bluetooth.BluetoothGattService))"]
            pub fn removeService<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattService>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"removeService",
                                c"(Landroid/bluetooth/BluetoothGattService;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[clearServices](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#clearServices())"]
            pub fn clearServices<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"clearServices",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getServices](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#getServices())"]
            pub fn getServices<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getServices",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getService](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#getService(java.util.UUID))"]
            pub fn getService<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothGattService>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getService",
                                c"(Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattService;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#getConnectionState(android.bluetooth.BluetoothDevice))"]
            pub fn getConnectionState<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectionState",
                                c"(Landroid/bluetooth/BluetoothDevice;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#getConnectedDevices())"]
            pub fn getConnectedDevices<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectedDevices",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#getDevicesMatchingConnectionStates(int[]))"]
            pub fn getDevicesMatchingConnectionStates<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDevicesMatchingConnectionStates",
                                c"([I)Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "class [BluetoothGattServerCallback](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html)"]
        pub enum BluetoothGattServerCallback {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothGattServerCallback {}
        unsafe impl ::java_spaghetti::JniType for BluetoothGattServerCallback {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothGattServerCallback")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothGattServerCallback {}
        impl BluetoothGattServerCallback {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothGattServerCallback"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[BluetoothGattServerCallback](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#BluetoothGattServerCallback())"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onConnectionStateChange](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onConnectionStateChange(android.bluetooth.BluetoothDevice,%20int,%20int))"]
            pub fn onConnectionStateChange<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onConnectionStateChange",
                                c"(Landroid/bluetooth/BluetoothDevice;II)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onServiceAdded](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onServiceAdded(int,%20android.bluetooth.BluetoothGattService))"]
            pub fn onServiceAdded<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattService>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onServiceAdded",
                                c"(ILandroid/bluetooth/BluetoothGattService;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onCharacteristicReadRequest](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onCharacteristicReadRequest(android.bluetooth.BluetoothDevice,%20int,%20int,%20android.bluetooth.BluetoothGattCharacteristic))"]
            pub fn onCharacteristicReadRequest<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: i32,
                arg3: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"onCharacteristicReadRequest" , c"(Landroid/bluetooth/BluetoothDevice;IILandroid/bluetooth/BluetoothGattCharacteristic;)V" ))). as_raw ();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onCharacteristicWriteRequest](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onCharacteristicWriteRequest(android.bluetooth.BluetoothDevice,%20int,%20android.bluetooth.BluetoothGattCharacteristic,%20boolean,%20boolean,%20int,%20byte[]))"]
            pub fn onCharacteristicWriteRequest<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
                arg3: bool,
                arg4: bool,
                arg5: i32,
                arg6: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"onCharacteristicWriteRequest" , c"(Landroid/bluetooth/BluetoothDevice;ILandroid/bluetooth/BluetoothGattCharacteristic;ZZI[B)V" ))). as_raw ();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onDescriptorReadRequest](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onDescriptorReadRequest(android.bluetooth.BluetoothDevice,%20int,%20int,%20android.bluetooth.BluetoothGattDescriptor))"]
            pub fn onDescriptorReadRequest<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: i32,
                arg3: impl ::java_spaghetti::AsArg<BluetoothGattDescriptor>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onDescriptorReadRequest",
                                c"(Landroid/bluetooth/BluetoothDevice;IILandroid/bluetooth/BluetoothGattDescriptor;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onDescriptorWriteRequest](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onDescriptorWriteRequest(android.bluetooth.BluetoothDevice,%20int,%20android.bluetooth.BluetoothGattDescriptor,%20boolean,%20boolean,%20int,%20byte[]))"]
            pub fn onDescriptorWriteRequest<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: impl ::java_spaghetti::AsArg<BluetoothGattDescriptor>,
                arg3: bool,
                arg4: bool,
                arg5: i32,
                arg6: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"onDescriptorWriteRequest" , c"(Landroid/bluetooth/BluetoothDevice;ILandroid/bluetooth/BluetoothGattDescriptor;ZZI[B)V" ))). as_raw ();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onExecuteWrite](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onExecuteWrite(android.bluetooth.BluetoothDevice,%20int,%20boolean))"]
            pub fn onExecuteWrite<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onExecuteWrite",
                                c"(Landroid/bluetooth/BluetoothDevice;IZ)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onNotificationSent](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onNotificationSent(android.bluetooth.BluetoothDevice,%20int))"]
            pub fn onNotificationSent<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onNotificationSent",
                                c"(Landroid/bluetooth/BluetoothDevice;I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onMtuChanged](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onMtuChanged(android.bluetooth.BluetoothDevice,%20int))"]
            pub fn onMtuChanged<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onMtuChanged",
                                c"(Landroid/bluetooth/BluetoothDevice;I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onPhyUpdate](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onPhyUpdate(android.bluetooth.BluetoothDevice,%20int,%20int,%20int))"]
            pub fn onPhyUpdate<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onPhyUpdate",
                                c"(Landroid/bluetooth/BluetoothDevice;III)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onPhyRead](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onPhyRead(android.bluetooth.BluetoothDevice,%20int,%20int,%20int))"]
            pub fn onPhyRead<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onPhyRead",
                                c"(Landroid/bluetooth/BluetoothDevice;III)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "class [BluetoothGattService](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html)"]
        pub enum BluetoothGattService {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothGattService {}
        unsafe impl ::java_spaghetti::JniType for BluetoothGattService {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothGattService")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothGattService {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothGattService {}
        impl BluetoothGattService {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothGattService"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[BluetoothGattService](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#BluetoothGattService(java.util.UUID,%20int))"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Ljava/util/UUID;I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#describeContents())"]
            pub fn describeContents<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"describeContents",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[addService](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#addService(android.bluetooth.BluetoothGattService))"]
            pub fn addService<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattService>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"addService",
                                c"(Landroid/bluetooth/BluetoothGattService;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[addCharacteristic](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#addCharacteristic(android.bluetooth.BluetoothGattCharacteristic))"]
            pub fn addCharacteristic<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"addCharacteristic",
                                c"(Landroid/bluetooth/BluetoothGattCharacteristic;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getUuid](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#getUuid())"]
            pub fn getUuid<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::UUID>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getUuid",
                                c"()Ljava/util/UUID;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getInstanceId](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#getInstanceId())"]
            pub fn getInstanceId<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getInstanceId",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getType](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#getType())"]
            pub fn getType<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getType",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getIncludedServices](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#getIncludedServices())"]
            pub fn getIncludedServices<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getIncludedServices",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getCharacteristics](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#getCharacteristics())"]
            pub fn getCharacteristics<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCharacteristics",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getCharacteristic](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#getCharacteristic(java.util.UUID))"]
            pub fn getCharacteristic<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothGattCharacteristic>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCharacteristic",
                                c"(Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattCharacteristic;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [SERVICE_TYPE_PRIMARY](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#SERVICE_TYPE_PRIMARY)"]
            pub const SERVICE_TYPE_PRIMARY: i32 = 0;
            #[doc = "public static final [SERVICE_TYPE_SECONDARY](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#SERVICE_TYPE_SECONDARY)"]
            pub const SERVICE_TYPE_SECONDARY: i32 = 1;
        }
        #[doc = "final class [BluetoothHeadset](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html)"]
        pub enum BluetoothHeadset {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothHeadset {}
        unsafe impl ::java_spaghetti::JniType for BluetoothHeadset {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothHeadset")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<BluetoothProfile> for BluetoothHeadset {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothHeadset {}
        impl BluetoothHeadset {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothHeadset"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#getConnectedDevices())"]
            pub fn getConnectedDevices<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectedDevices",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#getDevicesMatchingConnectionStates(int[]))"]
            pub fn getDevicesMatchingConnectionStates<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDevicesMatchingConnectionStates",
                                c"([I)Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#getConnectionState(android.bluetooth.BluetoothDevice))"]
            pub fn getConnectionState<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectionState",
                                c"(Landroid/bluetooth/BluetoothDevice;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isNoiseReductionSupported](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#isNoiseReductionSupported(android.bluetooth.BluetoothDevice))"]
            pub fn isNoiseReductionSupported<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isNoiseReductionSupported",
                                c"(Landroid/bluetooth/BluetoothDevice;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isVoiceRecognitionSupported](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#isVoiceRecognitionSupported(android.bluetooth.BluetoothDevice))"]
            pub fn isVoiceRecognitionSupported<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isVoiceRecognitionSupported",
                                c"(Landroid/bluetooth/BluetoothDevice;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[startVoiceRecognition](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#startVoiceRecognition(android.bluetooth.BluetoothDevice))"]
            pub fn startVoiceRecognition<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"startVoiceRecognition",
                                c"(Landroid/bluetooth/BluetoothDevice;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[stopVoiceRecognition](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#stopVoiceRecognition(android.bluetooth.BluetoothDevice))"]
            pub fn stopVoiceRecognition<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"stopVoiceRecognition",
                                c"(Landroid/bluetooth/BluetoothDevice;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isAudioConnected](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#isAudioConnected(android.bluetooth.BluetoothDevice))"]
            pub fn isAudioConnected<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isAudioConnected",
                                c"(Landroid/bluetooth/BluetoothDevice;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[sendVendorSpecificResultCode](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,%20java.lang.String,%20java.lang.String))"]
            pub fn sendVendorSpecificResultCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg2: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"sendVendorSpecificResultCode",
                                c"(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [ACTION_AUDIO_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#ACTION_AUDIO_STATE_CHANGED)"]
            pub const ACTION_AUDIO_STATE_CHANGED: &'static str =
                "android.bluetooth.headset.profile.action.AUDIO_STATE_CHANGED";
            #[doc = "public static final [ACTION_CONNECTION_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#ACTION_CONNECTION_STATE_CHANGED)"]
            pub const ACTION_CONNECTION_STATE_CHANGED: &'static str =
                "android.bluetooth.headset.profile.action.CONNECTION_STATE_CHANGED";
            #[doc = "public static final [ACTION_VENDOR_SPECIFIC_HEADSET_EVENT](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#ACTION_VENDOR_SPECIFIC_HEADSET_EVENT)"]
            pub const ACTION_VENDOR_SPECIFIC_HEADSET_EVENT: &'static str =
                "android.bluetooth.headset.action.VENDOR_SPECIFIC_HEADSET_EVENT";
            #[doc = "public static final [AT_CMD_TYPE_ACTION](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#AT_CMD_TYPE_ACTION)"]
            pub const AT_CMD_TYPE_ACTION: i32 = 4;
            #[doc = "public static final [AT_CMD_TYPE_BASIC](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#AT_CMD_TYPE_BASIC)"]
            pub const AT_CMD_TYPE_BASIC: i32 = 3;
            #[doc = "public static final [AT_CMD_TYPE_READ](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#AT_CMD_TYPE_READ)"]
            pub const AT_CMD_TYPE_READ: i32 = 0;
            #[doc = "public static final [AT_CMD_TYPE_SET](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#AT_CMD_TYPE_SET)"]
            pub const AT_CMD_TYPE_SET: i32 = 2;
            #[doc = "public static final [AT_CMD_TYPE_TEST](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#AT_CMD_TYPE_TEST)"]
            pub const AT_CMD_TYPE_TEST: i32 = 1;
            #[doc = "public static final [EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS)"]
            pub const EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS: &'static str =
                "android.bluetooth.headset.extra.VENDOR_SPECIFIC_HEADSET_EVENT_ARGS";
            #[doc = "public static final [EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD)"]
            pub const EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD: &'static str =
                "android.bluetooth.headset.extra.VENDOR_SPECIFIC_HEADSET_EVENT_CMD";
            #[doc = "public static final [EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE)"]
            pub const EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE: &'static str =
                "android.bluetooth.headset.extra.VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE";
            #[doc = "public static final [STATE_AUDIO_CONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#STATE_AUDIO_CONNECTED)"]
            pub const STATE_AUDIO_CONNECTED: i32 = 12;
            #[doc = "public static final [STATE_AUDIO_CONNECTING](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#STATE_AUDIO_CONNECTING)"]
            pub const STATE_AUDIO_CONNECTING: i32 = 11;
            #[doc = "public static final [STATE_AUDIO_DISCONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#STATE_AUDIO_DISCONNECTED)"]
            pub const STATE_AUDIO_DISCONNECTED: i32 = 10;
            #[doc = "public static final [VENDOR_RESULT_CODE_COMMAND_ANDROID](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#VENDOR_RESULT_CODE_COMMAND_ANDROID)"]
            pub const VENDOR_RESULT_CODE_COMMAND_ANDROID: &'static str = "+ANDROID";
            #[doc = "public static final [VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY)"]
            pub const VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY: &'static str =
                "android.bluetooth.headset.intent.category.companyid";
        }
        #[doc = "final class [BluetoothHealth](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html)"]
        #[deprecated]
        pub enum BluetoothHealth {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothHealth {}
        unsafe impl ::java_spaghetti::JniType for BluetoothHealth {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothHealth")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<BluetoothProfile> for BluetoothHealth {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothHealth {}
        impl BluetoothHealth {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothHealth"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[registerSinkAppConfiguration](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#registerSinkAppConfiguration(java.lang.String,%20int,%20android.bluetooth.BluetoothHealthCallback))"]
            #[deprecated]
            pub fn registerSinkAppConfiguration<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
                arg2: impl ::java_spaghetti::AsArg<BluetoothHealthCallback>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"registerSinkAppConfiguration",
                                c"(Ljava/lang/String;ILandroid/bluetooth/BluetoothHealthCallback;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[unregisterAppConfiguration](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration))"]
            #[deprecated]
            pub fn unregisterAppConfiguration<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothHealthAppConfiguration>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"unregisterAppConfiguration",
                                c"(Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[connectChannelToSource](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#connectChannelToSource(android.bluetooth.BluetoothDevice,%20android.bluetooth.BluetoothHealthAppConfiguration))"]
            #[deprecated]
            pub fn connectChannelToSource<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothHealthAppConfiguration>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"connectChannelToSource" , c"(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z" ))). as_raw ();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[disconnectChannel](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#disconnectChannel(android.bluetooth.BluetoothDevice,%20android.bluetooth.BluetoothHealthAppConfiguration,%20int))"]
            #[deprecated]
            pub fn disconnectChannel<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothHealthAppConfiguration>,
                arg2: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"disconnectChannel" , c"(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z" ))). as_raw ();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#getConnectionState(android.bluetooth.BluetoothDevice))"]
            #[deprecated]
            pub fn getConnectionState<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectionState",
                                c"(Landroid/bluetooth/BluetoothDevice;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#getConnectedDevices())"]
            #[deprecated]
            pub fn getConnectedDevices<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectedDevices",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#getDevicesMatchingConnectionStates(int[]))"]
            #[deprecated]
            pub fn getDevicesMatchingConnectionStates<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDevicesMatchingConnectionStates",
                                c"([I)Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [APP_CONFIG_REGISTRATION_FAILURE](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#APP_CONFIG_REGISTRATION_FAILURE)"]
            #[deprecated]
            pub const APP_CONFIG_REGISTRATION_FAILURE: i32 = 1;
            #[doc = "public static final [APP_CONFIG_REGISTRATION_SUCCESS](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#APP_CONFIG_REGISTRATION_SUCCESS)"]
            #[deprecated]
            pub const APP_CONFIG_REGISTRATION_SUCCESS: i32 = 0;
            #[doc = "public static final [APP_CONFIG_UNREGISTRATION_FAILURE](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#APP_CONFIG_UNREGISTRATION_FAILURE)"]
            #[deprecated]
            pub const APP_CONFIG_UNREGISTRATION_FAILURE: i32 = 3;
            #[doc = "public static final [APP_CONFIG_UNREGISTRATION_SUCCESS](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#APP_CONFIG_UNREGISTRATION_SUCCESS)"]
            #[deprecated]
            pub const APP_CONFIG_UNREGISTRATION_SUCCESS: i32 = 2;
            #[doc = "public static final [CHANNEL_TYPE_RELIABLE](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#CHANNEL_TYPE_RELIABLE)"]
            #[deprecated]
            pub const CHANNEL_TYPE_RELIABLE: i32 = 10;
            #[doc = "public static final [CHANNEL_TYPE_STREAMING](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#CHANNEL_TYPE_STREAMING)"]
            #[deprecated]
            pub const CHANNEL_TYPE_STREAMING: i32 = 11;
            #[doc = "public static final [SINK_ROLE](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#SINK_ROLE)"]
            #[deprecated]
            pub const SINK_ROLE: i32 = 2;
            #[doc = "public static final [SOURCE_ROLE](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#SOURCE_ROLE)"]
            #[deprecated]
            pub const SOURCE_ROLE: i32 = 1;
            #[doc = "public static final [STATE_CHANNEL_CONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#STATE_CHANNEL_CONNECTED)"]
            #[deprecated]
            pub const STATE_CHANNEL_CONNECTED: i32 = 2;
            #[doc = "public static final [STATE_CHANNEL_CONNECTING](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#STATE_CHANNEL_CONNECTING)"]
            #[deprecated]
            pub const STATE_CHANNEL_CONNECTING: i32 = 1;
            #[doc = "public static final [STATE_CHANNEL_DISCONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#STATE_CHANNEL_DISCONNECTED)"]
            #[deprecated]
            pub const STATE_CHANNEL_DISCONNECTED: i32 = 0;
            #[doc = "public static final [STATE_CHANNEL_DISCONNECTING](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#STATE_CHANNEL_DISCONNECTING)"]
            #[deprecated]
            pub const STATE_CHANNEL_DISCONNECTING: i32 = 3;
        }
        #[doc = "final class [BluetoothHealthAppConfiguration](https://developer.android.com/reference/android/bluetooth/BluetoothHealthAppConfiguration.html)"]
        #[deprecated]
        pub enum BluetoothHealthAppConfiguration {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothHealthAppConfiguration {}
        unsafe impl ::java_spaghetti::JniType for BluetoothHealthAppConfiguration {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothHealthAppConfiguration")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothHealthAppConfiguration {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothHealthAppConfiguration {}
        impl BluetoothHealthAppConfiguration {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothHealthAppConfiguration"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothHealthAppConfiguration.html#describeContents())"]
            #[deprecated]
            pub fn describeContents<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"describeContents",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDataType](https://developer.android.com/reference/android/bluetooth/BluetoothHealthAppConfiguration.html#getDataType())"]
            #[deprecated]
            pub fn getDataType<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDataType",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getName](https://developer.android.com/reference/android/bluetooth/BluetoothHealthAppConfiguration.html#getName())"]
            #[deprecated]
            pub fn getName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getRole](https://developer.android.com/reference/android/bluetooth/BluetoothHealthAppConfiguration.html#getRole())"]
            #[deprecated]
            pub fn getRole<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getRole",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "class [BluetoothHealthCallback](https://developer.android.com/reference/android/bluetooth/BluetoothHealthCallback.html)"]
        #[deprecated]
        pub enum BluetoothHealthCallback {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothHealthCallback {}
        unsafe impl ::java_spaghetti::JniType for BluetoothHealthCallback {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothHealthCallback")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothHealthCallback {}
        impl BluetoothHealthCallback {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothHealthCallback"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[BluetoothHealthCallback](https://developer.android.com/reference/android/bluetooth/BluetoothHealthCallback.html#BluetoothHealthCallback())"]
            #[deprecated]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onHealthAppConfigurationStatusChange](https://developer.android.com/reference/android/bluetooth/BluetoothHealthCallback.html#onHealthAppConfigurationStatusChange(android.bluetooth.BluetoothHealthAppConfiguration,%20int))"]
            #[deprecated]
            pub fn onHealthAppConfigurationStatusChange<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothHealthAppConfiguration>,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onHealthAppConfigurationStatusChange",
                                c"(Landroid/bluetooth/BluetoothHealthAppConfiguration;I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "final class [BluetoothHearingAid](https://developer.android.com/reference/android/bluetooth/BluetoothHearingAid.html)"]
        pub enum BluetoothHearingAid {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothHearingAid {}
        unsafe impl ::java_spaghetti::JniType for BluetoothHearingAid {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothHearingAid")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<BluetoothProfile> for BluetoothHearingAid {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothHearingAid {}
        impl BluetoothHearingAid {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothHearingAid"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothHearingAid.html#getConnectedDevices())"]
            pub fn getConnectedDevices<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectedDevices",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothHearingAid.html#getDevicesMatchingConnectionStates(int[]))"]
            pub fn getDevicesMatchingConnectionStates<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDevicesMatchingConnectionStates",
                                c"([I)Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothHearingAid.html#getConnectionState(android.bluetooth.BluetoothDevice))"]
            pub fn getConnectionState<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectionState",
                                c"(Landroid/bluetooth/BluetoothDevice;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [ACTION_CONNECTION_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothHearingAid.html#ACTION_CONNECTION_STATE_CHANGED)"]
            pub const ACTION_CONNECTION_STATE_CHANGED: &'static str =
                "android.bluetooth.hearingaid.profile.action.CONNECTION_STATE_CHANGED";
        }
        #[doc = "final class [BluetoothHidDevice](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html)"]
        pub enum BluetoothHidDevice {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothHidDevice {}
        unsafe impl ::java_spaghetti::JniType for BluetoothHidDevice {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothHidDevice")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<BluetoothProfile> for BluetoothHidDevice {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothHidDevice {}
        impl BluetoothHidDevice {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothHidDevice"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#getConnectedDevices())"]
            pub fn getConnectedDevices<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectedDevices",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#getDevicesMatchingConnectionStates(int[]))"]
            pub fn getDevicesMatchingConnectionStates<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDevicesMatchingConnectionStates",
                                c"([I)Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#getConnectionState(android.bluetooth.BluetoothDevice))"]
            pub fn getConnectionState<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectionState",
                                c"(Landroid/bluetooth/BluetoothDevice;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[unregisterApp](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#unregisterApp())"]
            pub fn unregisterApp<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"unregisterApp",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[sendReport](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#sendReport(android.bluetooth.BluetoothDevice,%20int,%20byte[]))"]
            pub fn sendReport<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"sendReport",
                                c"(Landroid/bluetooth/BluetoothDevice;I[B)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[replyReport](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#replyReport(android.bluetooth.BluetoothDevice,%20byte,%20byte,%20byte[]))"]
            pub fn replyReport<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i8,
                arg2: i8,
                arg3: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"replyReport",
                                c"(Landroid/bluetooth/BluetoothDevice;BB[B)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[reportError](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#reportError(android.bluetooth.BluetoothDevice,%20byte))"]
            pub fn reportError<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i8,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"reportError",
                                c"(Landroid/bluetooth/BluetoothDevice;B)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[connect](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#connect(android.bluetooth.BluetoothDevice))"]
            pub fn connect<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"connect",
                                c"(Landroid/bluetooth/BluetoothDevice;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[disconnect](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#disconnect(android.bluetooth.BluetoothDevice))"]
            pub fn disconnect<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"disconnect",
                                c"(Landroid/bluetooth/BluetoothDevice;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [ACTION_CONNECTION_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ACTION_CONNECTION_STATE_CHANGED)"]
            pub const ACTION_CONNECTION_STATE_CHANGED: &'static str =
                "android.bluetooth.hiddevice.profile.action.CONNECTION_STATE_CHANGED";
            #[doc = "public static final [ERROR_RSP_INVALID_PARAM](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ERROR_RSP_INVALID_PARAM)"]
            pub const ERROR_RSP_INVALID_PARAM: i8 = 4;
            #[doc = "public static final [ERROR_RSP_INVALID_RPT_ID](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ERROR_RSP_INVALID_RPT_ID)"]
            pub const ERROR_RSP_INVALID_RPT_ID: i8 = 2;
            #[doc = "public static final [ERROR_RSP_NOT_READY](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ERROR_RSP_NOT_READY)"]
            pub const ERROR_RSP_NOT_READY: i8 = 1;
            #[doc = "public static final [ERROR_RSP_SUCCESS](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ERROR_RSP_SUCCESS)"]
            pub const ERROR_RSP_SUCCESS: i8 = 0;
            #[doc = "public static final [ERROR_RSP_UNKNOWN](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ERROR_RSP_UNKNOWN)"]
            pub const ERROR_RSP_UNKNOWN: i8 = 14;
            #[doc = "public static final [ERROR_RSP_UNSUPPORTED_REQ](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ERROR_RSP_UNSUPPORTED_REQ)"]
            pub const ERROR_RSP_UNSUPPORTED_REQ: i8 = 3;
            #[doc = "public static final [PROTOCOL_BOOT_MODE](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#PROTOCOL_BOOT_MODE)"]
            pub const PROTOCOL_BOOT_MODE: i8 = 0;
            #[doc = "public static final [PROTOCOL_REPORT_MODE](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#PROTOCOL_REPORT_MODE)"]
            pub const PROTOCOL_REPORT_MODE: i8 = 1;
            #[doc = "public static final [REPORT_TYPE_FEATURE](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#REPORT_TYPE_FEATURE)"]
            pub const REPORT_TYPE_FEATURE: i8 = 3;
            #[doc = "public static final [REPORT_TYPE_INPUT](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#REPORT_TYPE_INPUT)"]
            pub const REPORT_TYPE_INPUT: i8 = 1;
            #[doc = "public static final [REPORT_TYPE_OUTPUT](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#REPORT_TYPE_OUTPUT)"]
            pub const REPORT_TYPE_OUTPUT: i8 = 2;
            #[doc = "public static final [SUBCLASS1_COMBO](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS1_COMBO)"]
            pub const SUBCLASS1_COMBO: i8 = -64;
            #[doc = "public static final [SUBCLASS1_KEYBOARD](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS1_KEYBOARD)"]
            pub const SUBCLASS1_KEYBOARD: i8 = 64;
            #[doc = "public static final [SUBCLASS1_MOUSE](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS1_MOUSE)"]
            pub const SUBCLASS1_MOUSE: i8 = -128;
            #[doc = "public static final [SUBCLASS1_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS1_NONE)"]
            pub const SUBCLASS1_NONE: i8 = 0;
            #[doc = "public static final [SUBCLASS2_CARD_READER](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_CARD_READER)"]
            pub const SUBCLASS2_CARD_READER: i8 = 6;
            #[doc = "public static final [SUBCLASS2_DIGITIZER_TABLET](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_DIGITIZER_TABLET)"]
            pub const SUBCLASS2_DIGITIZER_TABLET: i8 = 5;
            #[doc = "public static final [SUBCLASS2_GAMEPAD](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_GAMEPAD)"]
            pub const SUBCLASS2_GAMEPAD: i8 = 2;
            #[doc = "public static final [SUBCLASS2_JOYSTICK](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_JOYSTICK)"]
            pub const SUBCLASS2_JOYSTICK: i8 = 1;
            #[doc = "public static final [SUBCLASS2_REMOTE_CONTROL](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_REMOTE_CONTROL)"]
            pub const SUBCLASS2_REMOTE_CONTROL: i8 = 3;
            #[doc = "public static final [SUBCLASS2_SENSING_DEVICE](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_SENSING_DEVICE)"]
            pub const SUBCLASS2_SENSING_DEVICE: i8 = 4;
            #[doc = "public static final [SUBCLASS2_UNCATEGORIZED](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_UNCATEGORIZED)"]
            pub const SUBCLASS2_UNCATEGORIZED: i8 = 0;
        }
        #[doc = "final class [BluetoothHidDeviceAppQosSettings](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html)"]
        pub enum BluetoothHidDeviceAppQosSettings {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothHidDeviceAppQosSettings {}
        unsafe impl ::java_spaghetti::JniType for BluetoothHidDeviceAppQosSettings {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothHidDeviceAppQosSettings")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothHidDeviceAppQosSettings {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothHidDeviceAppQosSettings {}
        impl BluetoothHidDeviceAppQosSettings {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothHidDeviceAppQosSettings"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[BluetoothHidDeviceAppQosSettings](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#BluetoothHidDeviceAppQosSettings(int,%20int,%20int,%20int,%20int,%20int))"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: i32,
                arg1: i32,
                arg2: i32,
                arg3: i32,
                arg4: i32,
                arg5: i32,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(IIIIII)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getServiceType](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#getServiceType())"]
            pub fn getServiceType<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getServiceType",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getTokenRate](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#getTokenRate())"]
            pub fn getTokenRate<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getTokenRate",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getTokenBucketSize](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#getTokenBucketSize())"]
            pub fn getTokenBucketSize<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getTokenBucketSize",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getPeakBandwidth](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#getPeakBandwidth())"]
            pub fn getPeakBandwidth<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getPeakBandwidth",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getLatency](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#getLatency())"]
            pub fn getLatency<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getLatency",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDelayVariation](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#getDelayVariation())"]
            pub fn getDelayVariation<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDelayVariation",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#describeContents())"]
            pub fn describeContents<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"describeContents",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [MAX](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#MAX)"]
            pub const MAX: i32 = -1;
            #[doc = "public static final [SERVICE_BEST_EFFORT](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#SERVICE_BEST_EFFORT)"]
            pub const SERVICE_BEST_EFFORT: i32 = 1;
            #[doc = "public static final [SERVICE_GUARANTEED](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#SERVICE_GUARANTEED)"]
            pub const SERVICE_GUARANTEED: i32 = 2;
            #[doc = "public static final [SERVICE_NO_TRAFFIC](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#SERVICE_NO_TRAFFIC)"]
            pub const SERVICE_NO_TRAFFIC: i32 = 0;
        }
        #[doc = "final class [BluetoothHidDeviceAppSdpSettings](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppSdpSettings.html)"]
        pub enum BluetoothHidDeviceAppSdpSettings {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothHidDeviceAppSdpSettings {}
        unsafe impl ::java_spaghetti::JniType for BluetoothHidDeviceAppSdpSettings {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothHidDeviceAppSdpSettings")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothHidDeviceAppSdpSettings {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothHidDeviceAppSdpSettings {}
        impl BluetoothHidDeviceAppSdpSettings {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothHidDeviceAppSdpSettings"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[BluetoothHidDeviceAppSdpSettings](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppSdpSettings.html#BluetoothHidDeviceAppSdpSettings(java.lang.String,%20java.lang.String,%20java.lang.String,%20byte,%20byte[]))"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg2: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg3: i8,
                arg4: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;B[B)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getName](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppSdpSettings.html#getName())"]
            pub fn getName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDescription](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppSdpSettings.html#getDescription())"]
            pub fn getDescription<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDescription",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getProvider](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppSdpSettings.html#getProvider())"]
            pub fn getProvider<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getProvider",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getSubclass](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppSdpSettings.html#getSubclass())"]
            pub fn getSubclass<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i8, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getSubclass",
                                c"()B",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_byte_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDescriptors](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppSdpSettings.html#getDescriptors())"]
            pub fn getDescriptors<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDescriptors",
                                c"()[B",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppSdpSettings.html#describeContents())"]
            pub fn describeContents<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"describeContents",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "class [BluetoothHidDevice.Callback](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html)"]
        pub enum BluetoothHidDevice_Callback {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothHidDevice_Callback {}
        unsafe impl ::java_spaghetti::JniType for BluetoothHidDevice_Callback {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothHidDevice$Callback")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothHidDevice_Callback {}
        impl BluetoothHidDevice_Callback {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothHidDevice$Callback"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[Callback](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#Callback())"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onAppStatusChanged](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onAppStatusChanged(android.bluetooth.BluetoothDevice,%20boolean))"]
            pub fn onAppStatusChanged<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onAppStatusChanged",
                                c"(Landroid/bluetooth/BluetoothDevice;Z)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onConnectionStateChanged](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onConnectionStateChanged(android.bluetooth.BluetoothDevice,%20int))"]
            pub fn onConnectionStateChanged<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onConnectionStateChanged",
                                c"(Landroid/bluetooth/BluetoothDevice;I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onGetReport](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onGetReport(android.bluetooth.BluetoothDevice,%20byte,%20byte,%20int))"]
            pub fn onGetReport<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i8,
                arg2: i8,
                arg3: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onGetReport",
                                c"(Landroid/bluetooth/BluetoothDevice;BBI)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onSetReport](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onSetReport(android.bluetooth.BluetoothDevice,%20byte,%20byte,%20byte[]))"]
            pub fn onSetReport<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i8,
                arg2: i8,
                arg3: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onSetReport",
                                c"(Landroid/bluetooth/BluetoothDevice;BB[B)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onSetProtocol](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onSetProtocol(android.bluetooth.BluetoothDevice,%20byte))"]
            pub fn onSetProtocol<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i8,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onSetProtocol",
                                c"(Landroid/bluetooth/BluetoothDevice;B)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onInterruptData](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onInterruptData(android.bluetooth.BluetoothDevice,%20byte,%20byte[]))"]
            pub fn onInterruptData<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i8,
                arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onInterruptData",
                                c"(Landroid/bluetooth/BluetoothDevice;B[B)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onVirtualCableUnplug](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onVirtualCableUnplug(android.bluetooth.BluetoothDevice))"]
            pub fn onVirtualCableUnplug<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onVirtualCableUnplug",
                                c"(Landroid/bluetooth/BluetoothDevice;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "final class [BluetoothLeAudio](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudio.html)"]
        pub enum BluetoothLeAudio {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothLeAudio {}
        unsafe impl ::java_spaghetti::JniType for BluetoothLeAudio {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothLeAudio")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<BluetoothProfile> for BluetoothLeAudio {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothLeAudio {}
        impl BluetoothLeAudio {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothLeAudio"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[close](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudio.html#close())"]
            pub fn close<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"close",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getConnectedGroupLeadDevice](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudio.html#getConnectedGroupLeadDevice(int))"]
            pub fn getConnectedGroupLeadDevice<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothDevice>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectedGroupLeadDevice",
                                c"(I)Landroid/bluetooth/BluetoothDevice;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudio.html#getConnectedDevices())"]
            pub fn getConnectedDevices<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectedDevices",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudio.html#getDevicesMatchingConnectionStates(int[]))"]
            pub fn getDevicesMatchingConnectionStates<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDevicesMatchingConnectionStates",
                                c"([I)Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudio.html#getConnectionState(android.bluetooth.BluetoothDevice))"]
            pub fn getConnectionState<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectionState",
                                c"(Landroid/bluetooth/BluetoothDevice;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getGroupId](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudio.html#getGroupId(android.bluetooth.BluetoothDevice))"]
            pub fn getGroupId<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getGroupId",
                                c"(Landroid/bluetooth/BluetoothDevice;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [ACTION_LE_AUDIO_CONNECTION_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudio.html#ACTION_LE_AUDIO_CONNECTION_STATE_CHANGED)"]
            pub const ACTION_LE_AUDIO_CONNECTION_STATE_CHANGED: &'static str =
                "android.bluetooth.action.LE_AUDIO_CONNECTION_STATE_CHANGED";
            #[doc = "public static final [GROUP_ID_INVALID](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudio.html#GROUP_ID_INVALID)"]
            pub const GROUP_ID_INVALID: i32 = -1;
        }
        #[doc = "final class [BluetoothLeAudioCodecConfig](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html)"]
        pub enum BluetoothLeAudioCodecConfig {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothLeAudioCodecConfig {}
        unsafe impl ::java_spaghetti::JniType for BluetoothLeAudioCodecConfig {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothLeAudioCodecConfig")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothLeAudioCodecConfig {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothLeAudioCodecConfig {}
        impl BluetoothLeAudioCodecConfig {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothLeAudioCodecConfig"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#describeContents())"]
            pub fn describeContents<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"describeContents",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toString](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#toString())"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getCodecType](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#getCodecType())"]
            pub fn getCodecType<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCodecType",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getCodecName](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#getCodecName())"]
            pub fn getCodecName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCodecName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getCodecPriority](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#getCodecPriority())"]
            pub fn getCodecPriority<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCodecPriority",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getSampleRate](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#getSampleRate())"]
            pub fn getSampleRate<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getSampleRate",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getBitsPerSample](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#getBitsPerSample())"]
            pub fn getBitsPerSample<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getBitsPerSample",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getChannelCount](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#getChannelCount())"]
            pub fn getChannelCount<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getChannelCount",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getFrameDuration](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#getFrameDuration())"]
            pub fn getFrameDuration<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getFrameDuration",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getOctetsPerFrame](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#getOctetsPerFrame())"]
            pub fn getOctetsPerFrame<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getOctetsPerFrame",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getMinOctetsPerFrame](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#getMinOctetsPerFrame())"]
            pub fn getMinOctetsPerFrame<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getMinOctetsPerFrame",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getMaxOctetsPerFrame](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#getMaxOctetsPerFrame())"]
            pub fn getMaxOctetsPerFrame<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getMaxOctetsPerFrame",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[equals](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#equals(java.lang.Object))"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[hashCode](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#hashCode())"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"hashCode",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [BITS_PER_SAMPLE_16](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#BITS_PER_SAMPLE_16)"]
            pub const BITS_PER_SAMPLE_16: i32 = 1;
            #[doc = "public static final [BITS_PER_SAMPLE_24](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#BITS_PER_SAMPLE_24)"]
            pub const BITS_PER_SAMPLE_24: i32 = 2;
            #[doc = "public static final [BITS_PER_SAMPLE_32](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#BITS_PER_SAMPLE_32)"]
            pub const BITS_PER_SAMPLE_32: i32 = 8;
            #[doc = "public static final [BITS_PER_SAMPLE_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#BITS_PER_SAMPLE_NONE)"]
            pub const BITS_PER_SAMPLE_NONE: i32 = 0;
            #[doc = "public static final [CHANNEL_COUNT_1](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#CHANNEL_COUNT_1)"]
            pub const CHANNEL_COUNT_1: i32 = 1;
            #[doc = "public static final [CHANNEL_COUNT_2](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#CHANNEL_COUNT_2)"]
            pub const CHANNEL_COUNT_2: i32 = 2;
            #[doc = "public static final [CHANNEL_COUNT_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#CHANNEL_COUNT_NONE)"]
            pub const CHANNEL_COUNT_NONE: i32 = 0;
            #[doc = "public static final [CODEC_PRIORITY_DEFAULT](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#CODEC_PRIORITY_DEFAULT)"]
            pub const CODEC_PRIORITY_DEFAULT: i32 = 0;
            #[doc = "public static final [CODEC_PRIORITY_DISABLED](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#CODEC_PRIORITY_DISABLED)"]
            pub const CODEC_PRIORITY_DISABLED: i32 = -1;
            #[doc = "public static final [CODEC_PRIORITY_HIGHEST](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#CODEC_PRIORITY_HIGHEST)"]
            pub const CODEC_PRIORITY_HIGHEST: i32 = 1000000;
            #[doc = "public static final [FRAME_DURATION_10000](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#FRAME_DURATION_10000)"]
            pub const FRAME_DURATION_10000: i32 = 2;
            #[doc = "public static final [FRAME_DURATION_7500](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#FRAME_DURATION_7500)"]
            pub const FRAME_DURATION_7500: i32 = 1;
            #[doc = "public static final [FRAME_DURATION_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#FRAME_DURATION_NONE)"]
            pub const FRAME_DURATION_NONE: i32 = 0;
            #[doc = "public static final [SAMPLE_RATE_11025](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_11025)"]
            pub const SAMPLE_RATE_11025: i32 = 2;
            #[doc = "public static final [SAMPLE_RATE_16000](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_16000)"]
            pub const SAMPLE_RATE_16000: i32 = 4;
            #[doc = "public static final [SAMPLE_RATE_176400](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_176400)"]
            pub const SAMPLE_RATE_176400: i32 = 1024;
            #[doc = "public static final [SAMPLE_RATE_192000](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_192000)"]
            pub const SAMPLE_RATE_192000: i32 = 2048;
            #[doc = "public static final [SAMPLE_RATE_22050](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_22050)"]
            pub const SAMPLE_RATE_22050: i32 = 8;
            #[doc = "public static final [SAMPLE_RATE_24000](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_24000)"]
            pub const SAMPLE_RATE_24000: i32 = 16;
            #[doc = "public static final [SAMPLE_RATE_32000](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_32000)"]
            pub const SAMPLE_RATE_32000: i32 = 32;
            #[doc = "public static final [SAMPLE_RATE_384000](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_384000)"]
            pub const SAMPLE_RATE_384000: i32 = 4096;
            #[doc = "public static final [SAMPLE_RATE_44100](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_44100)"]
            pub const SAMPLE_RATE_44100: i32 = 64;
            #[doc = "public static final [SAMPLE_RATE_48000](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_48000)"]
            pub const SAMPLE_RATE_48000: i32 = 128;
            #[doc = "public static final [SAMPLE_RATE_8000](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_8000)"]
            pub const SAMPLE_RATE_8000: i32 = 1;
            #[doc = "public static final [SAMPLE_RATE_88200](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_88200)"]
            pub const SAMPLE_RATE_88200: i32 = 256;
            #[doc = "public static final [SAMPLE_RATE_96000](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_96000)"]
            pub const SAMPLE_RATE_96000: i32 = 512;
            #[doc = "public static final [SAMPLE_RATE_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_NONE)"]
            pub const SAMPLE_RATE_NONE: i32 = 0;
            #[doc = "public static final [SOURCE_CODEC_TYPE_INVALID](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SOURCE_CODEC_TYPE_INVALID)"]
            pub const SOURCE_CODEC_TYPE_INVALID: i32 = 1000000;
            #[doc = "public static final [SOURCE_CODEC_TYPE_LC3](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SOURCE_CODEC_TYPE_LC3)"]
            pub const SOURCE_CODEC_TYPE_LC3: i32 = 0;
        }
        #[doc = "final class [BluetoothLeAudioCodecConfig.Builder](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html)"]
        pub enum BluetoothLeAudioCodecConfig_Builder {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothLeAudioCodecConfig_Builder {}
        unsafe impl ::java_spaghetti::JniType for BluetoothLeAudioCodecConfig_Builder {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothLeAudioCodecConfig$Builder")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothLeAudioCodecConfig_Builder {}
        impl BluetoothLeAudioCodecConfig_Builder {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothLeAudioCodecConfig$Builder"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[Builder](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#Builder())"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[Builder](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#Builder(android.bluetooth.BluetoothLeAudioCodecConfig))"]
            pub fn new_BluetoothLeAudioCodecConfig<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothLeAudioCodecConfig>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Landroid/bluetooth/BluetoothLeAudioCodecConfig;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setCodecType](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#setCodecType(int))"]
            pub fn setCodecType<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setCodecType",
                                c"(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setCodecPriority](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#setCodecPriority(int))"]
            pub fn setCodecPriority<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setCodecPriority",
                                c"(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setSampleRate](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#setSampleRate(int))"]
            pub fn setSampleRate<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setSampleRate",
                                c"(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setBitsPerSample](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#setBitsPerSample(int))"]
            pub fn setBitsPerSample<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setBitsPerSample",
                                c"(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setChannelCount](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#setChannelCount(int))"]
            pub fn setChannelCount<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setChannelCount",
                                c"(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setFrameDuration](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#setFrameDuration(int))"]
            pub fn setFrameDuration<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setFrameDuration",
                                c"(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setOctetsPerFrame](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#setOctetsPerFrame(int))"]
            pub fn setOctetsPerFrame<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setOctetsPerFrame",
                                c"(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setMinOctetsPerFrame](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#setMinOctetsPerFrame(int))"]
            pub fn setMinOctetsPerFrame<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setMinOctetsPerFrame",
                                c"(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setMaxOctetsPerFrame](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#setMaxOctetsPerFrame(int))"]
            pub fn setMaxOctetsPerFrame<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setMaxOctetsPerFrame",
                                c"(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[build](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#build())"]
            pub fn build<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"build",
                                c"()Landroid/bluetooth/BluetoothLeAudioCodecConfig;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "final class [BluetoothLeAudioCodecStatus](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html)"]
        pub enum BluetoothLeAudioCodecStatus {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothLeAudioCodecStatus {}
        unsafe impl ::java_spaghetti::JniType for BluetoothLeAudioCodecStatus {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothLeAudioCodecStatus")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothLeAudioCodecStatus {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothLeAudioCodecStatus {}
        impl BluetoothLeAudioCodecStatus {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothLeAudioCodecStatus"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[BluetoothLeAudioCodecStatus](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#BluetoothLeAudioCodecStatus(android.bluetooth.BluetoothLeAudioCodecConfig,%20android.bluetooth.BluetoothLeAudioCodecConfig,%20java.util.List,%20java.util.List,%20java.util.List,%20java.util.List))"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothLeAudioCodecConfig>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothLeAudioCodecConfig>,
                arg2: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
                arg3: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
                arg4: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
                arg5: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"<init>" , c"(Landroid/bluetooth/BluetoothLeAudioCodecConfig;Landroid/bluetooth/BluetoothLeAudioCodecConfig;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V" ))). as_raw ();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[equals](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#equals(java.lang.Object))"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isInputCodecConfigSelectable](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#isInputCodecConfigSelectable(android.bluetooth.BluetoothLeAudioCodecConfig))"]
            pub fn isInputCodecConfigSelectable<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothLeAudioCodecConfig>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isInputCodecConfigSelectable",
                                c"(Landroid/bluetooth/BluetoothLeAudioCodecConfig;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isOutputCodecConfigSelectable](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#isOutputCodecConfigSelectable(android.bluetooth.BluetoothLeAudioCodecConfig))"]
            pub fn isOutputCodecConfigSelectable<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothLeAudioCodecConfig>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isOutputCodecConfigSelectable",
                                c"(Landroid/bluetooth/BluetoothLeAudioCodecConfig;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[hashCode](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#hashCode())"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"hashCode",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toString](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#toString())"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#describeContents())"]
            pub fn describeContents<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"describeContents",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getInputCodecConfig](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#getInputCodecConfig())"]
            pub fn getInputCodecConfig<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getInputCodecConfig",
                                c"()Landroid/bluetooth/BluetoothLeAudioCodecConfig;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getOutputCodecConfig](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#getOutputCodecConfig())"]
            pub fn getOutputCodecConfig<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getOutputCodecConfig",
                                c"()Landroid/bluetooth/BluetoothLeAudioCodecConfig;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getInputCodecLocalCapabilities](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#getInputCodecLocalCapabilities())"]
            pub fn getInputCodecLocalCapabilities<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getInputCodecLocalCapabilities",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getOutputCodecLocalCapabilities](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#getOutputCodecLocalCapabilities())"]
            pub fn getOutputCodecLocalCapabilities<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getOutputCodecLocalCapabilities",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getInputCodecSelectableCapabilities](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#getInputCodecSelectableCapabilities())"]
            pub fn getInputCodecSelectableCapabilities<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getInputCodecSelectableCapabilities",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getOutputCodecSelectableCapabilities](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#getOutputCodecSelectableCapabilities())"]
            pub fn getOutputCodecSelectableCapabilities<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getOutputCodecSelectableCapabilities",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [EXTRA_LE_AUDIO_CODEC_STATUS](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#EXTRA_LE_AUDIO_CODEC_STATUS)"]
            pub const EXTRA_LE_AUDIO_CODEC_STATUS: &'static str = "android.bluetooth.extra.LE_AUDIO_CODEC_STATUS";
        }
        #[doc = "final class [BluetoothManager](https://developer.android.com/reference/android/bluetooth/BluetoothManager.html)"]
        pub enum BluetoothManager {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothManager {}
        unsafe impl ::java_spaghetti::JniType for BluetoothManager {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothManager")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothManager {}
        impl BluetoothManager {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothManager"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[getAdapter](https://developer.android.com/reference/android/bluetooth/BluetoothManager.html#getAdapter())"]
            pub fn getAdapter<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothAdapter>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getAdapter",
                                c"()Landroid/bluetooth/BluetoothAdapter;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothManager.html#getConnectionState(android.bluetooth.BluetoothDevice,%20int))"]
            pub fn getConnectionState<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectionState",
                                c"(Landroid/bluetooth/BluetoothDevice;I)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothManager.html#getConnectedDevices(int))"]
            pub fn getConnectedDevices<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectedDevices",
                                c"(I)Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothManager.html#getDevicesMatchingConnectionStates(int,%20int[]))"]
            pub fn getDevicesMatchingConnectionStates<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDevicesMatchingConnectionStates",
                                c"(I[I)Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[openGattServer](https://developer.android.com/reference/android/bluetooth/BluetoothManager.html#openGattServer(android.content.Context,%20android.bluetooth.BluetoothGattServerCallback))"]
            pub fn openGattServer<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::content::Context>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattServerCallback>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothGattServer>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"openGattServer" , c"(Landroid/content/Context;Landroid/bluetooth/BluetoothGattServerCallback;)Landroid/bluetooth/BluetoothGattServer;" ))). as_raw ();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "interface [BluetoothProfile](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html)"]
        pub enum BluetoothProfile {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothProfile {}
        unsafe impl ::java_spaghetti::JniType for BluetoothProfile {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothProfile")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothProfile {}
        impl BluetoothProfile {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothProfile"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#getConnectedDevices())"]
            pub fn getConnectedDevices<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectedDevices",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#getDevicesMatchingConnectionStates(int[]))"]
            pub fn getDevicesMatchingConnectionStates<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDevicesMatchingConnectionStates",
                                c"([I)Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#getConnectionState(android.bluetooth.BluetoothDevice))"]
            pub fn getConnectionState<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectionState",
                                c"(Landroid/bluetooth/BluetoothDevice;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [A2DP](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#A2DP)"]
            pub const A2DP: i32 = 2;
            #[doc = "public static final [CSIP_SET_COORDINATOR](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#CSIP_SET_COORDINATOR)"]
            pub const CSIP_SET_COORDINATOR: i32 = 25;
            #[doc = "public static final [EXTRA_PREVIOUS_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#EXTRA_PREVIOUS_STATE)"]
            pub const EXTRA_PREVIOUS_STATE: &'static str = "android.bluetooth.profile.extra.PREVIOUS_STATE";
            #[doc = "public static final [EXTRA_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#EXTRA_STATE)"]
            pub const EXTRA_STATE: &'static str = "android.bluetooth.profile.extra.STATE";
            #[doc = "public static final [GATT](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#GATT)"]
            pub const GATT: i32 = 7;
            #[doc = "public static final [GATT_SERVER](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#GATT_SERVER)"]
            pub const GATT_SERVER: i32 = 8;
            #[doc = "public static final [HAP_CLIENT](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#HAP_CLIENT)"]
            pub const HAP_CLIENT: i32 = 28;
            #[doc = "public static final [HEADSET](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#HEADSET)"]
            pub const HEADSET: i32 = 1;
            #[doc = "public static final [HEALTH](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#HEALTH)"]
            #[deprecated]
            pub const HEALTH: i32 = 3;
            #[doc = "public static final [HEARING_AID](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#HEARING_AID)"]
            pub const HEARING_AID: i32 = 21;
            #[doc = "public static final [HID_DEVICE](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#HID_DEVICE)"]
            pub const HID_DEVICE: i32 = 19;
            #[doc = "public static final [LE_AUDIO](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#LE_AUDIO)"]
            pub const LE_AUDIO: i32 = 22;
            #[doc = "public static final [SAP](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#SAP)"]
            pub const SAP: i32 = 10;
            #[doc = "public static final [STATE_CONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#STATE_CONNECTED)"]
            pub const STATE_CONNECTED: i32 = 2;
            #[doc = "public static final [STATE_CONNECTING](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#STATE_CONNECTING)"]
            pub const STATE_CONNECTING: i32 = 1;
            #[doc = "public static final [STATE_DISCONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#STATE_DISCONNECTED)"]
            pub const STATE_DISCONNECTED: i32 = 0;
            #[doc = "public static final [STATE_DISCONNECTING](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#STATE_DISCONNECTING)"]
            pub const STATE_DISCONNECTING: i32 = 3;
        }
        #[doc = "interface [BluetoothProfile.ServiceListener](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.ServiceListener.html)"]
        pub enum BluetoothProfile_ServiceListener {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothProfile_ServiceListener {}
        unsafe impl ::java_spaghetti::JniType for BluetoothProfile_ServiceListener {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothProfile$ServiceListener")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothProfile_ServiceListener {}
        impl BluetoothProfile_ServiceListener {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothProfile$ServiceListener"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[onServiceConnected](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.ServiceListener.html#onServiceConnected(int,%20android.bluetooth.BluetoothProfile))"]
            pub fn onServiceConnected<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<BluetoothProfile>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onServiceConnected",
                                c"(ILandroid/bluetooth/BluetoothProfile;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onServiceDisconnected](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.ServiceListener.html#onServiceDisconnected(int))"]
            pub fn onServiceDisconnected<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onServiceDisconnected",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "final class [BluetoothServerSocket](https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html)"]
        pub enum BluetoothServerSocket {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothServerSocket {}
        unsafe impl ::java_spaghetti::JniType for BluetoothServerSocket {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothServerSocket")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothServerSocket {}
        impl BluetoothServerSocket {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothServerSocket"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[accept](https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html#accept())"]
            pub fn accept<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothSocket>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"accept",
                                c"()Landroid/bluetooth/BluetoothSocket;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[accept](https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html#accept(int))"]
            pub fn accept_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothSocket>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"accept",
                                c"(I)Landroid/bluetooth/BluetoothSocket;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[close](https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html#close())"]
            pub fn close<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"close",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getPsm](https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html#getPsm())"]
            pub fn getPsm<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getPsm",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toString](https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html#toString())"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "final class [BluetoothSocket](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html)"]
        pub enum BluetoothSocket {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothSocket {}
        unsafe impl ::java_spaghetti::JniType for BluetoothSocket {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothSocket")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothSocket {}
        impl BluetoothSocket {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothSocket"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[getRemoteDevice](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#getRemoteDevice())"]
            pub fn getRemoteDevice<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothDevice>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getRemoteDevice",
                                c"()Landroid/bluetooth/BluetoothDevice;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getInputStream](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#getInputStream())"]
            pub fn getInputStream<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::io::InputStream>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getInputStream",
                                c"()Ljava/io/InputStream;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getOutputStream](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#getOutputStream())"]
            pub fn getOutputStream<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::io::OutputStream>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getOutputStream",
                                c"()Ljava/io/OutputStream;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isConnected](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#isConnected())"]
            pub fn isConnected<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isConnected",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[connect](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#connect())"]
            pub fn connect<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"connect",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[close](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#close())"]
            pub fn close<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"close",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getMaxTransmitPacketSize](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#getMaxTransmitPacketSize())"]
            pub fn getMaxTransmitPacketSize<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getMaxTransmitPacketSize",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getMaxReceivePacketSize](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#getMaxReceivePacketSize())"]
            pub fn getMaxReceivePacketSize<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getMaxReceivePacketSize",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getConnectionType](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#getConnectionType())"]
            pub fn getConnectionType<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getConnectionType",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toString](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#toString())"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [TYPE_L2CAP](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#TYPE_L2CAP)"]
            pub const TYPE_L2CAP: i32 = 3;
            #[doc = "public static final [TYPE_RFCOMM](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#TYPE_RFCOMM)"]
            pub const TYPE_RFCOMM: i32 = 1;
            #[doc = "public static final [TYPE_SCO](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#TYPE_SCO)"]
            pub const TYPE_SCO: i32 = 2;
        }
        #[doc = "class [BluetoothSocketException](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html)"]
        pub enum BluetoothSocketException {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothSocketException {}
        unsafe impl ::java_spaghetti::JniType for BluetoothSocketException {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothSocketException")
            }
        }
        impl BluetoothSocketException {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothSocketException"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[BluetoothSocketException](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#BluetoothSocketException(int,%20java.lang.String))"]
            pub fn new_int_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(ILjava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[BluetoothSocketException](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#BluetoothSocketException(int))"]
            pub fn new_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getErrorCode](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#getErrorCode())"]
            pub fn getErrorCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getErrorCode",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [BLUETOOTH_OFF_FAILURE](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#BLUETOOTH_OFF_FAILURE)"]
            pub const BLUETOOTH_OFF_FAILURE: i32 = 15;
            #[doc = "public static final [L2CAP_ACL_FAILURE](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#L2CAP_ACL_FAILURE)"]
            pub const L2CAP_ACL_FAILURE: i32 = 2;
            #[doc = "public static final [L2CAP_CLIENT_SECURITY_FAILURE](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#L2CAP_CLIENT_SECURITY_FAILURE)"]
            pub const L2CAP_CLIENT_SECURITY_FAILURE: i32 = 3;
            #[doc = "public static final [L2CAP_INSUFFICIENT_AUTHENTICATION](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#L2CAP_INSUFFICIENT_AUTHENTICATION)"]
            pub const L2CAP_INSUFFICIENT_AUTHENTICATION: i32 = 4;
            #[doc = "public static final [L2CAP_INSUFFICIENT_AUTHORIZATION](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#L2CAP_INSUFFICIENT_AUTHORIZATION)"]
            pub const L2CAP_INSUFFICIENT_AUTHORIZATION: i32 = 5;
            #[doc = "public static final [L2CAP_INSUFFICIENT_ENCRYPTION](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#L2CAP_INSUFFICIENT_ENCRYPTION)"]
            pub const L2CAP_INSUFFICIENT_ENCRYPTION: i32 = 7;
            #[doc = "public static final [L2CAP_INSUFFICIENT_ENCRYPT_KEY_SIZE](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#L2CAP_INSUFFICIENT_ENCRYPT_KEY_SIZE)"]
            pub const L2CAP_INSUFFICIENT_ENCRYPT_KEY_SIZE: i32 = 6;
            #[doc = "public static final [L2CAP_INVALID_PARAMETERS](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#L2CAP_INVALID_PARAMETERS)"]
            pub const L2CAP_INVALID_PARAMETERS: i32 = 11;
            #[doc = "public static final [L2CAP_INVALID_SOURCE_CID](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#L2CAP_INVALID_SOURCE_CID)"]
            pub const L2CAP_INVALID_SOURCE_CID: i32 = 8;
            #[doc = "public static final [L2CAP_NO_PSM_AVAILABLE](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#L2CAP_NO_PSM_AVAILABLE)"]
            pub const L2CAP_NO_PSM_AVAILABLE: i32 = 13;
            #[doc = "public static final [L2CAP_NO_RESOURCES](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#L2CAP_NO_RESOURCES)"]
            pub const L2CAP_NO_RESOURCES: i32 = 12;
            #[doc = "public static final [L2CAP_SOURCE_CID_ALREADY_ALLOCATED](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#L2CAP_SOURCE_CID_ALREADY_ALLOCATED)"]
            pub const L2CAP_SOURCE_CID_ALREADY_ALLOCATED: i32 = 9;
            #[doc = "public static final [L2CAP_TIMEOUT](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#L2CAP_TIMEOUT)"]
            pub const L2CAP_TIMEOUT: i32 = 14;
            #[doc = "public static final [L2CAP_UNACCEPTABLE_PARAMETERS](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#L2CAP_UNACCEPTABLE_PARAMETERS)"]
            pub const L2CAP_UNACCEPTABLE_PARAMETERS: i32 = 10;
            #[doc = "public static final [L2CAP_UNKNOWN](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#L2CAP_UNKNOWN)"]
            pub const L2CAP_UNKNOWN: i32 = 1;
            #[doc = "public static final [NULL_DEVICE](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#NULL_DEVICE)"]
            pub const NULL_DEVICE: i32 = 19;
            #[doc = "public static final [RPC_FAILURE](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#RPC_FAILURE)"]
            pub const RPC_FAILURE: i32 = 20;
            #[doc = "public static final [SOCKET_CLOSED](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#SOCKET_CLOSED)"]
            pub const SOCKET_CLOSED: i32 = 17;
            #[doc = "public static final [SOCKET_CONNECTION_FAILURE](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#SOCKET_CONNECTION_FAILURE)"]
            pub const SOCKET_CONNECTION_FAILURE: i32 = 18;
            #[doc = "public static final [SOCKET_MANAGER_FAILURE](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#SOCKET_MANAGER_FAILURE)"]
            pub const SOCKET_MANAGER_FAILURE: i32 = 16;
            #[doc = "public static final [UNIX_FILE_SOCKET_CREATION_FAILURE](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#UNIX_FILE_SOCKET_CREATION_FAILURE)"]
            pub const UNIX_FILE_SOCKET_CREATION_FAILURE: i32 = 21;
            #[doc = "public static final [UNSPECIFIED](https://developer.android.com/reference/android/bluetooth/BluetoothSocketException.html#UNSPECIFIED)"]
            pub const UNSPECIFIED: i32 = 0;
        }
        #[doc = "final class [BluetoothStatusCodes](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html)"]
        pub enum BluetoothStatusCodes {}
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothStatusCodes {}
        unsafe impl ::java_spaghetti::JniType for BluetoothStatusCodes {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/bluetooth/BluetoothStatusCodes")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothStatusCodes {}
        impl BluetoothStatusCodes {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/bluetooth/BluetoothStatusCodes"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "public static final [ERROR_BLUETOOTH_NOT_ALLOWED](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#ERROR_BLUETOOTH_NOT_ALLOWED)"]
            pub const ERROR_BLUETOOTH_NOT_ALLOWED: i32 = 2;
            #[doc = "public static final [ERROR_BLUETOOTH_NOT_ENABLED](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#ERROR_BLUETOOTH_NOT_ENABLED)"]
            pub const ERROR_BLUETOOTH_NOT_ENABLED: i32 = 1;
            #[doc = "public static final [ERROR_DEVICE_NOT_BONDED](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#ERROR_DEVICE_NOT_BONDED)"]
            pub const ERROR_DEVICE_NOT_BONDED: i32 = 3;
            #[doc = "public static final [ERROR_GATT_WRITE_NOT_ALLOWED](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#ERROR_GATT_WRITE_NOT_ALLOWED)"]
            pub const ERROR_GATT_WRITE_NOT_ALLOWED: i32 = 200;
            #[doc = "public static final [ERROR_GATT_WRITE_REQUEST_BUSY](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#ERROR_GATT_WRITE_REQUEST_BUSY)"]
            pub const ERROR_GATT_WRITE_REQUEST_BUSY: i32 = 201;
            #[doc = "public static final [ERROR_MISSING_BLUETOOTH_CONNECT_PERMISSION](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#ERROR_MISSING_BLUETOOTH_CONNECT_PERMISSION)"]
            pub const ERROR_MISSING_BLUETOOTH_CONNECT_PERMISSION: i32 = 6;
            #[doc = "public static final [ERROR_PROFILE_SERVICE_NOT_BOUND](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#ERROR_PROFILE_SERVICE_NOT_BOUND)"]
            pub const ERROR_PROFILE_SERVICE_NOT_BOUND: i32 = 9;
            #[doc = "public static final [ERROR_UNKNOWN](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#ERROR_UNKNOWN)"]
            pub const ERROR_UNKNOWN: i32 = 2147483647;
            #[doc = "public static final [FEATURE_NOT_CONFIGURED](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#FEATURE_NOT_CONFIGURED)"]
            pub const FEATURE_NOT_CONFIGURED: i32 = 30;
            #[doc = "public static final [FEATURE_NOT_SUPPORTED](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#FEATURE_NOT_SUPPORTED)"]
            pub const FEATURE_NOT_SUPPORTED: i32 = 11;
            #[doc = "public static final [FEATURE_SUPPORTED](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#FEATURE_SUPPORTED)"]
            pub const FEATURE_SUPPORTED: i32 = 10;
            #[doc = "public static final [SUCCESS](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#SUCCESS)"]
            pub const SUCCESS: i32 = 0;
        }
    }

    pub mod content {
        #[doc = "class [Context](https://developer.android.com/reference/android/content/Context.html)"]
        pub enum Context {}
        unsafe impl ::java_spaghetti::ReferenceType for Context {}
        unsafe impl ::java_spaghetti::JniType for Context {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/content/Context")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for Context {}
        impl Context {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/content/Context"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[Context](https://developer.android.com/reference/android/content/Context.html#Context())"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getApplicationContext](https://developer.android.com/reference/android/content/Context.html#getApplicationContext())"]
            pub fn getApplicationContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getApplicationContext",
                                c"()Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getString](https://developer.android.com/reference/android/content/Context.html#getString(int))"]
            pub fn getString_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getString",
                                c"(I)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getString](https://developer.android.com/reference/android/content/Context.html#getString(int,%20java.lang.Object...))"]
            pub fn getString_int_Object_array<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<
                        super::super::java::lang::Object,
                        super::super::java::lang::Throwable,
                    >,
                >,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getString",
                                c"(I[Ljava/lang/Object;)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getColor](https://developer.android.com/reference/android/content/Context.html#getColor(int))"]
            pub fn getColor<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getColor",
                                c"(I)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setTheme](https://developer.android.com/reference/android/content/Context.html#setTheme(int))"]
            pub fn setTheme<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setTheme",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getPackageName](https://developer.android.com/reference/android/content/Context.html#getPackageName())"]
            pub fn getPackageName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getPackageName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getOpPackageName](https://developer.android.com/reference/android/content/Context.html#getOpPackageName())"]
            pub fn getOpPackageName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getOpPackageName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getAttributionTag](https://developer.android.com/reference/android/content/Context.html#getAttributionTag())"]
            pub fn getAttributionTag<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getAttributionTag",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getPackageResourcePath](https://developer.android.com/reference/android/content/Context.html#getPackageResourcePath())"]
            pub fn getPackageResourcePath<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getPackageResourcePath",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getPackageCodePath](https://developer.android.com/reference/android/content/Context.html#getPackageCodePath())"]
            pub fn getPackageCodePath<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getPackageCodePath",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[moveSharedPreferencesFrom](https://developer.android.com/reference/android/content/Context.html#moveSharedPreferencesFrom(android.content.Context,%20java.lang.String))"]
            pub fn moveSharedPreferencesFrom<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Context>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"moveSharedPreferencesFrom",
                                c"(Landroid/content/Context;Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[deleteSharedPreferences](https://developer.android.com/reference/android/content/Context.html#deleteSharedPreferences(java.lang.String))"]
            pub fn deleteSharedPreferences<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"deleteSharedPreferences",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[deleteFile](https://developer.android.com/reference/android/content/Context.html#deleteFile(java.lang.String))"]
            pub fn deleteFile<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"deleteFile",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[fileList](https://developer.android.com/reference/android/content/Context.html#fileList())"]
            pub fn fileList<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<
                            super::super::java::lang::String,
                            super::super::java::lang::Throwable,
                        >,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"fileList",
                                c"()[Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[moveDatabaseFrom](https://developer.android.com/reference/android/content/Context.html#moveDatabaseFrom(android.content.Context,%20java.lang.String))"]
            pub fn moveDatabaseFrom<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Context>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"moveDatabaseFrom",
                                c"(Landroid/content/Context;Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[deleteDatabase](https://developer.android.com/reference/android/content/Context.html#deleteDatabase(java.lang.String))"]
            pub fn deleteDatabase<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"deleteDatabase",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[databaseList](https://developer.android.com/reference/android/content/Context.html#databaseList())"]
            pub fn databaseList<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<
                            super::super::java::lang::String,
                            super::super::java::lang::Throwable,
                        >,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"databaseList",
                                c"()[Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getWallpaperDesiredMinimumWidth](https://developer.android.com/reference/android/content/Context.html#getWallpaperDesiredMinimumWidth())"]
            #[deprecated]
            pub fn getWallpaperDesiredMinimumWidth<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getWallpaperDesiredMinimumWidth",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getWallpaperDesiredMinimumHeight](https://developer.android.com/reference/android/content/Context.html#getWallpaperDesiredMinimumHeight())"]
            #[deprecated]
            pub fn getWallpaperDesiredMinimumHeight<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getWallpaperDesiredMinimumHeight",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setWallpaper](https://developer.android.com/reference/android/content/Context.html#setWallpaper(java.io.InputStream))"]
            #[deprecated]
            pub fn setWallpaper_InputStream<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::io::InputStream>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setWallpaper",
                                c"(Ljava/io/InputStream;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[clearWallpaper](https://developer.android.com/reference/android/content/Context.html#clearWallpaper())"]
            #[deprecated]
            pub fn clearWallpaper<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"clearWallpaper",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getSystemService](https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String))"]
            pub fn getSystemService_String<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::Object>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getSystemService",
                                c"(Ljava/lang/String;)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getSystemService](https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.Class))"]
            pub fn getSystemService_Class<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Class>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::Object>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getSystemService",
                                c"(Ljava/lang/Class;)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getSystemServiceName](https://developer.android.com/reference/android/content/Context.html#getSystemServiceName(java.lang.Class))"]
            pub fn getSystemServiceName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Class>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getSystemServiceName",
                                c"(Ljava/lang/Class;)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkPermission](https://developer.android.com/reference/android/content/Context.html#checkPermission(java.lang.String,%20int,%20int))"]
            pub fn checkPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkPermission",
                                c"(Ljava/lang/String;II)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkCallingPermission](https://developer.android.com/reference/android/content/Context.html#checkCallingPermission(java.lang.String))"]
            pub fn checkCallingPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkCallingPermission",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkCallingOrSelfPermission](https://developer.android.com/reference/android/content/Context.html#checkCallingOrSelfPermission(java.lang.String))"]
            pub fn checkCallingOrSelfPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkCallingOrSelfPermission",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkSelfPermission](https://developer.android.com/reference/android/content/Context.html#checkSelfPermission(java.lang.String))"]
            pub fn checkSelfPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkSelfPermission",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[enforcePermission](https://developer.android.com/reference/android/content/Context.html#enforcePermission(java.lang.String,%20int,%20int,%20java.lang.String))"]
            pub fn enforcePermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
                arg2: i32,
                arg3: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"enforcePermission",
                                c"(Ljava/lang/String;IILjava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[enforceCallingPermission](https://developer.android.com/reference/android/content/Context.html#enforceCallingPermission(java.lang.String,%20java.lang.String))"]
            pub fn enforceCallingPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"enforceCallingPermission",
                                c"(Ljava/lang/String;Ljava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[enforceCallingOrSelfPermission](https://developer.android.com/reference/android/content/Context.html#enforceCallingOrSelfPermission(java.lang.String,%20java.lang.String))"]
            pub fn enforceCallingOrSelfPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"enforceCallingOrSelfPermission",
                                c"(Ljava/lang/String;Ljava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkUriPermissions](https://developer.android.com/reference/android/content/Context.html#checkUriPermissions(java.util.List,%20int,%20int,%20int))"]
            pub fn checkUriPermissions<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
                arg1: i32,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::IntArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkUriPermissions",
                                c"(Ljava/util/List;III)[I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkCallingUriPermissions](https://developer.android.com/reference/android/content/Context.html#checkCallingUriPermissions(java.util.List,%20int))"]
            pub fn checkCallingUriPermissions<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::IntArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkCallingUriPermissions",
                                c"(Ljava/util/List;I)[I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkCallingOrSelfUriPermissions](https://developer.android.com/reference/android/content/Context.html#checkCallingOrSelfUriPermissions(java.util.List,%20int))"]
            pub fn checkCallingOrSelfUriPermissions<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::IntArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkCallingOrSelfUriPermissions",
                                c"(Ljava/util/List;I)[I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[revokeSelfPermissionOnKill](https://developer.android.com/reference/android/content/Context.html#revokeSelfPermissionOnKill(java.lang.String))"]
            pub fn revokeSelfPermissionOnKill<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"revokeSelfPermissionOnKill",
                                c"(Ljava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createPackageContext](https://developer.android.com/reference/android/content/Context.html#createPackageContext(java.lang.String,%20int))"]
            pub fn createPackageContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createPackageContext",
                                c"(Ljava/lang/String;I)Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createContextForSplit](https://developer.android.com/reference/android/content/Context.html#createContextForSplit(java.lang.String))"]
            pub fn createContextForSplit<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createContextForSplit",
                                c"(Ljava/lang/String;)Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createDeviceContext](https://developer.android.com/reference/android/content/Context.html#createDeviceContext(int))"]
            pub fn createDeviceContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createDeviceContext",
                                c"(I)Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createAttributionContext](https://developer.android.com/reference/android/content/Context.html#createAttributionContext(java.lang.String))"]
            pub fn createAttributionContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createAttributionContext",
                                c"(Ljava/lang/String;)Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createDeviceProtectedStorageContext](https://developer.android.com/reference/android/content/Context.html#createDeviceProtectedStorageContext())"]
            pub fn createDeviceProtectedStorageContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createDeviceProtectedStorageContext",
                                c"()Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDeviceId](https://developer.android.com/reference/android/content/Context.html#getDeviceId())"]
            pub fn getDeviceId<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDeviceId",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isRestricted](https://developer.android.com/reference/android/content/Context.html#isRestricted())"]
            pub fn isRestricted<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isRestricted",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isDeviceProtectedStorage](https://developer.android.com/reference/android/content/Context.html#isDeviceProtectedStorage())"]
            pub fn isDeviceProtectedStorage<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isDeviceProtectedStorage",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isUiContext](https://developer.android.com/reference/android/content/Context.html#isUiContext())"]
            pub fn isUiContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isUiContext",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [ACCESSIBILITY_SERVICE](https://developer.android.com/reference/android/content/Context.html#ACCESSIBILITY_SERVICE)"]
            pub const ACCESSIBILITY_SERVICE: &'static str = "accessibility";
            #[doc = "public static final [ACCOUNT_SERVICE](https://developer.android.com/reference/android/content/Context.html#ACCOUNT_SERVICE)"]
            pub const ACCOUNT_SERVICE: &'static str = "account";
            #[doc = "public static final [ACTIVITY_SERVICE](https://developer.android.com/reference/android/content/Context.html#ACTIVITY_SERVICE)"]
            pub const ACTIVITY_SERVICE: &'static str = "activity";
            #[doc = "public static final [ALARM_SERVICE](https://developer.android.com/reference/android/content/Context.html#ALARM_SERVICE)"]
            pub const ALARM_SERVICE: &'static str = "alarm";
            #[doc = "public static final [APPWIDGET_SERVICE](https://developer.android.com/reference/android/content/Context.html#APPWIDGET_SERVICE)"]
            pub const APPWIDGET_SERVICE: &'static str = "appwidget";
            #[doc = "public static final [APP_OPS_SERVICE](https://developer.android.com/reference/android/content/Context.html#APP_OPS_SERVICE)"]
            pub const APP_OPS_SERVICE: &'static str = "appops";
            #[doc = "public static final [APP_SEARCH_SERVICE](https://developer.android.com/reference/android/content/Context.html#APP_SEARCH_SERVICE)"]
            pub const APP_SEARCH_SERVICE: &'static str = "app_search";
            #[doc = "public static final [AUDIO_SERVICE](https://developer.android.com/reference/android/content/Context.html#AUDIO_SERVICE)"]
            pub const AUDIO_SERVICE: &'static str = "audio";
            #[doc = "public static final [BATTERY_SERVICE](https://developer.android.com/reference/android/content/Context.html#BATTERY_SERVICE)"]
            pub const BATTERY_SERVICE: &'static str = "batterymanager";
            #[doc = "public static final [BIND_ABOVE_CLIENT](https://developer.android.com/reference/android/content/Context.html#BIND_ABOVE_CLIENT)"]
            pub const BIND_ABOVE_CLIENT: i32 = 8;
            #[doc = "public static final [BIND_ADJUST_WITH_ACTIVITY](https://developer.android.com/reference/android/content/Context.html#BIND_ADJUST_WITH_ACTIVITY)"]
            pub const BIND_ADJUST_WITH_ACTIVITY: i32 = 128;
            #[doc = "public static final [BIND_ALLOW_ACTIVITY_STARTS](https://developer.android.com/reference/android/content/Context.html#BIND_ALLOW_ACTIVITY_STARTS)"]
            pub const BIND_ALLOW_ACTIVITY_STARTS: i32 = 512;
            #[doc = "public static final [BIND_ALLOW_OOM_MANAGEMENT](https://developer.android.com/reference/android/content/Context.html#BIND_ALLOW_OOM_MANAGEMENT)"]
            pub const BIND_ALLOW_OOM_MANAGEMENT: i32 = 16;
            #[doc = "public static final [BIND_AUTO_CREATE](https://developer.android.com/reference/android/content/Context.html#BIND_AUTO_CREATE)"]
            pub const BIND_AUTO_CREATE: i32 = 1;
            #[doc = "public static final [BIND_DEBUG_UNBIND](https://developer.android.com/reference/android/content/Context.html#BIND_DEBUG_UNBIND)"]
            pub const BIND_DEBUG_UNBIND: i32 = 2;
            #[doc = "public static final [BIND_EXTERNAL_SERVICE](https://developer.android.com/reference/android/content/Context.html#BIND_EXTERNAL_SERVICE)"]
            pub const BIND_EXTERNAL_SERVICE: i32 = -2147483648;
            #[doc = "public static final [BIND_EXTERNAL_SERVICE_LONG](https://developer.android.com/reference/android/content/Context.html#BIND_EXTERNAL_SERVICE_LONG)"]
            pub const BIND_EXTERNAL_SERVICE_LONG: i64 = 4611686018427387904;
            #[doc = "public static final [BIND_IMPORTANT](https://developer.android.com/reference/android/content/Context.html#BIND_IMPORTANT)"]
            pub const BIND_IMPORTANT: i32 = 64;
            #[doc = "public static final [BIND_INCLUDE_CAPABILITIES](https://developer.android.com/reference/android/content/Context.html#BIND_INCLUDE_CAPABILITIES)"]
            pub const BIND_INCLUDE_CAPABILITIES: i32 = 4096;
            #[doc = "public static final [BIND_NOT_FOREGROUND](https://developer.android.com/reference/android/content/Context.html#BIND_NOT_FOREGROUND)"]
            pub const BIND_NOT_FOREGROUND: i32 = 4;
            #[doc = "public static final [BIND_NOT_PERCEPTIBLE](https://developer.android.com/reference/android/content/Context.html#BIND_NOT_PERCEPTIBLE)"]
            pub const BIND_NOT_PERCEPTIBLE: i32 = 256;
            #[doc = "public static final [BIND_PACKAGE_ISOLATED_PROCESS](https://developer.android.com/reference/android/content/Context.html#BIND_PACKAGE_ISOLATED_PROCESS)"]
            pub const BIND_PACKAGE_ISOLATED_PROCESS: i32 = 16384;
            #[doc = "public static final [BIND_SHARED_ISOLATED_PROCESS](https://developer.android.com/reference/android/content/Context.html#BIND_SHARED_ISOLATED_PROCESS)"]
            pub const BIND_SHARED_ISOLATED_PROCESS: i32 = 8192;
            #[doc = "public static final [BIND_WAIVE_PRIORITY](https://developer.android.com/reference/android/content/Context.html#BIND_WAIVE_PRIORITY)"]
            pub const BIND_WAIVE_PRIORITY: i32 = 32;
            #[doc = "public static final [BIOMETRIC_SERVICE](https://developer.android.com/reference/android/content/Context.html#BIOMETRIC_SERVICE)"]
            pub const BIOMETRIC_SERVICE: &'static str = "biometric";
            #[doc = "public static final [BLOB_STORE_SERVICE](https://developer.android.com/reference/android/content/Context.html#BLOB_STORE_SERVICE)"]
            pub const BLOB_STORE_SERVICE: &'static str = "blob_store";
            #[doc = "public static final [BLUETOOTH_SERVICE](https://developer.android.com/reference/android/content/Context.html#BLUETOOTH_SERVICE)"]
            pub const BLUETOOTH_SERVICE: &'static str = "bluetooth";
            #[doc = "public static final [BUGREPORT_SERVICE](https://developer.android.com/reference/android/content/Context.html#BUGREPORT_SERVICE)"]
            pub const BUGREPORT_SERVICE: &'static str = "bugreport";
            #[doc = "public static final [CAMERA_SERVICE](https://developer.android.com/reference/android/content/Context.html#CAMERA_SERVICE)"]
            pub const CAMERA_SERVICE: &'static str = "camera";
            #[doc = "public static final [CAPTIONING_SERVICE](https://developer.android.com/reference/android/content/Context.html#CAPTIONING_SERVICE)"]
            pub const CAPTIONING_SERVICE: &'static str = "captioning";
            #[doc = "public static final [CARRIER_CONFIG_SERVICE](https://developer.android.com/reference/android/content/Context.html#CARRIER_CONFIG_SERVICE)"]
            pub const CARRIER_CONFIG_SERVICE: &'static str = "carrier_config";
            #[doc = "public static final [CLIPBOARD_SERVICE](https://developer.android.com/reference/android/content/Context.html#CLIPBOARD_SERVICE)"]
            pub const CLIPBOARD_SERVICE: &'static str = "clipboard";
            #[doc = "public static final [COMPANION_DEVICE_SERVICE](https://developer.android.com/reference/android/content/Context.html#COMPANION_DEVICE_SERVICE)"]
            pub const COMPANION_DEVICE_SERVICE: &'static str = "companiondevice";
            #[doc = "public static final [CONNECTIVITY_DIAGNOSTICS_SERVICE](https://developer.android.com/reference/android/content/Context.html#CONNECTIVITY_DIAGNOSTICS_SERVICE)"]
            pub const CONNECTIVITY_DIAGNOSTICS_SERVICE: &'static str = "connectivity_diagnostics";
            #[doc = "public static final [CONNECTIVITY_SERVICE](https://developer.android.com/reference/android/content/Context.html#CONNECTIVITY_SERVICE)"]
            pub const CONNECTIVITY_SERVICE: &'static str = "connectivity";
            #[doc = "public static final [CONSUMER_IR_SERVICE](https://developer.android.com/reference/android/content/Context.html#CONSUMER_IR_SERVICE)"]
            pub const CONSUMER_IR_SERVICE: &'static str = "consumer_ir";
            #[doc = "public static final [CONTACT_KEYS_SERVICE](https://developer.android.com/reference/android/content/Context.html#CONTACT_KEYS_SERVICE)"]
            pub const CONTACT_KEYS_SERVICE: &'static str = "contact_keys";
            #[doc = "public static final [CONTEXT_IGNORE_SECURITY](https://developer.android.com/reference/android/content/Context.html#CONTEXT_IGNORE_SECURITY)"]
            pub const CONTEXT_IGNORE_SECURITY: i32 = 2;
            #[doc = "public static final [CONTEXT_INCLUDE_CODE](https://developer.android.com/reference/android/content/Context.html#CONTEXT_INCLUDE_CODE)"]
            pub const CONTEXT_INCLUDE_CODE: i32 = 1;
            #[doc = "public static final [CONTEXT_RESTRICTED](https://developer.android.com/reference/android/content/Context.html#CONTEXT_RESTRICTED)"]
            pub const CONTEXT_RESTRICTED: i32 = 4;
            #[doc = "public static final [CREDENTIAL_SERVICE](https://developer.android.com/reference/android/content/Context.html#CREDENTIAL_SERVICE)"]
            pub const CREDENTIAL_SERVICE: &'static str = "credential";
            #[doc = "public static final [CROSS_PROFILE_APPS_SERVICE](https://developer.android.com/reference/android/content/Context.html#CROSS_PROFILE_APPS_SERVICE)"]
            pub const CROSS_PROFILE_APPS_SERVICE: &'static str = "crossprofileapps";
            #[doc = "public static final [DEVICE_ID_DEFAULT](https://developer.android.com/reference/android/content/Context.html#DEVICE_ID_DEFAULT)"]
            pub const DEVICE_ID_DEFAULT: i32 = 0;
            #[doc = "public static final [DEVICE_ID_INVALID](https://developer.android.com/reference/android/content/Context.html#DEVICE_ID_INVALID)"]
            pub const DEVICE_ID_INVALID: i32 = -1;
            #[doc = "public static final [DEVICE_LOCK_SERVICE](https://developer.android.com/reference/android/content/Context.html#DEVICE_LOCK_SERVICE)"]
            pub const DEVICE_LOCK_SERVICE: &'static str = "device_lock";
            #[doc = "public static final [DEVICE_POLICY_SERVICE](https://developer.android.com/reference/android/content/Context.html#DEVICE_POLICY_SERVICE)"]
            pub const DEVICE_POLICY_SERVICE: &'static str = "device_policy";
            #[doc = "public static final [DISPLAY_HASH_SERVICE](https://developer.android.com/reference/android/content/Context.html#DISPLAY_HASH_SERVICE)"]
            pub const DISPLAY_HASH_SERVICE: &'static str = "display_hash";
            #[doc = "public static final [DISPLAY_SERVICE](https://developer.android.com/reference/android/content/Context.html#DISPLAY_SERVICE)"]
            pub const DISPLAY_SERVICE: &'static str = "display";
            #[doc = "public static final [DOMAIN_VERIFICATION_SERVICE](https://developer.android.com/reference/android/content/Context.html#DOMAIN_VERIFICATION_SERVICE)"]
            pub const DOMAIN_VERIFICATION_SERVICE: &'static str = "domain_verification";
            #[doc = "public static final [DOWNLOAD_SERVICE](https://developer.android.com/reference/android/content/Context.html#DOWNLOAD_SERVICE)"]
            pub const DOWNLOAD_SERVICE: &'static str = "download";
            #[doc = "public static final [DROPBOX_SERVICE](https://developer.android.com/reference/android/content/Context.html#DROPBOX_SERVICE)"]
            pub const DROPBOX_SERVICE: &'static str = "dropbox";
            #[doc = "public static final [EUICC_SERVICE](https://developer.android.com/reference/android/content/Context.html#EUICC_SERVICE)"]
            pub const EUICC_SERVICE: &'static str = "euicc";
            #[doc = "public static final [FILE_INTEGRITY_SERVICE](https://developer.android.com/reference/android/content/Context.html#FILE_INTEGRITY_SERVICE)"]
            pub const FILE_INTEGRITY_SERVICE: &'static str = "file_integrity";
            #[doc = "public static final [FINGERPRINT_SERVICE](https://developer.android.com/reference/android/content/Context.html#FINGERPRINT_SERVICE)"]
            pub const FINGERPRINT_SERVICE: &'static str = "fingerprint";
            #[doc = "public static final [GAME_SERVICE](https://developer.android.com/reference/android/content/Context.html#GAME_SERVICE)"]
            pub const GAME_SERVICE: &'static str = "game";
            #[doc = "public static final [GRAMMATICAL_INFLECTION_SERVICE](https://developer.android.com/reference/android/content/Context.html#GRAMMATICAL_INFLECTION_SERVICE)"]
            pub const GRAMMATICAL_INFLECTION_SERVICE: &'static str = "grammatical_inflection";
            #[doc = "public static final [HARDWARE_PROPERTIES_SERVICE](https://developer.android.com/reference/android/content/Context.html#HARDWARE_PROPERTIES_SERVICE)"]
            pub const HARDWARE_PROPERTIES_SERVICE: &'static str = "hardware_properties";
            #[doc = "public static final [HEALTHCONNECT_SERVICE](https://developer.android.com/reference/android/content/Context.html#HEALTHCONNECT_SERVICE)"]
            pub const HEALTHCONNECT_SERVICE: &'static str = "healthconnect";
            #[doc = "public static final [INPUT_METHOD_SERVICE](https://developer.android.com/reference/android/content/Context.html#INPUT_METHOD_SERVICE)"]
            pub const INPUT_METHOD_SERVICE: &'static str = "input_method";
            #[doc = "public static final [INPUT_SERVICE](https://developer.android.com/reference/android/content/Context.html#INPUT_SERVICE)"]
            pub const INPUT_SERVICE: &'static str = "input";
            #[doc = "public static final [IPSEC_SERVICE](https://developer.android.com/reference/android/content/Context.html#IPSEC_SERVICE)"]
            pub const IPSEC_SERVICE: &'static str = "ipsec";
            #[doc = "public static final [JOB_SCHEDULER_SERVICE](https://developer.android.com/reference/android/content/Context.html#JOB_SCHEDULER_SERVICE)"]
            pub const JOB_SCHEDULER_SERVICE: &'static str = "jobscheduler";
            #[doc = "public static final [KEYGUARD_SERVICE](https://developer.android.com/reference/android/content/Context.html#KEYGUARD_SERVICE)"]
            pub const KEYGUARD_SERVICE: &'static str = "keyguard";
            #[doc = "public static final [LAUNCHER_APPS_SERVICE](https://developer.android.com/reference/android/content/Context.html#LAUNCHER_APPS_SERVICE)"]
            pub const LAUNCHER_APPS_SERVICE: &'static str = "launcherapps";
            #[doc = "public static final [LAYOUT_INFLATER_SERVICE](https://developer.android.com/reference/android/content/Context.html#LAYOUT_INFLATER_SERVICE)"]
            pub const LAYOUT_INFLATER_SERVICE: &'static str = "layout_inflater";
            #[doc = "public static final [LOCALE_SERVICE](https://developer.android.com/reference/android/content/Context.html#LOCALE_SERVICE)"]
            pub const LOCALE_SERVICE: &'static str = "locale";
            #[doc = "public static final [LOCATION_SERVICE](https://developer.android.com/reference/android/content/Context.html#LOCATION_SERVICE)"]
            pub const LOCATION_SERVICE: &'static str = "location";
            #[doc = "public static final [MEDIA_COMMUNICATION_SERVICE](https://developer.android.com/reference/android/content/Context.html#MEDIA_COMMUNICATION_SERVICE)"]
            pub const MEDIA_COMMUNICATION_SERVICE: &'static str = "media_communication";
            #[doc = "public static final [MEDIA_METRICS_SERVICE](https://developer.android.com/reference/android/content/Context.html#MEDIA_METRICS_SERVICE)"]
            pub const MEDIA_METRICS_SERVICE: &'static str = "media_metrics";
            #[doc = "public static final [MEDIA_PROJECTION_SERVICE](https://developer.android.com/reference/android/content/Context.html#MEDIA_PROJECTION_SERVICE)"]
            pub const MEDIA_PROJECTION_SERVICE: &'static str = "media_projection";
            #[doc = "public static final [MEDIA_ROUTER_SERVICE](https://developer.android.com/reference/android/content/Context.html#MEDIA_ROUTER_SERVICE)"]
            pub const MEDIA_ROUTER_SERVICE: &'static str = "media_router";
            #[doc = "public static final [MEDIA_SESSION_SERVICE](https://developer.android.com/reference/android/content/Context.html#MEDIA_SESSION_SERVICE)"]
            pub const MEDIA_SESSION_SERVICE: &'static str = "media_session";
            #[doc = "public static final [MIDI_SERVICE](https://developer.android.com/reference/android/content/Context.html#MIDI_SERVICE)"]
            pub const MIDI_SERVICE: &'static str = "midi";
            #[doc = "public static final [MODE_APPEND](https://developer.android.com/reference/android/content/Context.html#MODE_APPEND)"]
            pub const MODE_APPEND: i32 = 32768;
            #[doc = "public static final [MODE_ENABLE_WRITE_AHEAD_LOGGING](https://developer.android.com/reference/android/content/Context.html#MODE_ENABLE_WRITE_AHEAD_LOGGING)"]
            pub const MODE_ENABLE_WRITE_AHEAD_LOGGING: i32 = 8;
            #[doc = "public static final [MODE_MULTI_PROCESS](https://developer.android.com/reference/android/content/Context.html#MODE_MULTI_PROCESS)"]
            #[deprecated]
            pub const MODE_MULTI_PROCESS: i32 = 4;
            #[doc = "public static final [MODE_NO_LOCALIZED_COLLATORS](https://developer.android.com/reference/android/content/Context.html#MODE_NO_LOCALIZED_COLLATORS)"]
            pub const MODE_NO_LOCALIZED_COLLATORS: i32 = 16;
            #[doc = "public static final [MODE_PRIVATE](https://developer.android.com/reference/android/content/Context.html#MODE_PRIVATE)"]
            pub const MODE_PRIVATE: i32 = 0;
            #[doc = "public static final [MODE_WORLD_READABLE](https://developer.android.com/reference/android/content/Context.html#MODE_WORLD_READABLE)"]
            #[deprecated]
            pub const MODE_WORLD_READABLE: i32 = 1;
            #[doc = "public static final [MODE_WORLD_WRITEABLE](https://developer.android.com/reference/android/content/Context.html#MODE_WORLD_WRITEABLE)"]
            #[deprecated]
            pub const MODE_WORLD_WRITEABLE: i32 = 2;
            #[doc = "public static final [NETWORK_STATS_SERVICE](https://developer.android.com/reference/android/content/Context.html#NETWORK_STATS_SERVICE)"]
            pub const NETWORK_STATS_SERVICE: &'static str = "netstats";
            #[doc = "public static final [NFC_SERVICE](https://developer.android.com/reference/android/content/Context.html#NFC_SERVICE)"]
            pub const NFC_SERVICE: &'static str = "nfc";
            #[doc = "public static final [NOTIFICATION_SERVICE](https://developer.android.com/reference/android/content/Context.html#NOTIFICATION_SERVICE)"]
            pub const NOTIFICATION_SERVICE: &'static str = "notification";
            #[doc = "public static final [NSD_SERVICE](https://developer.android.com/reference/android/content/Context.html#NSD_SERVICE)"]
            pub const NSD_SERVICE: &'static str = "servicediscovery";
            #[doc = "public static final [OVERLAY_SERVICE](https://developer.android.com/reference/android/content/Context.html#OVERLAY_SERVICE)"]
            pub const OVERLAY_SERVICE: &'static str = "overlay";
            #[doc = "public static final [PEOPLE_SERVICE](https://developer.android.com/reference/android/content/Context.html#PEOPLE_SERVICE)"]
            pub const PEOPLE_SERVICE: &'static str = "people";
            #[doc = "public static final [PERFORMANCE_HINT_SERVICE](https://developer.android.com/reference/android/content/Context.html#PERFORMANCE_HINT_SERVICE)"]
            pub const PERFORMANCE_HINT_SERVICE: &'static str = "performance_hint";
            #[doc = "public static final [PERSISTENT_DATA_BLOCK_SERVICE](https://developer.android.com/reference/android/content/Context.html#PERSISTENT_DATA_BLOCK_SERVICE)"]
            pub const PERSISTENT_DATA_BLOCK_SERVICE: &'static str = "persistent_data_block";
            #[doc = "public static final [POWER_SERVICE](https://developer.android.com/reference/android/content/Context.html#POWER_SERVICE)"]
            pub const POWER_SERVICE: &'static str = "power";
            #[doc = "public static final [PRINT_SERVICE](https://developer.android.com/reference/android/content/Context.html#PRINT_SERVICE)"]
            pub const PRINT_SERVICE: &'static str = "print";
            #[doc = "public static final [PROFILING_SERVICE](https://developer.android.com/reference/android/content/Context.html#PROFILING_SERVICE)"]
            pub const PROFILING_SERVICE: &'static str = "profiling";
            #[doc = "public static final [RECEIVER_EXPORTED](https://developer.android.com/reference/android/content/Context.html#RECEIVER_EXPORTED)"]
            pub const RECEIVER_EXPORTED: i32 = 2;
            #[doc = "public static final [RECEIVER_NOT_EXPORTED](https://developer.android.com/reference/android/content/Context.html#RECEIVER_NOT_EXPORTED)"]
            pub const RECEIVER_NOT_EXPORTED: i32 = 4;
            #[doc = "public static final [RECEIVER_VISIBLE_TO_INSTANT_APPS](https://developer.android.com/reference/android/content/Context.html#RECEIVER_VISIBLE_TO_INSTANT_APPS)"]
            pub const RECEIVER_VISIBLE_TO_INSTANT_APPS: i32 = 1;
            #[doc = "public static final [RESTRICTIONS_SERVICE](https://developer.android.com/reference/android/content/Context.html#RESTRICTIONS_SERVICE)"]
            pub const RESTRICTIONS_SERVICE: &'static str = "restrictions";
            #[doc = "public static final [ROLE_SERVICE](https://developer.android.com/reference/android/content/Context.html#ROLE_SERVICE)"]
            pub const ROLE_SERVICE: &'static str = "role";
            #[doc = "public static final [SEARCH_SERVICE](https://developer.android.com/reference/android/content/Context.html#SEARCH_SERVICE)"]
            pub const SEARCH_SERVICE: &'static str = "search";
            #[doc = "public static final [SECURITY_STATE_SERVICE](https://developer.android.com/reference/android/content/Context.html#SECURITY_STATE_SERVICE)"]
            pub const SECURITY_STATE_SERVICE: &'static str = "security_state";
            #[doc = "public static final [SENSOR_SERVICE](https://developer.android.com/reference/android/content/Context.html#SENSOR_SERVICE)"]
            pub const SENSOR_SERVICE: &'static str = "sensor";
            #[doc = "public static final [SHORTCUT_SERVICE](https://developer.android.com/reference/android/content/Context.html#SHORTCUT_SERVICE)"]
            pub const SHORTCUT_SERVICE: &'static str = "shortcut";
            #[doc = "public static final [STATUS_BAR_SERVICE](https://developer.android.com/reference/android/content/Context.html#STATUS_BAR_SERVICE)"]
            pub const STATUS_BAR_SERVICE: &'static str = "statusbar";
            #[doc = "public static final [STORAGE_SERVICE](https://developer.android.com/reference/android/content/Context.html#STORAGE_SERVICE)"]
            pub const STORAGE_SERVICE: &'static str = "storage";
            #[doc = "public static final [STORAGE_STATS_SERVICE](https://developer.android.com/reference/android/content/Context.html#STORAGE_STATS_SERVICE)"]
            pub const STORAGE_STATS_SERVICE: &'static str = "storagestats";
            #[doc = "public static final [SYSTEM_HEALTH_SERVICE](https://developer.android.com/reference/android/content/Context.html#SYSTEM_HEALTH_SERVICE)"]
            pub const SYSTEM_HEALTH_SERVICE: &'static str = "systemhealth";
            #[doc = "public static final [TELECOM_SERVICE](https://developer.android.com/reference/android/content/Context.html#TELECOM_SERVICE)"]
            pub const TELECOM_SERVICE: &'static str = "telecom";
            #[doc = "public static final [TELEPHONY_IMS_SERVICE](https://developer.android.com/reference/android/content/Context.html#TELEPHONY_IMS_SERVICE)"]
            pub const TELEPHONY_IMS_SERVICE: &'static str = "telephony_ims";
            #[doc = "public static final [TELEPHONY_SERVICE](https://developer.android.com/reference/android/content/Context.html#TELEPHONY_SERVICE)"]
            pub const TELEPHONY_SERVICE: &'static str = "phone";
            #[doc = "public static final [TELEPHONY_SUBSCRIPTION_SERVICE](https://developer.android.com/reference/android/content/Context.html#TELEPHONY_SUBSCRIPTION_SERVICE)"]
            pub const TELEPHONY_SUBSCRIPTION_SERVICE: &'static str = "telephony_subscription_service";
            #[doc = "public static final [TEXT_CLASSIFICATION_SERVICE](https://developer.android.com/reference/android/content/Context.html#TEXT_CLASSIFICATION_SERVICE)"]
            pub const TEXT_CLASSIFICATION_SERVICE: &'static str = "textclassification";
            #[doc = "public static final [TEXT_SERVICES_MANAGER_SERVICE](https://developer.android.com/reference/android/content/Context.html#TEXT_SERVICES_MANAGER_SERVICE)"]
            pub const TEXT_SERVICES_MANAGER_SERVICE: &'static str = "textservices";
            #[doc = "public static final [TV_INPUT_SERVICE](https://developer.android.com/reference/android/content/Context.html#TV_INPUT_SERVICE)"]
            pub const TV_INPUT_SERVICE: &'static str = "tv_input";
            #[doc = "public static final [TV_INTERACTIVE_APP_SERVICE](https://developer.android.com/reference/android/content/Context.html#TV_INTERACTIVE_APP_SERVICE)"]
            pub const TV_INTERACTIVE_APP_SERVICE: &'static str = "tv_interactive_app";
            #[doc = "public static final [UI_MODE_SERVICE](https://developer.android.com/reference/android/content/Context.html#UI_MODE_SERVICE)"]
            pub const UI_MODE_SERVICE: &'static str = "uimode";
            #[doc = "public static final [USAGE_STATS_SERVICE](https://developer.android.com/reference/android/content/Context.html#USAGE_STATS_SERVICE)"]
            pub const USAGE_STATS_SERVICE: &'static str = "usagestats";
            #[doc = "public static final [USB_SERVICE](https://developer.android.com/reference/android/content/Context.html#USB_SERVICE)"]
            pub const USB_SERVICE: &'static str = "usb";
            #[doc = "public static final [USER_SERVICE](https://developer.android.com/reference/android/content/Context.html#USER_SERVICE)"]
            pub const USER_SERVICE: &'static str = "user";
            #[doc = "public static final [VIBRATOR_MANAGER_SERVICE](https://developer.android.com/reference/android/content/Context.html#VIBRATOR_MANAGER_SERVICE)"]
            pub const VIBRATOR_MANAGER_SERVICE: &'static str = "vibrator_manager";
            #[doc = "public static final [VIBRATOR_SERVICE](https://developer.android.com/reference/android/content/Context.html#VIBRATOR_SERVICE)"]
            #[deprecated]
            pub const VIBRATOR_SERVICE: &'static str = "vibrator";
            #[doc = "public static final [VIRTUAL_DEVICE_SERVICE](https://developer.android.com/reference/android/content/Context.html#VIRTUAL_DEVICE_SERVICE)"]
            pub const VIRTUAL_DEVICE_SERVICE: &'static str = "virtualdevice";
            #[doc = "public static final [VPN_MANAGEMENT_SERVICE](https://developer.android.com/reference/android/content/Context.html#VPN_MANAGEMENT_SERVICE)"]
            pub const VPN_MANAGEMENT_SERVICE: &'static str = "vpn_management";
            #[doc = "public static final [WALLPAPER_SERVICE](https://developer.android.com/reference/android/content/Context.html#WALLPAPER_SERVICE)"]
            pub const WALLPAPER_SERVICE: &'static str = "wallpaper";
            #[doc = "public static final [WIFI_AWARE_SERVICE](https://developer.android.com/reference/android/content/Context.html#WIFI_AWARE_SERVICE)"]
            pub const WIFI_AWARE_SERVICE: &'static str = "wifiaware";
            #[doc = "public static final [WIFI_P2P_SERVICE](https://developer.android.com/reference/android/content/Context.html#WIFI_P2P_SERVICE)"]
            pub const WIFI_P2P_SERVICE: &'static str = "wifip2p";
            #[doc = "public static final [WIFI_RTT_RANGING_SERVICE](https://developer.android.com/reference/android/content/Context.html#WIFI_RTT_RANGING_SERVICE)"]
            pub const WIFI_RTT_RANGING_SERVICE: &'static str = "wifirtt";
            #[doc = "public static final [WIFI_SERVICE](https://developer.android.com/reference/android/content/Context.html#WIFI_SERVICE)"]
            pub const WIFI_SERVICE: &'static str = "wifi";
            #[doc = "public static final [WINDOW_SERVICE](https://developer.android.com/reference/android/content/Context.html#WINDOW_SERVICE)"]
            pub const WINDOW_SERVICE: &'static str = "window";
        }
        #[doc = "class [ContextWrapper](https://developer.android.com/reference/android/content/ContextWrapper.html)"]
        pub enum ContextWrapper {}
        unsafe impl ::java_spaghetti::ReferenceType for ContextWrapper {}
        unsafe impl ::java_spaghetti::JniType for ContextWrapper {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/content/ContextWrapper")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<Context> for ContextWrapper {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for ContextWrapper {}
        impl ContextWrapper {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/content/ContextWrapper"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[ContextWrapper](https://developer.android.com/reference/android/content/ContextWrapper.html#ContextWrapper(android.content.Context))"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<Context>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Landroid/content/Context;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getBaseContext](https://developer.android.com/reference/android/content/ContextWrapper.html#getBaseContext())"]
            pub fn getBaseContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getBaseContext",
                                c"()Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getApplicationContext](https://developer.android.com/reference/android/content/ContextWrapper.html#getApplicationContext())"]
            pub fn getApplicationContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getApplicationContext",
                                c"()Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setTheme](https://developer.android.com/reference/android/content/ContextWrapper.html#setTheme(int))"]
            pub fn setTheme<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setTheme",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getPackageName](https://developer.android.com/reference/android/content/ContextWrapper.html#getPackageName())"]
            pub fn getPackageName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getPackageName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getOpPackageName](https://developer.android.com/reference/android/content/ContextWrapper.html#getOpPackageName())"]
            pub fn getOpPackageName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getOpPackageName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getAttributionTag](https://developer.android.com/reference/android/content/ContextWrapper.html#getAttributionTag())"]
            pub fn getAttributionTag<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getAttributionTag",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getPackageResourcePath](https://developer.android.com/reference/android/content/ContextWrapper.html#getPackageResourcePath())"]
            pub fn getPackageResourcePath<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getPackageResourcePath",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getPackageCodePath](https://developer.android.com/reference/android/content/ContextWrapper.html#getPackageCodePath())"]
            pub fn getPackageCodePath<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getPackageCodePath",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[moveSharedPreferencesFrom](https://developer.android.com/reference/android/content/ContextWrapper.html#moveSharedPreferencesFrom(android.content.Context,%20java.lang.String))"]
            pub fn moveSharedPreferencesFrom<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Context>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"moveSharedPreferencesFrom",
                                c"(Landroid/content/Context;Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[deleteSharedPreferences](https://developer.android.com/reference/android/content/ContextWrapper.html#deleteSharedPreferences(java.lang.String))"]
            pub fn deleteSharedPreferences<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"deleteSharedPreferences",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[deleteFile](https://developer.android.com/reference/android/content/ContextWrapper.html#deleteFile(java.lang.String))"]
            pub fn deleteFile<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"deleteFile",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[fileList](https://developer.android.com/reference/android/content/ContextWrapper.html#fileList())"]
            pub fn fileList<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<
                            super::super::java::lang::String,
                            super::super::java::lang::Throwable,
                        >,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"fileList",
                                c"()[Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[moveDatabaseFrom](https://developer.android.com/reference/android/content/ContextWrapper.html#moveDatabaseFrom(android.content.Context,%20java.lang.String))"]
            pub fn moveDatabaseFrom<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Context>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"moveDatabaseFrom",
                                c"(Landroid/content/Context;Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[deleteDatabase](https://developer.android.com/reference/android/content/ContextWrapper.html#deleteDatabase(java.lang.String))"]
            pub fn deleteDatabase<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"deleteDatabase",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[databaseList](https://developer.android.com/reference/android/content/ContextWrapper.html#databaseList())"]
            pub fn databaseList<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<
                            super::super::java::lang::String,
                            super::super::java::lang::Throwable,
                        >,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"databaseList",
                                c"()[Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getWallpaperDesiredMinimumWidth](https://developer.android.com/reference/android/content/ContextWrapper.html#getWallpaperDesiredMinimumWidth())"]
            #[deprecated]
            pub fn getWallpaperDesiredMinimumWidth<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getWallpaperDesiredMinimumWidth",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getWallpaperDesiredMinimumHeight](https://developer.android.com/reference/android/content/ContextWrapper.html#getWallpaperDesiredMinimumHeight())"]
            #[deprecated]
            pub fn getWallpaperDesiredMinimumHeight<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getWallpaperDesiredMinimumHeight",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setWallpaper](https://developer.android.com/reference/android/content/ContextWrapper.html#setWallpaper(java.io.InputStream))"]
            #[deprecated]
            pub fn setWallpaper_InputStream<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::io::InputStream>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setWallpaper",
                                c"(Ljava/io/InputStream;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[clearWallpaper](https://developer.android.com/reference/android/content/ContextWrapper.html#clearWallpaper())"]
            #[deprecated]
            pub fn clearWallpaper<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"clearWallpaper",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getSystemService](https://developer.android.com/reference/android/content/ContextWrapper.html#getSystemService(java.lang.String))"]
            pub fn getSystemService<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::Object>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getSystemService",
                                c"(Ljava/lang/String;)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getSystemServiceName](https://developer.android.com/reference/android/content/ContextWrapper.html#getSystemServiceName(java.lang.Class))"]
            pub fn getSystemServiceName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Class>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getSystemServiceName",
                                c"(Ljava/lang/Class;)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkPermission](https://developer.android.com/reference/android/content/ContextWrapper.html#checkPermission(java.lang.String,%20int,%20int))"]
            pub fn checkPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkPermission",
                                c"(Ljava/lang/String;II)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkCallingPermission](https://developer.android.com/reference/android/content/ContextWrapper.html#checkCallingPermission(java.lang.String))"]
            pub fn checkCallingPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkCallingPermission",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkCallingOrSelfPermission](https://developer.android.com/reference/android/content/ContextWrapper.html#checkCallingOrSelfPermission(java.lang.String))"]
            pub fn checkCallingOrSelfPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkCallingOrSelfPermission",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkSelfPermission](https://developer.android.com/reference/android/content/ContextWrapper.html#checkSelfPermission(java.lang.String))"]
            pub fn checkSelfPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkSelfPermission",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[enforcePermission](https://developer.android.com/reference/android/content/ContextWrapper.html#enforcePermission(java.lang.String,%20int,%20int,%20java.lang.String))"]
            pub fn enforcePermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
                arg2: i32,
                arg3: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"enforcePermission",
                                c"(Ljava/lang/String;IILjava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[enforceCallingPermission](https://developer.android.com/reference/android/content/ContextWrapper.html#enforceCallingPermission(java.lang.String,%20java.lang.String))"]
            pub fn enforceCallingPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"enforceCallingPermission",
                                c"(Ljava/lang/String;Ljava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[enforceCallingOrSelfPermission](https://developer.android.com/reference/android/content/ContextWrapper.html#enforceCallingOrSelfPermission(java.lang.String,%20java.lang.String))"]
            pub fn enforceCallingOrSelfPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"enforceCallingOrSelfPermission",
                                c"(Ljava/lang/String;Ljava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkUriPermissions](https://developer.android.com/reference/android/content/ContextWrapper.html#checkUriPermissions(java.util.List,%20int,%20int,%20int))"]
            pub fn checkUriPermissions<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
                arg1: i32,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::IntArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkUriPermissions",
                                c"(Ljava/util/List;III)[I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkCallingUriPermissions](https://developer.android.com/reference/android/content/ContextWrapper.html#checkCallingUriPermissions(java.util.List,%20int))"]
            pub fn checkCallingUriPermissions<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::IntArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkCallingUriPermissions",
                                c"(Ljava/util/List;I)[I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkCallingOrSelfUriPermissions](https://developer.android.com/reference/android/content/ContextWrapper.html#checkCallingOrSelfUriPermissions(java.util.List,%20int))"]
            pub fn checkCallingOrSelfUriPermissions<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::IntArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkCallingOrSelfUriPermissions",
                                c"(Ljava/util/List;I)[I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createPackageContext](https://developer.android.com/reference/android/content/ContextWrapper.html#createPackageContext(java.lang.String,%20int))"]
            pub fn createPackageContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createPackageContext",
                                c"(Ljava/lang/String;I)Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createContextForSplit](https://developer.android.com/reference/android/content/ContextWrapper.html#createContextForSplit(java.lang.String))"]
            pub fn createContextForSplit<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createContextForSplit",
                                c"(Ljava/lang/String;)Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createDeviceContext](https://developer.android.com/reference/android/content/ContextWrapper.html#createDeviceContext(int))"]
            pub fn createDeviceContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createDeviceContext",
                                c"(I)Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createAttributionContext](https://developer.android.com/reference/android/content/ContextWrapper.html#createAttributionContext(java.lang.String))"]
            pub fn createAttributionContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createAttributionContext",
                                c"(Ljava/lang/String;)Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isRestricted](https://developer.android.com/reference/android/content/ContextWrapper.html#isRestricted())"]
            pub fn isRestricted<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isRestricted",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getDeviceId](https://developer.android.com/reference/android/content/ContextWrapper.html#getDeviceId())"]
            pub fn getDeviceId<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDeviceId",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createDeviceProtectedStorageContext](https://developer.android.com/reference/android/content/ContextWrapper.html#createDeviceProtectedStorageContext())"]
            pub fn createDeviceProtectedStorageContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createDeviceProtectedStorageContext",
                                c"()Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isDeviceProtectedStorage](https://developer.android.com/reference/android/content/ContextWrapper.html#isDeviceProtectedStorage())"]
            pub fn isDeviceProtectedStorage<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isDeviceProtectedStorage",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isUiContext](https://developer.android.com/reference/android/content/ContextWrapper.html#isUiContext())"]
            pub fn isUiContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isUiContext",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
    }

    pub mod os {
        #[doc = "final class [ParcelUuid](https://developer.android.com/reference/android/os/ParcelUuid.html)"]
        pub enum ParcelUuid {}
        unsafe impl ::java_spaghetti::ReferenceType for ParcelUuid {}
        unsafe impl ::java_spaghetti::JniType for ParcelUuid {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/os/ParcelUuid")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<Parcelable> for ParcelUuid {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for ParcelUuid {}
        impl ParcelUuid {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"android/os/ParcelUuid"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[ParcelUuid](https://developer.android.com/reference/android/os/ParcelUuid.html#ParcelUuid(java.util.UUID))"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Ljava/util/UUID;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[fromString](https://developer.android.com/reference/android/os/ParcelUuid.html#fromString(java.lang.String))"]
            pub fn fromString<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ParcelUuid>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"fromString",
                                c"(Ljava/lang/String;)Landroid/os/ParcelUuid;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getUuid](https://developer.android.com/reference/android/os/ParcelUuid.html#getUuid())"]
            pub fn getUuid<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::UUID>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getUuid",
                                c"()Ljava/util/UUID;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toString](https://developer.android.com/reference/android/os/ParcelUuid.html#toString())"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[hashCode](https://developer.android.com/reference/android/os/ParcelUuid.html#hashCode())"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"hashCode",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[equals](https://developer.android.com/reference/android/os/ParcelUuid.html#equals(java.lang.Object))"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[describeContents](https://developer.android.com/reference/android/os/ParcelUuid.html#describeContents())"]
            pub fn describeContents<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"describeContents",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "interface [Parcelable](https://developer.android.com/reference/android/os/Parcelable.html)"]
        pub enum Parcelable {}
        unsafe impl ::java_spaghetti::ReferenceType for Parcelable {}
        unsafe impl ::java_spaghetti::JniType for Parcelable {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/os/Parcelable")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for Parcelable {}
        impl Parcelable {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"android/os/Parcelable"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[describeContents](https://developer.android.com/reference/android/os/Parcelable.html#describeContents())"]
            pub fn describeContents<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"describeContents",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [CONTENTS_FILE_DESCRIPTOR](https://developer.android.com/reference/android/os/Parcelable.html#CONTENTS_FILE_DESCRIPTOR)"]
            pub const CONTENTS_FILE_DESCRIPTOR: i32 = 1;
            #[doc = "public static final [PARCELABLE_WRITE_RETURN_VALUE](https://developer.android.com/reference/android/os/Parcelable.html#PARCELABLE_WRITE_RETURN_VALUE)"]
            pub const PARCELABLE_WRITE_RETURN_VALUE: i32 = 1;
        }
    }

    pub mod util {
        #[doc = "class [SparseArray](https://developer.android.com/reference/android/util/SparseArray.html)"]
        pub enum SparseArray {}
        unsafe impl ::java_spaghetti::ReferenceType for SparseArray {}
        unsafe impl ::java_spaghetti::JniType for SparseArray {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/util/SparseArray")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for SparseArray {}
        impl SparseArray {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/util/SparseArray"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[SparseArray](https://developer.android.com/reference/android/util/SparseArray.html#SparseArray())"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[SparseArray](https://developer.android.com/reference/android/util/SparseArray.html#SparseArray(int))"]
            pub fn new_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[clone](https://developer.android.com/reference/android/util/SparseArray.html#clone())"]
            pub fn clone<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, SparseArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"clone",
                                c"()Landroid/util/SparseArray;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[contains](https://developer.android.com/reference/android/util/SparseArray.html#contains(int))"]
            pub fn contains<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"contains",
                                c"(I)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[get](https://developer.android.com/reference/android/util/SparseArray.html#get(int))"]
            pub fn get_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::Object>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"get",
                                c"(I)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[get](https://developer.android.com/reference/android/util/SparseArray.html#get(int,%20java.lang.Object))"]
            pub fn get_int_Object<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::Object>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"get",
                                c"(ILjava/lang/Object;)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[delete](https://developer.android.com/reference/android/util/SparseArray.html#delete(int))"]
            pub fn delete<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"delete",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[remove](https://developer.android.com/reference/android/util/SparseArray.html#remove(int))"]
            pub fn remove<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"remove",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[removeAt](https://developer.android.com/reference/android/util/SparseArray.html#removeAt(int))"]
            pub fn removeAt<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"removeAt",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[removeAtRange](https://developer.android.com/reference/android/util/SparseArray.html#removeAtRange(int,%20int))"]
            pub fn removeAtRange<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"removeAtRange",
                                c"(II)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[set](https://developer.android.com/reference/android/util/SparseArray.html#set(int,%20java.lang.Object))"]
            pub fn set<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"set",
                                c"(ILjava/lang/Object;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[put](https://developer.android.com/reference/android/util/SparseArray.html#put(int,%20java.lang.Object))"]
            pub fn put<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"put",
                                c"(ILjava/lang/Object;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[size](https://developer.android.com/reference/android/util/SparseArray.html#size())"]
            pub fn size<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"size",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[keyAt](https://developer.android.com/reference/android/util/SparseArray.html#keyAt(int))"]
            pub fn keyAt<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"keyAt",
                                c"(I)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[valueAt](https://developer.android.com/reference/android/util/SparseArray.html#valueAt(int))"]
            pub fn valueAt<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::Object>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"valueAt",
                                c"(I)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setValueAt](https://developer.android.com/reference/android/util/SparseArray.html#setValueAt(int,%20java.lang.Object))"]
            pub fn setValueAt<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setValueAt",
                                c"(ILjava/lang/Object;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[indexOfKey](https://developer.android.com/reference/android/util/SparseArray.html#indexOfKey(int))"]
            pub fn indexOfKey<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"indexOfKey",
                                c"(I)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[indexOfValue](https://developer.android.com/reference/android/util/SparseArray.html#indexOfValue(java.lang.Object))"]
            pub fn indexOfValue<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"indexOfValue",
                                c"(Ljava/lang/Object;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[clear](https://developer.android.com/reference/android/util/SparseArray.html#clear())"]
            pub fn clear<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"clear",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[append](https://developer.android.com/reference/android/util/SparseArray.html#append(int,%20java.lang.Object))"]
            pub fn append<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"append",
                                c"(ILjava/lang/Object;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toString](https://developer.android.com/reference/android/util/SparseArray.html#toString())"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[contentEquals](https://developer.android.com/reference/android/util/SparseArray.html#contentEquals(android.util.SparseArray))"]
            pub fn contentEquals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<SparseArray>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"contentEquals",
                                c"(Landroid/util/SparseArray;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[contentHashCode](https://developer.android.com/reference/android/util/SparseArray.html#contentHashCode())"]
            pub fn contentHashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"contentHashCode",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
    }
}

pub mod java {

    pub mod io {
        #[doc = "class java/io/InputStream"]
        pub enum InputStream {}
        unsafe impl ::java_spaghetti::ReferenceType for InputStream {}
        unsafe impl ::java_spaghetti::JniType for InputStream {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"java/io/InputStream")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for InputStream {}
        impl InputStream {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"java/io/InputStream"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "<init>"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "nullInputStream"]
            pub fn nullInputStream<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, InputStream>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"nullInputStream",
                                c"()Ljava/io/InputStream;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "read"]
            pub fn read<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"read",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "read"]
            pub fn read_byte_array<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"read",
                                c"([B)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "read"]
            pub fn read_byte_array_int_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"read",
                                c"([BII)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "readAllBytes"]
            pub fn readAllBytes<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"readAllBytes",
                                c"()[B",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "readNBytes"]
            pub fn readNBytes_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"readNBytes",
                                c"(I)[B",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "readNBytes"]
            pub fn readNBytes_byte_array_int_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"readNBytes",
                                c"([BII)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "skip"]
            pub fn skip<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i64,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"skip",
                                c"(J)J",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_long_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "skipNBytes"]
            pub fn skipNBytes<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i64,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"skipNBytes",
                                c"(J)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "available"]
            pub fn available<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"available",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "close"]
            pub fn close<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"close",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "mark"]
            pub fn mark<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"mark",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "reset"]
            pub fn reset<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"reset",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "markSupported"]
            pub fn markSupported<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"markSupported",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "transferTo"]
            pub fn transferTo<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<OutputStream>,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"transferTo",
                                c"(Ljava/io/OutputStream;)J",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_long_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "class java/io/OutputStream"]
        pub enum OutputStream {}
        unsafe impl ::java_spaghetti::ReferenceType for OutputStream {}
        unsafe impl ::java_spaghetti::JniType for OutputStream {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"java/io/OutputStream")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for OutputStream {}
        impl OutputStream {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"java/io/OutputStream"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "<init>"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "nullOutputStream"]
            pub fn nullOutputStream<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, OutputStream>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"nullOutputStream",
                                c"()Ljava/io/OutputStream;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "write"]
            pub fn write_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"write",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "write"]
            pub fn write_byte_array<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"write",
                                c"([B)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "write"]
            pub fn write_byte_array_int_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"write",
                                c"([BII)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "flush"]
            pub fn flush<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"flush",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "close"]
            pub fn close<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"close",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
    }

    pub mod lang {
        #[doc = "final class java/lang/Class"]
        pub enum Class {}
        unsafe impl ::java_spaghetti::ReferenceType for Class {}
        unsafe impl ::java_spaghetti::JniType for Class {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"java/lang/Class")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<Object> for Class {}
        impl Class {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<Object>> = ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"java/lang/Class"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "toString"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "toGenericString"]
            pub fn toGenericString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toGenericString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "forName"]
            pub fn forName_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Class>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"forName",
                                c"(Ljava/lang/String;)Ljava/lang/Class;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "newInstance"]
            #[deprecated]
            pub fn newInstance<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Object>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"newInstance",
                                c"()Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isInstance"]
            pub fn isInstance<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isInstance",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isAssignableFrom"]
            pub fn isAssignableFrom<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Class>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isAssignableFrom",
                                c"(Ljava/lang/Class;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isInterface"]
            pub fn isInterface<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isInterface",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isArray"]
            pub fn isArray<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isArray",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isPrimitive"]
            pub fn isPrimitive<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isPrimitive",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isAnnotation"]
            pub fn isAnnotation<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isAnnotation",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isSynthetic"]
            pub fn isSynthetic<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isSynthetic",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getName"]
            pub fn getName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getSuperclass"]
            pub fn getSuperclass<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Class>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getSuperclass",
                                c"()Ljava/lang/Class;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getPackageName"]
            pub fn getPackageName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getPackageName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getInterfaces"]
            pub fn getInterfaces<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<Class, Throwable>>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getInterfaces",
                                c"()[Ljava/lang/Class;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getComponentType"]
            pub fn getComponentType<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Class>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getComponentType",
                                c"()Ljava/lang/Class;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getModifiers"]
            pub fn getModifiers<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getModifiers",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getSigners"]
            pub fn getSigners<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<Object, Throwable>>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getSigners",
                                c"()[Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getDeclaringClass"]
            pub fn getDeclaringClass<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Class>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDeclaringClass",
                                c"()Ljava/lang/Class;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getEnclosingClass"]
            pub fn getEnclosingClass<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Class>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getEnclosingClass",
                                c"()Ljava/lang/Class;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getSimpleName"]
            pub fn getSimpleName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getSimpleName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getTypeName"]
            pub fn getTypeName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getTypeName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getCanonicalName"]
            pub fn getCanonicalName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCanonicalName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isAnonymousClass"]
            pub fn isAnonymousClass<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isAnonymousClass",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isLocalClass"]
            pub fn isLocalClass<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isLocalClass",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isMemberClass"]
            pub fn isMemberClass<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isMemberClass",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getClasses"]
            pub fn getClasses<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<Class, Throwable>>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getClasses",
                                c"()[Ljava/lang/Class;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getDeclaredClasses"]
            pub fn getDeclaredClasses<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<Class, Throwable>>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDeclaredClasses",
                                c"()[Ljava/lang/Class;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getResourceAsStream"]
            pub fn getResourceAsStream<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::io::InputStream>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getResourceAsStream",
                                c"(Ljava/lang/String;)Ljava/io/InputStream;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "desiredAssertionStatus"]
            pub fn desiredAssertionStatus<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"desiredAssertionStatus",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isEnum"]
            pub fn isEnum<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isEnum",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isRecord"]
            pub fn isRecord<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isRecord",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getEnumConstants"]
            pub fn getEnumConstants<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<Object, Throwable>>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getEnumConstants",
                                c"()[Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "cast"]
            pub fn cast<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Object>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"cast",
                                c"(Ljava/lang/Object;)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "asSubclass"]
            pub fn asSubclass<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Class>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Class>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"asSubclass",
                                c"(Ljava/lang/Class;)Ljava/lang/Class;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isAnnotationPresent"]
            pub fn isAnnotationPresent<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Class>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isAnnotationPresent",
                                c"(Ljava/lang/Class;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getNestHost"]
            pub fn getNestHost<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Class>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getNestHost",
                                c"()Ljava/lang/Class;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isNestmateOf"]
            pub fn isNestmateOf<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Class>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isNestmateOf",
                                c"(Ljava/lang/Class;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getNestMembers"]
            pub fn getNestMembers<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<Class, Throwable>>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getNestMembers",
                                c"()[Ljava/lang/Class;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "descriptorString"]
            pub fn descriptorString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"descriptorString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "componentType"]
            pub fn componentType<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Class>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"componentType",
                                c"()Ljava/lang/Class;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "arrayType"]
            pub fn arrayType<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Class>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"arrayType",
                                c"()Ljava/lang/Class;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getPermittedSubclasses"]
            pub fn getPermittedSubclasses<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<Class, Throwable>>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getPermittedSubclasses",
                                c"()[Ljava/lang/Class;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isSealed"]
            pub fn isSealed<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isSealed",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "class java/lang/Object"]
        pub enum Object {}
        unsafe impl ::java_spaghetti::ReferenceType for Object {}
        unsafe impl ::java_spaghetti::JniType for Object {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"java/lang/Object")
            }
        }
        impl Object {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<Object>> = ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"java/lang/Object"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "<init>"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getClass"]
            pub fn getClass<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Class>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getClass",
                                c"()Ljava/lang/Class;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "hashCode"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"hashCode",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "equals"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "toString"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "notify"]
            pub fn notify<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"notify",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "notifyAll"]
            pub fn notifyAll<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"notifyAll",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "wait"]
            pub fn wait_long<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i64,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"wait",
                                c"(J)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "wait"]
            pub fn wait_long_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i64,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"wait",
                                c"(JI)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "wait"]
            pub fn wait<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"wait",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "final class java/lang/StackTraceElement"]
        pub enum StackTraceElement {}
        unsafe impl ::java_spaghetti::ReferenceType for StackTraceElement {}
        unsafe impl ::java_spaghetti::JniType for StackTraceElement {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"java/lang/StackTraceElement")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<Object> for StackTraceElement {}
        impl StackTraceElement {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<Object>> = ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"java/lang/StackTraceElement"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "<init>"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: impl ::java_spaghetti::AsArg<String>,
                arg2: impl ::java_spaghetti::AsArg<String>,
                arg3: i32,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getFileName"]
            pub fn getFileName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getFileName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getLineNumber"]
            pub fn getLineNumber<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getLineNumber",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getClassName"]
            pub fn getClassName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getClassName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getMethodName"]
            pub fn getMethodName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getMethodName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isNativeMethod"]
            pub fn isNativeMethod<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isNativeMethod",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "toString"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "equals"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "hashCode"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"hashCode",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "final class java/lang/String"]
        pub enum String {}
        unsafe impl ::java_spaghetti::ReferenceType for String {}
        unsafe impl ::java_spaghetti::JniType for String {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"java/lang/String")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<Object> for String {}
        impl String {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<Object>> = ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"java/lang/String"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "<init>"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "<init>"]
            pub fn new_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Ljava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "<init>"]
            pub fn new_char_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"([C)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "<init>"]
            pub fn new_char_array_int_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"([CII)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "<init>"]
            pub fn new_int_array_int_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"([III)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "<init>"]
            #[deprecated]
            pub fn new_byte_array_int_int_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"([BIII)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "<init>"]
            #[deprecated]
            pub fn new_byte_array_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"([BI)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "<init>"]
            pub fn new_byte_array_int_int_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
                arg2: i32,
                arg3: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"([BIILjava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "<init>"]
            pub fn new_byte_array_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"([BLjava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "<init>"]
            pub fn new_byte_array_int_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"([BII)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "<init>"]
            pub fn new_byte_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"([B)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "length"]
            pub fn length<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"length",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isEmpty"]
            pub fn isEmpty<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isEmpty",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "charAt"]
            pub fn charAt<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<u16, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"charAt",
                                c"(I)C",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_char_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "codePointAt"]
            pub fn codePointAt<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"codePointAt",
                                c"(I)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "codePointBefore"]
            pub fn codePointBefore<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"codePointBefore",
                                c"(I)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "codePointCount"]
            pub fn codePointCount<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"codePointCount",
                                c"(II)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "offsetByCodePoints"]
            pub fn offsetByCodePoints<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"offsetByCodePoints",
                                c"(II)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getChars"]
            pub fn getChars<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
                arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
                arg3: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getChars",
                                c"(II[CI)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getBytes"]
            #[deprecated]
            pub fn getBytes_int_int_byte_array_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
                arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg3: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getBytes",
                                c"(II[BI)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getBytes"]
            pub fn getBytes_String<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getBytes",
                                c"(Ljava/lang/String;)[B",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getBytes"]
            pub fn getBytes<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getBytes",
                                c"()[B",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "equals"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "equalsIgnoreCase"]
            pub fn equalsIgnoreCase<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equalsIgnoreCase",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "compareTo"]
            pub fn compareTo<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"compareTo",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "compareToIgnoreCase"]
            pub fn compareToIgnoreCase<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"compareToIgnoreCase",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "regionMatches"]
            pub fn regionMatches_int_String_int_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<String>,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"regionMatches",
                                c"(ILjava/lang/String;II)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "regionMatches"]
            pub fn regionMatches_boolean_int_String_int_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
                arg1: i32,
                arg2: impl ::java_spaghetti::AsArg<String>,
                arg3: i32,
                arg4: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"regionMatches",
                                c"(ZILjava/lang/String;II)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "startsWith"]
            pub fn startsWith_String_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"startsWith",
                                c"(Ljava/lang/String;I)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "startsWith"]
            pub fn startsWith_String<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"startsWith",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "endsWith"]
            pub fn endsWith<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"endsWith",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "hashCode"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"hashCode",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "indexOf"]
            pub fn indexOf_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"indexOf",
                                c"(I)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "indexOf"]
            pub fn indexOf_int_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"indexOf",
                                c"(II)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "lastIndexOf"]
            pub fn lastIndexOf_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"lastIndexOf",
                                c"(I)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "lastIndexOf"]
            pub fn lastIndexOf_int_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"lastIndexOf",
                                c"(II)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "indexOf"]
            pub fn indexOf_String<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"indexOf",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "indexOf"]
            pub fn indexOf_String_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"indexOf",
                                c"(Ljava/lang/String;I)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "lastIndexOf"]
            pub fn lastIndexOf_String<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"lastIndexOf",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "lastIndexOf"]
            pub fn lastIndexOf_String_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"lastIndexOf",
                                c"(Ljava/lang/String;I)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "substring"]
            pub fn substring_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"substring",
                                c"(I)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "substring"]
            pub fn substring_int_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"substring",
                                c"(II)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "concat"]
            pub fn concat<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"concat",
                                c"(Ljava/lang/String;)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "replace"]
            pub fn replace_char_char<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: u16,
                arg1: u16,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"replace",
                                c"(CC)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "matches"]
            pub fn matches<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"matches",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "replaceFirst"]
            pub fn replaceFirst<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"replaceFirst",
                                c"(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "replaceAll"]
            pub fn replaceAll<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"replaceAll",
                                c"(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "split"]
            pub fn split_String_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<String, Throwable>>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"split",
                                c"(Ljava/lang/String;I)[Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "split"]
            pub fn split_String<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<String, Throwable>>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"split",
                                c"(Ljava/lang/String;)[Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "toLowerCase"]
            pub fn toLowerCase<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toLowerCase",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "toUpperCase"]
            pub fn toUpperCase<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toUpperCase",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "trim"]
            pub fn trim<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"trim",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "strip"]
            pub fn strip<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"strip",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "stripLeading"]
            pub fn stripLeading<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"stripLeading",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "stripTrailing"]
            pub fn stripTrailing<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"stripTrailing",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isBlank"]
            pub fn isBlank<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isBlank",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "indent"]
            pub fn indent<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"indent",
                                c"(I)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "stripIndent"]
            pub fn stripIndent<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"stripIndent",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "translateEscapes"]
            pub fn translateEscapes<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"translateEscapes",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "toString"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "toCharArray"]
            pub fn toCharArray<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::CharArray>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toCharArray",
                                c"()[C",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "format"]
            pub fn format_String_Object_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ObjectArray<Object, Throwable>>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"format",
                                c"(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "formatted"]
            pub fn formatted<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ObjectArray<Object, Throwable>>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"formatted",
                                c"([Ljava/lang/Object;)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "valueOf"]
            pub fn valueOf_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"valueOf",
                                c"(Ljava/lang/Object;)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "valueOf"]
            pub fn valueOf_char_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"valueOf",
                                c"([C)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "valueOf"]
            pub fn valueOf_char_array_int_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"valueOf",
                                c"([CII)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "copyValueOf"]
            pub fn copyValueOf_char_array_int_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"copyValueOf",
                                c"([CII)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "copyValueOf"]
            pub fn copyValueOf_char_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"copyValueOf",
                                c"([C)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "valueOf"]
            pub fn valueOf_boolean<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: bool,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"valueOf",
                                c"(Z)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "valueOf"]
            pub fn valueOf_char<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: u16,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"valueOf",
                                c"(C)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "valueOf"]
            pub fn valueOf_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"valueOf",
                                c"(I)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "valueOf"]
            pub fn valueOf_long<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: i64,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"valueOf",
                                c"(J)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "valueOf"]
            pub fn valueOf_float<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: f32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"valueOf",
                                c"(F)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "valueOf"]
            pub fn valueOf_double<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: f64,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"valueOf",
                                c"(D)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "intern"]
            pub fn intern<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"intern",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "repeat"]
            pub fn repeat<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"repeat",
                                c"(I)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "class java/lang/Throwable"]
        pub enum Throwable {}
        unsafe impl ::java_spaghetti::ReferenceType for Throwable {}
        unsafe impl ::java_spaghetti::JniType for Throwable {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"java/lang/Throwable")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<Object> for Throwable {}
        impl Throwable {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<Object>> = ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"java/lang/Throwable"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "<init>"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "<init>"]
            pub fn new_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Ljava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "<init>"]
            pub fn new_String_Throwable<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: impl ::java_spaghetti::AsArg<Throwable>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Ljava/lang/String;Ljava/lang/Throwable;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "<init>"]
            pub fn new_Throwable<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<Throwable>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Ljava/lang/Throwable;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getMessage"]
            pub fn getMessage<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getMessage",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getLocalizedMessage"]
            pub fn getLocalizedMessage<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getLocalizedMessage",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getCause"]
            pub fn getCause<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Throwable>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCause",
                                c"()Ljava/lang/Throwable;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "initCause"]
            pub fn initCause<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Throwable>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Throwable>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"initCause",
                                c"(Ljava/lang/Throwable;)Ljava/lang/Throwable;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "toString"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "printStackTrace"]
            pub fn printStackTrace<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"printStackTrace",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "fillInStackTrace"]
            pub fn fillInStackTrace<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Throwable>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"fillInStackTrace",
                                c"()Ljava/lang/Throwable;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getStackTrace"]
            pub fn getStackTrace<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<StackTraceElement, Throwable>>,
                >,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getStackTrace",
                                c"()[Ljava/lang/StackTraceElement;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "setStackTrace"]
            pub fn setStackTrace<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ObjectArray<StackTraceElement, Throwable>>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setStackTrace",
                                c"([Ljava/lang/StackTraceElement;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "addSuppressed"]
            pub fn addSuppressed<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Throwable>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"addSuppressed",
                                c"(Ljava/lang/Throwable;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getSuppressed"]
            pub fn getSuppressed<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<Throwable, Throwable>>,
                >,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getSuppressed",
                                c"()[Ljava/lang/Throwable;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
    }

    pub mod util {
        #[doc = "interface java/util/Iterator"]
        pub enum Iterator {}
        unsafe impl ::java_spaghetti::ReferenceType for Iterator {}
        unsafe impl ::java_spaghetti::JniType for Iterator {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"java/util/Iterator")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for Iterator {}
        impl Iterator {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"java/util/Iterator"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "hasNext"]
            pub fn hasNext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"hasNext",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "next"]
            pub fn next<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"next",
                                c"()Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "remove"]
            pub fn remove<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"remove",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "interface java/util/List"]
        pub enum List {}
        unsafe impl ::java_spaghetti::ReferenceType for List {}
        unsafe impl ::java_spaghetti::JniType for List {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"java/util/List")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for List {}
        impl List {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"java/util/List"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "size"]
            pub fn size<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"size",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isEmpty"]
            pub fn isEmpty<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isEmpty",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "contains"]
            pub fn contains<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"contains",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "iterator"]
            pub fn iterator<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Iterator>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"iterator",
                                c"()Ljava/util/Iterator;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "toArray"]
            pub fn toArray<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toArray",
                                c"()[Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "toArray"]
            pub fn toArray_Object_array<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                >,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toArray",
                                c"([Ljava/lang/Object;)[Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "add"]
            pub fn add_Object<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"add",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "remove"]
            pub fn remove_Object<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"remove",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "clear"]
            pub fn clear<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"clear",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "equals"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "hashCode"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"hashCode",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "get"]
            pub fn get<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"get",
                                c"(I)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "set"]
            pub fn set<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"set",
                                c"(ILjava/lang/Object;)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "add"]
            pub fn add_int_Object<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"add",
                                c"(ILjava/lang/Object;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "remove"]
            pub fn remove_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"remove",
                                c"(I)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "indexOf"]
            pub fn indexOf<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"indexOf",
                                c"(Ljava/lang/Object;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "lastIndexOf"]
            pub fn lastIndexOf<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"lastIndexOf",
                                c"(Ljava/lang/Object;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "subList"]
            pub fn subList<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"subList",
                                c"(II)Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "addFirst"]
            pub fn addFirst<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"addFirst",
                                c"(Ljava/lang/Object;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "addLast"]
            pub fn addLast<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"addLast",
                                c"(Ljava/lang/Object;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getFirst"]
            pub fn getFirst<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getFirst",
                                c"()Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getLast"]
            pub fn getLast<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getLast",
                                c"()Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "removeFirst"]
            pub fn removeFirst<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"removeFirst",
                                c"()Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "removeLast"]
            pub fn removeLast<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"removeLast",
                                c"()Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "reversed"]
            pub fn reversed<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"reversed",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"of",
                                c"()Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"of",
                                c"(Ljava/lang/Object;)Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"of",
                                c"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"of",
                                c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg7),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg8: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg7),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg8),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg8: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg9: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg7),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg8),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg9),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                >,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"of",
                                c"([Ljava/lang/Object;)Ljava/util/List;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "interface java/util/Map"]
        pub enum Map {}
        unsafe impl ::java_spaghetti::ReferenceType for Map {}
        unsafe impl ::java_spaghetti::JniType for Map {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"java/util/Map")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for Map {}
        impl Map {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"java/util/Map"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "size"]
            pub fn size<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"size",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isEmpty"]
            pub fn isEmpty<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isEmpty",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "containsKey"]
            pub fn containsKey<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"containsKey",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "containsValue"]
            pub fn containsValue<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"containsValue",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "get"]
            pub fn get<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"get",
                                c"(Ljava/lang/Object;)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "put"]
            pub fn put<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"put",
                                c"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "remove"]
            pub fn remove_Object<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"remove",
                                c"(Ljava/lang/Object;)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "putAll"]
            pub fn putAll<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Map>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"putAll",
                                c"(Ljava/util/Map;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "clear"]
            pub fn clear<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"clear",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "keySet"]
            pub fn keySet<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"keySet",
                                c"()Ljava/util/Set;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "entrySet"]
            pub fn entrySet<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"entrySet",
                                c"()Ljava/util/Set;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "equals"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "hashCode"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"hashCode",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getOrDefault"]
            pub fn getOrDefault<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getOrDefault",
                                c"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "putIfAbsent"]
            pub fn putIfAbsent<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"putIfAbsent",
                                c"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "remove"]
            pub fn remove_Object_Object<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"remove",
                                c"(Ljava/lang/Object;Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "replace"]
            pub fn replace_Object_Object_Object<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"replace",
                                c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "replace"]
            pub fn replace_Object_Object<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"replace",
                                c"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"of",
                                c"()Ljava/util/Map;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"of",
                                c"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg7),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg8: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg9: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg7),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg8),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg9),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg8: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg9: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg10: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg11: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg7),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg8),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg9),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg10),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg11),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object<
                'env,
            >(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg8: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg9: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg10: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg11: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg12: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg13: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg7),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg8),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg9),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg10),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg11),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg12),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg13),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object<
                'env,
            >(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg8: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg9: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg10: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg11: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg12: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg13: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg14: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg15: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg7),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg8),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg9),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg10),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg11),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg12),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg13),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg14),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg15),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object<
                'env,
            >(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg8: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg9: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg10: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg11: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg12: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg13: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg14: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg15: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg16: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg17: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg7),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg8),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg9),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg10),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg11),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg12),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg13),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg14),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg15),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg16),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg17),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object<
                'env,
            >(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg8: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg9: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg10: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg11: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg12: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg13: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg14: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg15: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg16: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg17: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg18: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg19: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg7),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg8),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg9),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg10),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg11),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg12),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg13),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg14),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg15),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg16),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg17),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg18),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg19),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "ofEntries"]
            pub fn ofEntries<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ObjectArray<Map_Entry, super::lang::Throwable>>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"ofEntries",
                                c"([Ljava/util/Map$Entry;)Ljava/util/Map;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "entry"]
            pub fn entry<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map_Entry>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"entry",
                                c"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map$Entry;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "copyOf"]
            pub fn copyOf<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<Map>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"copyOf",
                                c"(Ljava/util/Map;)Ljava/util/Map;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "interface java/util/Map$Entry"]
        pub enum Map_Entry {}
        unsafe impl ::java_spaghetti::ReferenceType for Map_Entry {}
        unsafe impl ::java_spaghetti::JniType for Map_Entry {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"java/util/Map$Entry")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for Map_Entry {}
        impl Map_Entry {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"java/util/Map$Entry"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "getKey"]
            pub fn getKey<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getKey",
                                c"()Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getValue"]
            pub fn getValue<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getValue",
                                c"()Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "setValue"]
            pub fn setValue<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setValue",
                                c"(Ljava/lang/Object;)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "equals"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "hashCode"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"hashCode",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "copyOf"]
            pub fn copyOf<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<Map_Entry>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map_Entry>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"copyOf",
                                c"(Ljava/util/Map$Entry;)Ljava/util/Map$Entry;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "interface java/util/Set"]
        pub enum Set {}
        unsafe impl ::java_spaghetti::ReferenceType for Set {}
        unsafe impl ::java_spaghetti::JniType for Set {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"java/util/Set")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for Set {}
        impl Set {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"java/util/Set"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "size"]
            pub fn size<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"size",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "isEmpty"]
            pub fn isEmpty<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isEmpty",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "contains"]
            pub fn contains<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"contains",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "iterator"]
            pub fn iterator<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Iterator>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"iterator",
                                c"()Ljava/util/Iterator;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "toArray"]
            pub fn toArray<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toArray",
                                c"()[Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "toArray"]
            pub fn toArray_Object_array<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                >,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toArray",
                                c"([Ljava/lang/Object;)[Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "add"]
            pub fn add<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"add",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "remove"]
            pub fn remove<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"remove",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "clear"]
            pub fn clear<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"clear",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "equals"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "hashCode"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"hashCode",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"of",
                                c"()Ljava/util/Set;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"of",
                                c"(Ljava/lang/Object;)Ljava/util/Set;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"of",
                                c"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"of",
                                c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg7),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg8: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg7),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg8),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg8: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg9: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg7),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg8),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg9),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"of" , c"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;" ))). as_raw ();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "of"]
            pub fn of_Object_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                >,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"of",
                                c"([Ljava/lang/Object;)Ljava/util/Set;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "final class java/util/UUID"]
        pub enum UUID {}
        unsafe impl ::java_spaghetti::ReferenceType for UUID {}
        unsafe impl ::java_spaghetti::JniType for UUID {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"java/util/UUID")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for UUID {}
        impl UUID {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"java/util/UUID"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "<init>"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: i64,
                arg1: i64,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(JJ)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "randomUUID"]
            pub fn randomUUID<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, UUID>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"randomUUID",
                                c"()Ljava/util/UUID;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "nameUUIDFromBytes"]
            pub fn nameUUIDFromBytes<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, UUID>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"nameUUIDFromBytes",
                                c"([B)Ljava/util/UUID;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "fromString"]
            pub fn fromString<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, UUID>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"fromString",
                                c"(Ljava/lang/String;)Ljava/util/UUID;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getLeastSignificantBits"]
            pub fn getLeastSignificantBits<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getLeastSignificantBits",
                                c"()J",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_long_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "getMostSignificantBits"]
            pub fn getMostSignificantBits<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getMostSignificantBits",
                                c"()J",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_long_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "version"]
            pub fn version<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"version",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "variant"]
            pub fn variant<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"variant",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "timestamp"]
            pub fn timestamp<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"timestamp",
                                c"()J",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_long_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "clockSequence"]
            pub fn clockSequence<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"clockSequence",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "node"]
            pub fn node<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"node",
                                c"()J",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_long_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "toString"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::String>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "hashCode"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"hashCode",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "equals"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "compareTo"]
            pub fn compareTo<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<UUID>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"compareTo",
                                c"(Ljava/util/UUID;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
    }
}
