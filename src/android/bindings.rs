// WARNING:  This file was autogenerated by java-spaghetti.  Any changes to this file may be lost!!!

#![allow(unused_imports)]
#![allow(non_camel_case_types)] // We map Java inner classes to Outer_Inner
#![allow(dead_code)] // We generate structs for private Java types too, just in case.
#![allow(deprecated)] // We're generating deprecated types/methods
#![allow(non_upper_case_globals)] // We might be generating Java style fields/methods
#![allow(non_snake_case)] // We might be generating Java style fields/methods
#![allow(clippy::all)] // we don't ensure generated bindings are clippy-compliant at all.
#![allow(unsafe_code)] // play nice if user has `deny(unsafe_code)` in their crate.

mod util {
    use std::char::DecodeUtf16Error;
    use std::fmt;

    use java_spaghetti::sys::jsize;
    use java_spaghetti::{Env, Local, StringChars, ThrowableType};

    use super::java::lang::{String as JString, Throwable};

    impl fmt::Debug for Throwable {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            writeln!(f, "java::lang::Throwable")?;

            match self.getMessage() {
                Ok(Some(message)) => writeln!(f, "    getMessage:            {:?}", message)?,
                Ok(None) => writeln!(f, "    getMessage:            N/A (returned null)")?,
                Err(_) => writeln!(f, "    getMessage:            N/A (threw an exception!)")?,
            }

            match self.getLocalizedMessage() {
                Ok(Some(message)) => writeln!(f, "    getLocalizedMessage:   {:?}", message)?,
                Ok(None) => writeln!(f, "    getLocalizedMessage:   N/A (returned null)")?,
                Err(_) => writeln!(f, "    getLocalizedMessage:   N/A (threw an exception!)")?,
            }

            match self.getStackTrace() {
                Err(_) => writeln!(f, "    getStackTrace:         N/A (threw an exception!)")?,
                Ok(None) => writeln!(f, "    getStackTrace:         N/A (returned null)")?,
                Ok(Some(stack_trace)) => {
                    writeln!(f, "    getStackTrace:")?;
                    for frame in stack_trace.iter() {
                        match frame {
                            None => writeln!(f, "        N/A (frame was null)")?,
                            Some(frame) => {
                                let file_line = match (frame.getFileName(), frame.getLineNumber()) {
                                    (Ok(Some(file)), Ok(line)) => {
                                        format!("{}({}):", file.to_string_lossy(), line)
                                    }
                                    (Ok(Some(file)), _) => format!("{}:", file.to_string_lossy()),
                                    (_, _) => "N/A (getFileName threw an exception or returned null)".to_owned(),
                                };

                                let class_method = match (frame.getClassName(), frame.getMethodName()) {
                                    (Ok(Some(class)), Ok(Some(method))) => {
                                        format!("{}.{}", class.to_string_lossy(), method.to_string_lossy())
                                    }
                                    (Ok(Some(class)), _) => class.to_string_lossy(),
                                    (_, Ok(Some(method))) => method.to_string_lossy(),
                                    (_, _) => "N/A (getClassName + getMethodName threw exceptions or returned null)"
                                        .to_owned(),
                                };

                                writeln!(f, "        {:120}{}", file_line, class_method)?;
                            }
                        }
                    }
                }
            }

            // Consider also dumping:
            // API level 1+:
            //      getCause()
            // API level 19+:
            //      getSuppressed()

            Ok(())
        }
    }

    impl JString {
        /// Create new local string from an Env + AsRef<str>
        pub fn from_env_str<'env, S: AsRef<str>>(env: Env<'env>, string: S) -> Local<'env, Self> {
            let chars = string.as_ref().encode_utf16().collect::<Vec<_>>();

            let string = unsafe { env.new_string(chars.as_ptr(), chars.len() as jsize) };
            unsafe { Local::from_raw(env, string) }
        }

        fn string_chars(&self) -> StringChars {
            unsafe {
                let env = Env::from_raw(self.0.env);
                StringChars::from_env_jstring(env, self.0.object)
            }
        }

        /// Returns a new [Ok]\([String]\), or an [Err]\([DecodeUtf16Error]\) if if it contained any invalid UTF16.
        ///
        /// [Ok]:                       https://doc.rust-lang.org/std/result/enum.Result.html#variant.Ok
        /// [Err]:                      https://doc.rust-lang.org/std/result/enum.Result.html#variant.Err
        /// [DecodeUtf16Error]:         https://doc.rust-lang.org/std/char/struct.DecodeUtf16Error.html
        /// [String]:                   https://doc.rust-lang.org/std/string/struct.String.html
        /// [REPLACEMENT_CHARACTER]:    https://doc.rust-lang.org/std/char/constant.REPLACEMENT_CHARACTER.html
        pub fn to_string(&self) -> Result<String, DecodeUtf16Error> {
            self.string_chars().to_string()
        }

        /// Returns a new [String] with any invalid UTF16 characters replaced with [REPLACEMENT_CHARACTER]s (`'\u{FFFD}'`.)
        ///
        /// [String]:                   https://doc.rust-lang.org/std/string/struct.String.html
        /// [REPLACEMENT_CHARACTER]:    https://doc.rust-lang.org/std/char/constant.REPLACEMENT_CHARACTER.html
        pub fn to_string_lossy(&self) -> String {
            self.string_chars().to_string_lossy()
        }
    }

    // OsString doesn't implement Display, so neither does java::lang::String.
    impl fmt::Debug for JString {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            fmt::Debug::fmt(&self.to_string_lossy(), f) // XXX: Unneccessary alloc?  Shouldn't use lossy here?
        }
    }

    impl ThrowableType for Throwable {}
}

pub mod android {

    pub mod bluetooth {

        pub mod le {

            /// pub class [AdvertiseCallback](https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html)
            #[repr(transparent)]
            pub struct AdvertiseCallback(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for AdvertiseCallback {}

            unsafe impl ::java_spaghetti::JniType for AdvertiseCallback {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/AdvertiseCallback\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for AdvertiseCallback {}
            impl ::std::ops::Deref for AdvertiseCallback {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl AdvertiseCallback {
                /// [AdvertiseCallback](https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html#AdvertiseCallback())
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseCallback", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                    unsafe {
                        let __jni_args = [];
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseCallback\0",
                            "<init>\0",
                            "()V\0",
                        );
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [onStartSuccess](https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html#onStartSuccess(android.bluetooth.le.AdvertiseSettings))
                pub fn onStartSuccess<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<AdvertiseSettings>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertiseCallback", java.flags == PUBLIC, .name == "onStartSuccess", .descriptor == "(Landroid/bluetooth/le/AdvertiseSettings;)V"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseCallback\0",
                            "onStartSuccess\0",
                            "(Landroid/bluetooth/le/AdvertiseSettings;)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [onStartFailure](https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html#onStartFailure(int))
                pub fn onStartFailure<'env>(
                    &'env self,
                    arg0: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertiseCallback", java.flags == PUBLIC, .name == "onStartFailure", .descriptor == "(I)V"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseCallback\0",
                            "onStartFailure\0",
                            "(I)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// public static final [ADVERTISE_FAILED_ALREADY_STARTED](https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html#ADVERTISE_FAILED_ALREADY_STARTED)
                pub const ADVERTISE_FAILED_ALREADY_STARTED: i32 = 3;

                /// public static final [ADVERTISE_FAILED_DATA_TOO_LARGE](https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html#ADVERTISE_FAILED_DATA_TOO_LARGE)
                pub const ADVERTISE_FAILED_DATA_TOO_LARGE: i32 = 1;

                /// public static final [ADVERTISE_FAILED_FEATURE_UNSUPPORTED](https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html#ADVERTISE_FAILED_FEATURE_UNSUPPORTED)
                pub const ADVERTISE_FAILED_FEATURE_UNSUPPORTED: i32 = 5;

                /// public static final [ADVERTISE_FAILED_INTERNAL_ERROR](https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html#ADVERTISE_FAILED_INTERNAL_ERROR)
                pub const ADVERTISE_FAILED_INTERNAL_ERROR: i32 = 4;

                /// public static final [ADVERTISE_FAILED_TOO_MANY_ADVERTISERS](https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html#ADVERTISE_FAILED_TOO_MANY_ADVERTISERS)
                pub const ADVERTISE_FAILED_TOO_MANY_ADVERTISERS: i32 = 2;
            }

            /// pub final class [AdvertiseData](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html)
            #[repr(transparent)]
            pub struct AdvertiseData(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for AdvertiseData {}

            unsafe impl ::java_spaghetti::JniType for AdvertiseData {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/AdvertiseData\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::os::Parcelable> for AdvertiseData {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for AdvertiseData {}
            impl ::std::ops::Deref for AdvertiseData {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl ::std::convert::AsRef<super::super::os::Parcelable> for AdvertiseData {
                fn as_ref(&self) -> &super::super::os::Parcelable {
                    unsafe { &*(self as *const Self as *const super::super::os::Parcelable) }
                }
            }
            impl AdvertiseData {
                /// [getServiceUuids](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#getServiceUuids())
                pub fn getServiceUuids<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::util::List>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseData", java.flags == PUBLIC, .name == "getServiceUuids", .descriptor == "()Ljava/util/List;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseData\0",
                            "getServiceUuids\0",
                            "()Ljava/util/List;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getServiceSolicitationUuids](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#getServiceSolicitationUuids())
                pub fn getServiceSolicitationUuids<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::util::List>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseData", java.flags == PUBLIC, .name == "getServiceSolicitationUuids", .descriptor == "()Ljava/util/List;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseData\0",
                            "getServiceSolicitationUuids\0",
                            "()Ljava/util/List;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getTransportDiscoveryData](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#getTransportDiscoveryData())
                pub fn getTransportDiscoveryData<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::util::List>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseData", java.flags == PUBLIC, .name == "getTransportDiscoveryData", .descriptor == "()Ljava/util/List;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseData\0",
                            "getTransportDiscoveryData\0",
                            "()Ljava/util/List;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getManufacturerSpecificData](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#getManufacturerSpecificData())
                pub fn getManufacturerSpecificData<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::util::SparseArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseData", java.flags == PUBLIC, .name == "getManufacturerSpecificData", .descriptor == "()Landroid/util/SparseArray;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseData\0",
                            "getManufacturerSpecificData\0",
                            "()Landroid/util/SparseArray;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getServiceData](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#getServiceData())
                pub fn getServiceData<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::util::Map>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseData", java.flags == PUBLIC, .name == "getServiceData", .descriptor == "()Ljava/util/Map;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseData\0",
                            "getServiceData\0",
                            "()Ljava/util/Map;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getIncludeTxPowerLevel](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#getIncludeTxPowerLevel())
                pub fn getIncludeTxPowerLevel<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseData", java.flags == PUBLIC, .name == "getIncludeTxPowerLevel", .descriptor == "()Z"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseData\0",
                            "getIncludeTxPowerLevel\0",
                            "()Z\0",
                        );
                        __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getIncludeDeviceName](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#getIncludeDeviceName())
                pub fn getIncludeDeviceName<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseData", java.flags == PUBLIC, .name == "getIncludeDeviceName", .descriptor == "()Z"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseData\0",
                            "getIncludeDeviceName\0",
                            "()Z\0",
                        );
                        __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [hashCode](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#hashCode())
                pub fn hashCode<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertiseData", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseData\0",
                            "hashCode\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [equals](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#equals(java.lang.Object))
                pub fn equals<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<super::super::super::java::lang::Object>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseData", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseData\0",
                            "equals\0",
                            "(Ljava/lang/Object;)Z\0",
                        );
                        __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [toString](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#toString())
                pub fn toString<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseData", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseData\0",
                            "toString\0",
                            "()Ljava/lang/String;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [describeContents](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html#describeContents())
                pub fn describeContents<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertiseData", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseData\0",
                            "describeContents\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }
            }

            /// pub final class [AdvertiseData.Builder](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html)
            #[repr(transparent)]
            pub struct AdvertiseData_Builder(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for AdvertiseData_Builder {}

            unsafe impl ::java_spaghetti::JniType for AdvertiseData_Builder {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/AdvertiseData$Builder\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for AdvertiseData_Builder {}
            impl ::std::ops::Deref for AdvertiseData_Builder {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl AdvertiseData_Builder {
                /// [Builder](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html#Builder())
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseData$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                    unsafe {
                        let __jni_args = [];
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseData$Builder\0",
                            "<init>\0",
                            "()V\0",
                        );
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [addServiceUuid](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html#addServiceUuid(android.os.ParcelUuid))
                pub fn addServiceUuid<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseData_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseData$Builder", java.flags == PUBLIC, .name == "addServiceUuid", .descriptor == "(Landroid/os/ParcelUuid;)Landroid/bluetooth/le/AdvertiseData$Builder;"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseData$Builder\0",
                            "addServiceUuid\0",
                            "(Landroid/os/ParcelUuid;)Landroid/bluetooth/le/AdvertiseData$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [addServiceSolicitationUuid](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html#addServiceSolicitationUuid(android.os.ParcelUuid))
                pub fn addServiceSolicitationUuid<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseData_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseData$Builder", java.flags == PUBLIC, .name == "addServiceSolicitationUuid", .descriptor == "(Landroid/os/ParcelUuid;)Landroid/bluetooth/le/AdvertiseData$Builder;"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseData$Builder\0",
                            "addServiceSolicitationUuid\0",
                            "(Landroid/os/ParcelUuid;)Landroid/bluetooth/le/AdvertiseData$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [addServiceData](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html#addServiceData(android.os.ParcelUuid,%20byte%5B%5D))
                pub fn addServiceData<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                    arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseData_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseData$Builder", java.flags == PUBLIC, .name == "addServiceData", .descriptor == "(Landroid/os/ParcelUuid;[B)Landroid/bluetooth/le/AdvertiseData$Builder;"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseData$Builder\0",
                            "addServiceData\0",
                            "(Landroid/os/ParcelUuid;[B)Landroid/bluetooth/le/AdvertiseData$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [addTransportDiscoveryData](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html#addTransportDiscoveryData(android.bluetooth.le.TransportDiscoveryData))
                pub fn addTransportDiscoveryData<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<TransportDiscoveryData>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseData_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseData$Builder", java.flags == PUBLIC, .name == "addTransportDiscoveryData", .descriptor == "(Landroid/bluetooth/le/TransportDiscoveryData;)Landroid/bluetooth/le/AdvertiseData$Builder;"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/AdvertiseData$Builder\0", "addTransportDiscoveryData\0", "(Landroid/bluetooth/le/TransportDiscoveryData;)Landroid/bluetooth/le/AdvertiseData$Builder;\0");
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [addManufacturerData](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html#addManufacturerData(int,%20byte%5B%5D))
                pub fn addManufacturerData<'env>(
                    &'env self,
                    arg0: i32,
                    arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseData_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseData$Builder", java.flags == PUBLIC, .name == "addManufacturerData", .descriptor == "(I[B)Landroid/bluetooth/le/AdvertiseData$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0), arg1.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseData$Builder\0",
                            "addManufacturerData\0",
                            "(I[B)Landroid/bluetooth/le/AdvertiseData$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setIncludeTxPowerLevel](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html#setIncludeTxPowerLevel(boolean))
                pub fn setIncludeTxPowerLevel<'env>(
                    &'env self,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseData_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseData$Builder", java.flags == PUBLIC, .name == "setIncludeTxPowerLevel", .descriptor == "(Z)Landroid/bluetooth/le/AdvertiseData$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseData$Builder\0",
                            "setIncludeTxPowerLevel\0",
                            "(Z)Landroid/bluetooth/le/AdvertiseData$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setIncludeDeviceName](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html#setIncludeDeviceName(boolean))
                pub fn setIncludeDeviceName<'env>(
                    &'env self,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseData_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseData$Builder", java.flags == PUBLIC, .name == "setIncludeDeviceName", .descriptor == "(Z)Landroid/bluetooth/le/AdvertiseData$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseData$Builder\0",
                            "setIncludeDeviceName\0",
                            "(Z)Landroid/bluetooth/le/AdvertiseData$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [build](https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html#build())
                pub fn build<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseData>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseData$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/bluetooth/le/AdvertiseData;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseData$Builder\0",
                            "build\0",
                            "()Landroid/bluetooth/le/AdvertiseData;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }
            }

            /// pub final class [AdvertiseSettings](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html)
            #[repr(transparent)]
            pub struct AdvertiseSettings(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for AdvertiseSettings {}

            unsafe impl ::java_spaghetti::JniType for AdvertiseSettings {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/AdvertiseSettings\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::os::Parcelable> for AdvertiseSettings {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for AdvertiseSettings {}
            impl ::std::ops::Deref for AdvertiseSettings {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl ::std::convert::AsRef<super::super::os::Parcelable> for AdvertiseSettings {
                fn as_ref(&self) -> &super::super::os::Parcelable {
                    unsafe { &*(self as *const Self as *const super::super::os::Parcelable) }
                }
            }
            impl AdvertiseSettings {
                /// [getMode](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#getMode())
                pub fn getMode<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertiseSettings", java.flags == PUBLIC, .name == "getMode", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseSettings\0",
                            "getMode\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getTxPowerLevel](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#getTxPowerLevel())
                pub fn getTxPowerLevel<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertiseSettings", java.flags == PUBLIC, .name == "getTxPowerLevel", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseSettings\0",
                            "getTxPowerLevel\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [isConnectable](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#isConnectable())
                pub fn isConnectable<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseSettings", java.flags == PUBLIC, .name == "isConnectable", .descriptor == "()Z"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseSettings\0",
                            "isConnectable\0",
                            "()Z\0",
                        );
                        __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getTimeout](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#getTimeout())
                pub fn getTimeout<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertiseSettings", java.flags == PUBLIC, .name == "getTimeout", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseSettings\0",
                            "getTimeout\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [toString](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#toString())
                pub fn toString<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseSettings", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseSettings\0",
                            "toString\0",
                            "()Ljava/lang/String;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [describeContents](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#describeContents())
                pub fn describeContents<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertiseSettings", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseSettings\0",
                            "describeContents\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// public static final [ADVERTISE_MODE_BALANCED](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_MODE_BALANCED)
                pub const ADVERTISE_MODE_BALANCED: i32 = 1;

                /// public static final [ADVERTISE_MODE_LOW_LATENCY](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_MODE_LOW_LATENCY)
                pub const ADVERTISE_MODE_LOW_LATENCY: i32 = 2;

                /// public static final [ADVERTISE_MODE_LOW_POWER](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_MODE_LOW_POWER)
                pub const ADVERTISE_MODE_LOW_POWER: i32 = 0;

                /// public static final [ADVERTISE_TX_POWER_HIGH](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_TX_POWER_HIGH)
                pub const ADVERTISE_TX_POWER_HIGH: i32 = 3;

                /// public static final [ADVERTISE_TX_POWER_LOW](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_TX_POWER_LOW)
                pub const ADVERTISE_TX_POWER_LOW: i32 = 1;

                /// public static final [ADVERTISE_TX_POWER_MEDIUM](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_TX_POWER_MEDIUM)
                pub const ADVERTISE_TX_POWER_MEDIUM: i32 = 2;

                /// public static final [ADVERTISE_TX_POWER_ULTRA_LOW](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_TX_POWER_ULTRA_LOW)
                pub const ADVERTISE_TX_POWER_ULTRA_LOW: i32 = 0;
            }

            /// pub final class [AdvertiseSettings.Builder](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html)
            #[repr(transparent)]
            pub struct AdvertiseSettings_Builder(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for AdvertiseSettings_Builder {}

            unsafe impl ::java_spaghetti::JniType for AdvertiseSettings_Builder {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/AdvertiseSettings$Builder\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for AdvertiseSettings_Builder {}
            impl ::std::ops::Deref for AdvertiseSettings_Builder {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl AdvertiseSettings_Builder {
                /// [Builder](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html#Builder())
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseSettings$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                    unsafe {
                        let __jni_args = [];
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseSettings$Builder\0",
                            "<init>\0",
                            "()V\0",
                        );
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setAdvertiseMode](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html#setAdvertiseMode(int))
                pub fn setAdvertiseMode<'env>(
                    &'env self,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseSettings$Builder", java.flags == PUBLIC, .name == "setAdvertiseMode", .descriptor == "(I)Landroid/bluetooth/le/AdvertiseSettings$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseSettings$Builder\0",
                            "setAdvertiseMode\0",
                            "(I)Landroid/bluetooth/le/AdvertiseSettings$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setTxPowerLevel](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html#setTxPowerLevel(int))
                pub fn setTxPowerLevel<'env>(
                    &'env self,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseSettings$Builder", java.flags == PUBLIC, .name == "setTxPowerLevel", .descriptor == "(I)Landroid/bluetooth/le/AdvertiseSettings$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseSettings$Builder\0",
                            "setTxPowerLevel\0",
                            "(I)Landroid/bluetooth/le/AdvertiseSettings$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setConnectable](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html#setConnectable(boolean))
                pub fn setConnectable<'env>(
                    &'env self,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseSettings$Builder", java.flags == PUBLIC, .name == "setConnectable", .descriptor == "(Z)Landroid/bluetooth/le/AdvertiseSettings$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseSettings$Builder\0",
                            "setConnectable\0",
                            "(Z)Landroid/bluetooth/le/AdvertiseSettings$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setTimeout](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html#setTimeout(int))
                pub fn setTimeout<'env>(
                    &'env self,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseSettings$Builder", java.flags == PUBLIC, .name == "setTimeout", .descriptor == "(I)Landroid/bluetooth/le/AdvertiseSettings$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseSettings$Builder\0",
                            "setTimeout\0",
                            "(I)Landroid/bluetooth/le/AdvertiseSettings$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [build](https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html#build())
                pub fn build<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertiseSettings>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertiseSettings$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/bluetooth/le/AdvertiseSettings;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertiseSettings$Builder\0",
                            "build\0",
                            "()Landroid/bluetooth/le/AdvertiseSettings;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }
            }

            /// pub final class [AdvertisingSet](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSet.html)
            #[repr(transparent)]
            pub struct AdvertisingSet(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for AdvertisingSet {}

            unsafe impl ::java_spaghetti::JniType for AdvertisingSet {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/AdvertisingSet\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for AdvertisingSet {}
            impl ::std::ops::Deref for AdvertisingSet {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl AdvertisingSet {
                /// [enableAdvertising](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSet.html#enableAdvertising(boolean,%20int,%20int))
                pub fn enableAdvertising<'env>(
                    &'env self,
                    arg0: bool,
                    arg1: i32,
                    arg2: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSet", java.flags == PUBLIC, .name == "enableAdvertising", .descriptor == "(ZII)V"
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSet\0",
                            "enableAdvertising\0",
                            "(ZII)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setAdvertisingData](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSet.html#setAdvertisingData(android.bluetooth.le.AdvertiseData))
                pub fn setAdvertisingData<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<AdvertiseData>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSet", java.flags == PUBLIC, .name == "setAdvertisingData", .descriptor == "(Landroid/bluetooth/le/AdvertiseData;)V"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSet\0",
                            "setAdvertisingData\0",
                            "(Landroid/bluetooth/le/AdvertiseData;)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setScanResponseData](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSet.html#setScanResponseData(android.bluetooth.le.AdvertiseData))
                pub fn setScanResponseData<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<AdvertiseData>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSet", java.flags == PUBLIC, .name == "setScanResponseData", .descriptor == "(Landroid/bluetooth/le/AdvertiseData;)V"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSet\0",
                            "setScanResponseData\0",
                            "(Landroid/bluetooth/le/AdvertiseData;)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setAdvertisingParameters](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSet.html#setAdvertisingParameters(android.bluetooth.le.AdvertisingSetParameters))
                pub fn setAdvertisingParameters<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSetParameters>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSet", java.flags == PUBLIC, .name == "setAdvertisingParameters", .descriptor == "(Landroid/bluetooth/le/AdvertisingSetParameters;)V"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSet\0",
                            "setAdvertisingParameters\0",
                            "(Landroid/bluetooth/le/AdvertisingSetParameters;)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setPeriodicAdvertisingParameters](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSet.html#setPeriodicAdvertisingParameters(android.bluetooth.le.PeriodicAdvertisingParameters))
                pub fn setPeriodicAdvertisingParameters<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<PeriodicAdvertisingParameters>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSet", java.flags == PUBLIC, .name == "setPeriodicAdvertisingParameters", .descriptor == "(Landroid/bluetooth/le/PeriodicAdvertisingParameters;)V"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSet\0",
                            "setPeriodicAdvertisingParameters\0",
                            "(Landroid/bluetooth/le/PeriodicAdvertisingParameters;)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setPeriodicAdvertisingData](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSet.html#setPeriodicAdvertisingData(android.bluetooth.le.AdvertiseData))
                pub fn setPeriodicAdvertisingData<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<AdvertiseData>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSet", java.flags == PUBLIC, .name == "setPeriodicAdvertisingData", .descriptor == "(Landroid/bluetooth/le/AdvertiseData;)V"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSet\0",
                            "setPeriodicAdvertisingData\0",
                            "(Landroid/bluetooth/le/AdvertiseData;)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setPeriodicAdvertisingEnabled](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSet.html#setPeriodicAdvertisingEnabled(boolean))
                pub fn setPeriodicAdvertisingEnabled<'env>(
                    &'env self,
                    arg0: bool,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSet", java.flags == PUBLIC, .name == "setPeriodicAdvertisingEnabled", .descriptor == "(Z)V"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSet\0",
                            "setPeriodicAdvertisingEnabled\0",
                            "(Z)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }
            }

            /// pub class [AdvertisingSetCallback](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html)
            #[repr(transparent)]
            pub struct AdvertisingSetCallback(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for AdvertisingSetCallback {}

            unsafe impl ::java_spaghetti::JniType for AdvertisingSetCallback {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/AdvertisingSetCallback\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for AdvertisingSetCallback {}
            impl ::std::ops::Deref for AdvertisingSetCallback {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl AdvertisingSetCallback {
                /// [AdvertisingSetCallback](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#AdvertisingSetCallback())
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertisingSetCallback", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                    unsafe {
                        let __jni_args = [];
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetCallback\0",
                            "<init>\0",
                            "()V\0",
                        );
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [onAdvertisingSetStarted](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#onAdvertisingSetStarted(android.bluetooth.le.AdvertisingSet,%20int,%20int))
                pub fn onAdvertisingSetStarted<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSet>,
                    arg1: i32,
                    arg2: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSetCallback", java.flags == PUBLIC, .name == "onAdvertisingSetStarted", .descriptor == "(Landroid/bluetooth/le/AdvertisingSet;II)V"
                    unsafe {
                        let __jni_args = [
                            arg0.as_arg_jvalue(),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetCallback\0",
                            "onAdvertisingSetStarted\0",
                            "(Landroid/bluetooth/le/AdvertisingSet;II)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [onAdvertisingSetStopped](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#onAdvertisingSetStopped(android.bluetooth.le.AdvertisingSet))
                pub fn onAdvertisingSetStopped<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSet>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSetCallback", java.flags == PUBLIC, .name == "onAdvertisingSetStopped", .descriptor == "(Landroid/bluetooth/le/AdvertisingSet;)V"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetCallback\0",
                            "onAdvertisingSetStopped\0",
                            "(Landroid/bluetooth/le/AdvertisingSet;)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [onAdvertisingEnabled](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#onAdvertisingEnabled(android.bluetooth.le.AdvertisingSet,%20boolean,%20int))
                pub fn onAdvertisingEnabled<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSet>,
                    arg1: bool,
                    arg2: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSetCallback", java.flags == PUBLIC, .name == "onAdvertisingEnabled", .descriptor == "(Landroid/bluetooth/le/AdvertisingSet;ZI)V"
                    unsafe {
                        let __jni_args = [
                            arg0.as_arg_jvalue(),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetCallback\0",
                            "onAdvertisingEnabled\0",
                            "(Landroid/bluetooth/le/AdvertisingSet;ZI)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [onAdvertisingDataSet](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#onAdvertisingDataSet(android.bluetooth.le.AdvertisingSet,%20int))
                pub fn onAdvertisingDataSet<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSet>,
                    arg1: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSetCallback", java.flags == PUBLIC, .name == "onAdvertisingDataSet", .descriptor == "(Landroid/bluetooth/le/AdvertisingSet;I)V"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetCallback\0",
                            "onAdvertisingDataSet\0",
                            "(Landroid/bluetooth/le/AdvertisingSet;I)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [onScanResponseDataSet](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#onScanResponseDataSet(android.bluetooth.le.AdvertisingSet,%20int))
                pub fn onScanResponseDataSet<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSet>,
                    arg1: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSetCallback", java.flags == PUBLIC, .name == "onScanResponseDataSet", .descriptor == "(Landroid/bluetooth/le/AdvertisingSet;I)V"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetCallback\0",
                            "onScanResponseDataSet\0",
                            "(Landroid/bluetooth/le/AdvertisingSet;I)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [onAdvertisingParametersUpdated](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#onAdvertisingParametersUpdated(android.bluetooth.le.AdvertisingSet,%20int,%20int))
                pub fn onAdvertisingParametersUpdated<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSet>,
                    arg1: i32,
                    arg2: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSetCallback", java.flags == PUBLIC, .name == "onAdvertisingParametersUpdated", .descriptor == "(Landroid/bluetooth/le/AdvertisingSet;II)V"
                    unsafe {
                        let __jni_args = [
                            arg0.as_arg_jvalue(),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetCallback\0",
                            "onAdvertisingParametersUpdated\0",
                            "(Landroid/bluetooth/le/AdvertisingSet;II)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [onPeriodicAdvertisingParametersUpdated](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#onPeriodicAdvertisingParametersUpdated(android.bluetooth.le.AdvertisingSet,%20int))
                pub fn onPeriodicAdvertisingParametersUpdated<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSet>,
                    arg1: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSetCallback", java.flags == PUBLIC, .name == "onPeriodicAdvertisingParametersUpdated", .descriptor == "(Landroid/bluetooth/le/AdvertisingSet;I)V"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetCallback\0",
                            "onPeriodicAdvertisingParametersUpdated\0",
                            "(Landroid/bluetooth/le/AdvertisingSet;I)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [onPeriodicAdvertisingDataSet](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#onPeriodicAdvertisingDataSet(android.bluetooth.le.AdvertisingSet,%20int))
                pub fn onPeriodicAdvertisingDataSet<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSet>,
                    arg1: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSetCallback", java.flags == PUBLIC, .name == "onPeriodicAdvertisingDataSet", .descriptor == "(Landroid/bluetooth/le/AdvertisingSet;I)V"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetCallback\0",
                            "onPeriodicAdvertisingDataSet\0",
                            "(Landroid/bluetooth/le/AdvertisingSet;I)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [onPeriodicAdvertisingEnabled](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#onPeriodicAdvertisingEnabled(android.bluetooth.le.AdvertisingSet,%20boolean,%20int))
                pub fn onPeriodicAdvertisingEnabled<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSet>,
                    arg1: bool,
                    arg2: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSetCallback", java.flags == PUBLIC, .name == "onPeriodicAdvertisingEnabled", .descriptor == "(Landroid/bluetooth/le/AdvertisingSet;ZI)V"
                    unsafe {
                        let __jni_args = [
                            arg0.as_arg_jvalue(),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetCallback\0",
                            "onPeriodicAdvertisingEnabled\0",
                            "(Landroid/bluetooth/le/AdvertisingSet;ZI)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// public static final [ADVERTISE_FAILED_ALREADY_STARTED](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#ADVERTISE_FAILED_ALREADY_STARTED)
                pub const ADVERTISE_FAILED_ALREADY_STARTED: i32 = 3;

                /// public static final [ADVERTISE_FAILED_DATA_TOO_LARGE](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#ADVERTISE_FAILED_DATA_TOO_LARGE)
                pub const ADVERTISE_FAILED_DATA_TOO_LARGE: i32 = 1;

                /// public static final [ADVERTISE_FAILED_FEATURE_UNSUPPORTED](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#ADVERTISE_FAILED_FEATURE_UNSUPPORTED)
                pub const ADVERTISE_FAILED_FEATURE_UNSUPPORTED: i32 = 5;

                /// public static final [ADVERTISE_FAILED_INTERNAL_ERROR](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#ADVERTISE_FAILED_INTERNAL_ERROR)
                pub const ADVERTISE_FAILED_INTERNAL_ERROR: i32 = 4;

                /// public static final [ADVERTISE_FAILED_TOO_MANY_ADVERTISERS](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#ADVERTISE_FAILED_TOO_MANY_ADVERTISERS)
                pub const ADVERTISE_FAILED_TOO_MANY_ADVERTISERS: i32 = 2;

                /// public static final [ADVERTISE_SUCCESS](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetCallback.html#ADVERTISE_SUCCESS)
                pub const ADVERTISE_SUCCESS: i32 = 0;
            }

            /// pub final class [AdvertisingSetParameters](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html)
            #[repr(transparent)]
            pub struct AdvertisingSetParameters(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for AdvertisingSetParameters {}

            unsafe impl ::java_spaghetti::JniType for AdvertisingSetParameters {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/AdvertisingSetParameters\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::os::Parcelable> for AdvertisingSetParameters {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for AdvertisingSetParameters {}
            impl ::std::ops::Deref for AdvertisingSetParameters {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl ::std::convert::AsRef<super::super::os::Parcelable> for AdvertisingSetParameters {
                fn as_ref(&self) -> &super::super::os::Parcelable {
                    unsafe { &*(self as *const Self as *const super::super::os::Parcelable) }
                }
            }
            impl AdvertisingSetParameters {
                /// [isConnectable](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#isConnectable())
                pub fn isConnectable<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters", java.flags == PUBLIC, .name == "isConnectable", .descriptor == "()Z"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters\0",
                            "isConnectable\0",
                            "()Z\0",
                        );
                        __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [isScannable](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#isScannable())
                pub fn isScannable<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters", java.flags == PUBLIC, .name == "isScannable", .descriptor == "()Z"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters\0",
                            "isScannable\0",
                            "()Z\0",
                        );
                        __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [isLegacy](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#isLegacy())
                pub fn isLegacy<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters", java.flags == PUBLIC, .name == "isLegacy", .descriptor == "()Z"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters\0",
                            "isLegacy\0",
                            "()Z\0",
                        );
                        __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [isAnonymous](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#isAnonymous())
                pub fn isAnonymous<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters", java.flags == PUBLIC, .name == "isAnonymous", .descriptor == "()Z"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters\0",
                            "isAnonymous\0",
                            "()Z\0",
                        );
                        __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [includeTxPower](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#includeTxPower())
                pub fn includeTxPower<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters", java.flags == PUBLIC, .name == "includeTxPower", .descriptor == "()Z"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters\0",
                            "includeTxPower\0",
                            "()Z\0",
                        );
                        __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getPrimaryPhy](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#getPrimaryPhy())
                pub fn getPrimaryPhy<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters", java.flags == PUBLIC, .name == "getPrimaryPhy", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters\0",
                            "getPrimaryPhy\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getSecondaryPhy](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#getSecondaryPhy())
                pub fn getSecondaryPhy<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters", java.flags == PUBLIC, .name == "getSecondaryPhy", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters\0",
                            "getSecondaryPhy\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getInterval](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#getInterval())
                pub fn getInterval<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters", java.flags == PUBLIC, .name == "getInterval", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters\0",
                            "getInterval\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getTxPowerLevel](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#getTxPowerLevel())
                pub fn getTxPowerLevel<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters", java.flags == PUBLIC, .name == "getTxPowerLevel", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters\0",
                            "getTxPowerLevel\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [toString](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#toString())
                pub fn toString<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters\0",
                            "toString\0",
                            "()Ljava/lang/String;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [describeContents](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#describeContents())
                pub fn describeContents<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters\0",
                            "describeContents\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// public static final [INTERVAL_HIGH](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#INTERVAL_HIGH)
                pub const INTERVAL_HIGH: i32 = 1600;

                /// public static final [INTERVAL_LOW](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#INTERVAL_LOW)
                pub const INTERVAL_LOW: i32 = 160;

                /// public static final [INTERVAL_MAX](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#INTERVAL_MAX)
                pub const INTERVAL_MAX: i32 = 16777215;

                /// public static final [INTERVAL_MEDIUM](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#INTERVAL_MEDIUM)
                pub const INTERVAL_MEDIUM: i32 = 400;

                /// public static final [INTERVAL_MIN](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#INTERVAL_MIN)
                pub const INTERVAL_MIN: i32 = 160;

                /// public static final [TX_POWER_HIGH](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#TX_POWER_HIGH)
                pub const TX_POWER_HIGH: i32 = 1;

                /// public static final [TX_POWER_LOW](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#TX_POWER_LOW)
                pub const TX_POWER_LOW: i32 = -15;

                /// public static final [TX_POWER_MAX](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#TX_POWER_MAX)
                pub const TX_POWER_MAX: i32 = 1;

                /// public static final [TX_POWER_MEDIUM](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#TX_POWER_MEDIUM)
                pub const TX_POWER_MEDIUM: i32 = -7;

                /// public static final [TX_POWER_MIN](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#TX_POWER_MIN)
                pub const TX_POWER_MIN: i32 = -127;

                /// public static final [TX_POWER_ULTRA_LOW](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.html#TX_POWER_ULTRA_LOW)
                pub const TX_POWER_ULTRA_LOW: i32 = -21;
            }

            /// pub final class [AdvertisingSetParameters.Builder](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html)
            #[repr(transparent)]
            pub struct AdvertisingSetParameters_Builder(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for AdvertisingSetParameters_Builder {}

            unsafe impl ::java_spaghetti::JniType for AdvertisingSetParameters_Builder {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/AdvertisingSetParameters$Builder\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object>
                for AdvertisingSetParameters_Builder
            {
            }
            impl ::std::ops::Deref for AdvertisingSetParameters_Builder {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl AdvertisingSetParameters_Builder {
                /// [Builder](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#Builder())
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                    unsafe {
                        let __jni_args = [];
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters$Builder\0",
                            "<init>\0",
                            "()V\0",
                        );
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setConnectable](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#setConnectable(boolean))
                pub fn setConnectable<'env>(
                    &'env self,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters$Builder", java.flags == PUBLIC, .name == "setConnectable", .descriptor == "(Z)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters$Builder\0",
                            "setConnectable\0",
                            "(Z)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setScannable](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#setScannable(boolean))
                pub fn setScannable<'env>(
                    &'env self,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters$Builder", java.flags == PUBLIC, .name == "setScannable", .descriptor == "(Z)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters$Builder\0",
                            "setScannable\0",
                            "(Z)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setLegacyMode](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#setLegacyMode(boolean))
                pub fn setLegacyMode<'env>(
                    &'env self,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters$Builder", java.flags == PUBLIC, .name == "setLegacyMode", .descriptor == "(Z)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters$Builder\0",
                            "setLegacyMode\0",
                            "(Z)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setAnonymous](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#setAnonymous(boolean))
                pub fn setAnonymous<'env>(
                    &'env self,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters$Builder", java.flags == PUBLIC, .name == "setAnonymous", .descriptor == "(Z)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters$Builder\0",
                            "setAnonymous\0",
                            "(Z)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setIncludeTxPower](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#setIncludeTxPower(boolean))
                pub fn setIncludeTxPower<'env>(
                    &'env self,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters$Builder", java.flags == PUBLIC, .name == "setIncludeTxPower", .descriptor == "(Z)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters$Builder\0",
                            "setIncludeTxPower\0",
                            "(Z)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setPrimaryPhy](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#setPrimaryPhy(int))
                pub fn setPrimaryPhy<'env>(
                    &'env self,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters$Builder", java.flags == PUBLIC, .name == "setPrimaryPhy", .descriptor == "(I)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters$Builder\0",
                            "setPrimaryPhy\0",
                            "(I)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setSecondaryPhy](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#setSecondaryPhy(int))
                pub fn setSecondaryPhy<'env>(
                    &'env self,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters$Builder", java.flags == PUBLIC, .name == "setSecondaryPhy", .descriptor == "(I)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters$Builder\0",
                            "setSecondaryPhy\0",
                            "(I)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setInterval](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#setInterval(int))
                pub fn setInterval<'env>(
                    &'env self,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters$Builder", java.flags == PUBLIC, .name == "setInterval", .descriptor == "(I)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters$Builder\0",
                            "setInterval\0",
                            "(I)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setTxPowerLevel](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#setTxPowerLevel(int))
                pub fn setTxPowerLevel<'env>(
                    &'env self,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters$Builder", java.flags == PUBLIC, .name == "setTxPowerLevel", .descriptor == "(I)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters$Builder\0",
                            "setTxPowerLevel\0",
                            "(I)Landroid/bluetooth/le/AdvertisingSetParameters$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [build](https://developer.android.com/reference/android/bluetooth/le/AdvertisingSetParameters.Builder.html#build())
                pub fn build<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, AdvertisingSetParameters>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/AdvertisingSetParameters$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/bluetooth/le/AdvertisingSetParameters;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/AdvertisingSetParameters$Builder\0",
                            "build\0",
                            "()Landroid/bluetooth/le/AdvertisingSetParameters;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }
            }

            /// pub final class [BluetoothLeAdvertiser](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html)
            #[repr(transparent)]
            pub struct BluetoothLeAdvertiser(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for BluetoothLeAdvertiser {}

            unsafe impl ::java_spaghetti::JniType for BluetoothLeAdvertiser {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/BluetoothLeAdvertiser\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for BluetoothLeAdvertiser {}
            impl ::std::ops::Deref for BluetoothLeAdvertiser {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl BluetoothLeAdvertiser {
                /// [startAdvertising](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html#startAdvertising(android.bluetooth.le.AdvertiseSettings,%20android.bluetooth.le.AdvertiseData,%20android.bluetooth.le.AdvertiseCallback))
                pub fn startAdvertising_AdvertiseSettings_AdvertiseData_AdvertiseCallback<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<AdvertiseSettings>,
                    arg1: impl ::java_spaghetti::AsArg<AdvertiseData>,
                    arg2: impl ::java_spaghetti::AsArg<AdvertiseCallback>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/BluetoothLeAdvertiser", java.flags == PUBLIC, .name == "startAdvertising", .descriptor == "(Landroid/bluetooth/le/AdvertiseSettings;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseCallback;)V"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue(), arg2.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/BluetoothLeAdvertiser\0", "startAdvertising\0", "(Landroid/bluetooth/le/AdvertiseSettings;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseCallback;)V\0");
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [startAdvertising](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html#startAdvertising(android.bluetooth.le.AdvertiseSettings,%20android.bluetooth.le.AdvertiseData,%20android.bluetooth.le.AdvertiseData,%20android.bluetooth.le.AdvertiseCallback))
                pub fn startAdvertising_AdvertiseSettings_AdvertiseData_AdvertiseData_AdvertiseCallback<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<AdvertiseSettings>,
                    arg1: impl ::java_spaghetti::AsArg<AdvertiseData>,
                    arg2: impl ::java_spaghetti::AsArg<AdvertiseData>,
                    arg3: impl ::java_spaghetti::AsArg<AdvertiseCallback>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/BluetoothLeAdvertiser", java.flags == PUBLIC, .name == "startAdvertising", .descriptor == "(Landroid/bluetooth/le/AdvertiseSettings;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseCallback;)V"
                    unsafe {
                        let __jni_args = [
                            arg0.as_arg_jvalue(),
                            arg1.as_arg_jvalue(),
                            arg2.as_arg_jvalue(),
                            arg3.as_arg_jvalue(),
                        ];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/BluetoothLeAdvertiser\0", "startAdvertising\0", "(Landroid/bluetooth/le/AdvertiseSettings;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseCallback;)V\0");
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [stopAdvertising](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html#stopAdvertising(android.bluetooth.le.AdvertiseCallback))
                pub fn stopAdvertising<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<AdvertiseCallback>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/BluetoothLeAdvertiser", java.flags == PUBLIC, .name == "stopAdvertising", .descriptor == "(Landroid/bluetooth/le/AdvertiseCallback;)V"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/BluetoothLeAdvertiser\0",
                            "stopAdvertising\0",
                            "(Landroid/bluetooth/le/AdvertiseCallback;)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [startAdvertisingSet](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html#startAdvertisingSet(android.bluetooth.le.AdvertisingSetParameters,%20android.bluetooth.le.AdvertiseData,%20android.bluetooth.le.AdvertiseData,%20android.bluetooth.le.PeriodicAdvertisingParameters,%20android.bluetooth.le.AdvertiseData,%20android.bluetooth.le.AdvertisingSetCallback))
                pub fn startAdvertisingSet_AdvertisingSetParameters_AdvertiseData_AdvertiseData_PeriodicAdvertisingParameters_AdvertiseData_AdvertisingSetCallback<
                    'env,
                >(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSetParameters>,
                    arg1: impl ::java_spaghetti::AsArg<AdvertiseData>,
                    arg2: impl ::java_spaghetti::AsArg<AdvertiseData>,
                    arg3: impl ::java_spaghetti::AsArg<PeriodicAdvertisingParameters>,
                    arg4: impl ::java_spaghetti::AsArg<AdvertiseData>,
                    arg5: impl ::java_spaghetti::AsArg<AdvertisingSetCallback>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/BluetoothLeAdvertiser", java.flags == PUBLIC, .name == "startAdvertisingSet", .descriptor == "(Landroid/bluetooth/le/AdvertisingSetParameters;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/PeriodicAdvertisingParameters;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertisingSetCallback;)V"
                    unsafe {
                        let __jni_args = [
                            arg0.as_arg_jvalue(),
                            arg1.as_arg_jvalue(),
                            arg2.as_arg_jvalue(),
                            arg3.as_arg_jvalue(),
                            arg4.as_arg_jvalue(),
                            arg5.as_arg_jvalue(),
                        ];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/BluetoothLeAdvertiser\0", "startAdvertisingSet\0", "(Landroid/bluetooth/le/AdvertisingSetParameters;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/PeriodicAdvertisingParameters;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertisingSetCallback;)V\0");
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [startAdvertisingSet](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html#startAdvertisingSet(android.bluetooth.le.AdvertisingSetParameters,%20android.bluetooth.le.AdvertiseData,%20android.bluetooth.le.AdvertiseData,%20android.bluetooth.le.PeriodicAdvertisingParameters,%20android.bluetooth.le.AdvertiseData,%20int,%20int,%20android.bluetooth.le.AdvertisingSetCallback))
                pub fn startAdvertisingSet_AdvertisingSetParameters_AdvertiseData_AdvertiseData_PeriodicAdvertisingParameters_AdvertiseData_int_int_AdvertisingSetCallback<
                    'env,
                >(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSetParameters>,
                    arg1: impl ::java_spaghetti::AsArg<AdvertiseData>,
                    arg2: impl ::java_spaghetti::AsArg<AdvertiseData>,
                    arg3: impl ::java_spaghetti::AsArg<PeriodicAdvertisingParameters>,
                    arg4: impl ::java_spaghetti::AsArg<AdvertiseData>,
                    arg5: i32,
                    arg6: i32,
                    arg7: impl ::java_spaghetti::AsArg<AdvertisingSetCallback>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/BluetoothLeAdvertiser", java.flags == PUBLIC, .name == "startAdvertisingSet", .descriptor == "(Landroid/bluetooth/le/AdvertisingSetParameters;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/PeriodicAdvertisingParameters;Landroid/bluetooth/le/AdvertiseData;IILandroid/bluetooth/le/AdvertisingSetCallback;)V"
                    unsafe {
                        let __jni_args = [
                            arg0.as_arg_jvalue(),
                            arg1.as_arg_jvalue(),
                            arg2.as_arg_jvalue(),
                            arg3.as_arg_jvalue(),
                            arg4.as_arg_jvalue(),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                            arg7.as_arg_jvalue(),
                        ];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/BluetoothLeAdvertiser\0", "startAdvertisingSet\0", "(Landroid/bluetooth/le/AdvertisingSetParameters;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/PeriodicAdvertisingParameters;Landroid/bluetooth/le/AdvertiseData;IILandroid/bluetooth/le/AdvertisingSetCallback;)V\0");
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [stopAdvertisingSet](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html#stopAdvertisingSet(android.bluetooth.le.AdvertisingSetCallback))
                pub fn stopAdvertisingSet<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<AdvertisingSetCallback>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/BluetoothLeAdvertiser", java.flags == PUBLIC, .name == "stopAdvertisingSet", .descriptor == "(Landroid/bluetooth/le/AdvertisingSetCallback;)V"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/BluetoothLeAdvertiser\0",
                            "stopAdvertisingSet\0",
                            "(Landroid/bluetooth/le/AdvertisingSetCallback;)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }
            }

            /// pub final class [BluetoothLeScanner](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html)
            #[repr(transparent)]
            pub struct BluetoothLeScanner(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for BluetoothLeScanner {}

            unsafe impl ::java_spaghetti::JniType for BluetoothLeScanner {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/BluetoothLeScanner\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for BluetoothLeScanner {}
            impl ::std::ops::Deref for BluetoothLeScanner {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl BluetoothLeScanner {
                /// [startScan](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#startScan(android.bluetooth.le.ScanCallback))
                pub fn startScan_ScanCallback<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<ScanCallback>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/BluetoothLeScanner", java.flags == PUBLIC, .name == "startScan", .descriptor == "(Landroid/bluetooth/le/ScanCallback;)V"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/BluetoothLeScanner\0",
                            "startScan\0",
                            "(Landroid/bluetooth/le/ScanCallback;)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [startScan](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#startScan(java.util.List,%20android.bluetooth.le.ScanSettings,%20android.bluetooth.le.ScanCallback))
                pub fn startScan_List_ScanSettings_ScanCallback<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<super::super::super::java::util::List>,
                    arg1: impl ::java_spaghetti::AsArg<ScanSettings>,
                    arg2: impl ::java_spaghetti::AsArg<ScanCallback>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/BluetoothLeScanner", java.flags == PUBLIC, .name == "startScan", .descriptor == "(Ljava/util/List;Landroid/bluetooth/le/ScanSettings;Landroid/bluetooth/le/ScanCallback;)V"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue(), arg2.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/BluetoothLeScanner\0", "startScan\0", "(Ljava/util/List;Landroid/bluetooth/le/ScanSettings;Landroid/bluetooth/le/ScanCallback;)V\0");
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [stopScan](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#stopScan(android.bluetooth.le.ScanCallback))
                pub fn stopScan_ScanCallback<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<ScanCallback>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/BluetoothLeScanner", java.flags == PUBLIC, .name == "stopScan", .descriptor == "(Landroid/bluetooth/le/ScanCallback;)V"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/BluetoothLeScanner\0",
                            "stopScan\0",
                            "(Landroid/bluetooth/le/ScanCallback;)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [flushPendingScanResults](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#flushPendingScanResults(android.bluetooth.le.ScanCallback))
                pub fn flushPendingScanResults<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<ScanCallback>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/BluetoothLeScanner", java.flags == PUBLIC, .name == "flushPendingScanResults", .descriptor == "(Landroid/bluetooth/le/ScanCallback;)V"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/BluetoothLeScanner\0",
                            "flushPendingScanResults\0",
                            "(Landroid/bluetooth/le/ScanCallback;)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// public static final [EXTRA_CALLBACK_TYPE](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#EXTRA_CALLBACK_TYPE)
                pub const EXTRA_CALLBACK_TYPE: &'static str = "android.bluetooth.le.extra.CALLBACK_TYPE";

                /// public static final [EXTRA_ERROR_CODE](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#EXTRA_ERROR_CODE)
                pub const EXTRA_ERROR_CODE: &'static str = "android.bluetooth.le.extra.ERROR_CODE";

                /// public static final [EXTRA_LIST_SCAN_RESULT](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#EXTRA_LIST_SCAN_RESULT)
                pub const EXTRA_LIST_SCAN_RESULT: &'static str = "android.bluetooth.le.extra.LIST_SCAN_RESULT";
            }

            /// pub final class [PeriodicAdvertisingParameters](https://developer.android.com/reference/android/bluetooth/le/PeriodicAdvertisingParameters.html)
            #[repr(transparent)]
            pub struct PeriodicAdvertisingParameters(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for PeriodicAdvertisingParameters {}

            unsafe impl ::java_spaghetti::JniType for PeriodicAdvertisingParameters {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/PeriodicAdvertisingParameters\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::os::Parcelable> for PeriodicAdvertisingParameters {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for PeriodicAdvertisingParameters {}
            impl ::std::ops::Deref for PeriodicAdvertisingParameters {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl ::std::convert::AsRef<super::super::os::Parcelable> for PeriodicAdvertisingParameters {
                fn as_ref(&self) -> &super::super::os::Parcelable {
                    unsafe { &*(self as *const Self as *const super::super::os::Parcelable) }
                }
            }
            impl PeriodicAdvertisingParameters {
                /// [getIncludeTxPower](https://developer.android.com/reference/android/bluetooth/le/PeriodicAdvertisingParameters.html#getIncludeTxPower())
                pub fn getIncludeTxPower<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/PeriodicAdvertisingParameters", java.flags == PUBLIC, .name == "getIncludeTxPower", .descriptor == "()Z"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/PeriodicAdvertisingParameters\0",
                            "getIncludeTxPower\0",
                            "()Z\0",
                        );
                        __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getInterval](https://developer.android.com/reference/android/bluetooth/le/PeriodicAdvertisingParameters.html#getInterval())
                pub fn getInterval<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/PeriodicAdvertisingParameters", java.flags == PUBLIC, .name == "getInterval", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/PeriodicAdvertisingParameters\0",
                            "getInterval\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [describeContents](https://developer.android.com/reference/android/bluetooth/le/PeriodicAdvertisingParameters.html#describeContents())
                pub fn describeContents<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/PeriodicAdvertisingParameters", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/PeriodicAdvertisingParameters\0",
                            "describeContents\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }
            }

            /// pub final class [PeriodicAdvertisingParameters.Builder](https://developer.android.com/reference/android/bluetooth/le/PeriodicAdvertisingParameters.Builder.html)
            #[repr(transparent)]
            pub struct PeriodicAdvertisingParameters_Builder(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for PeriodicAdvertisingParameters_Builder {}

            unsafe impl ::java_spaghetti::JniType for PeriodicAdvertisingParameters_Builder {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/PeriodicAdvertisingParameters$Builder\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object>
                for PeriodicAdvertisingParameters_Builder
            {
            }
            impl ::std::ops::Deref for PeriodicAdvertisingParameters_Builder {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl PeriodicAdvertisingParameters_Builder {
                /// [Builder](https://developer.android.com/reference/android/bluetooth/le/PeriodicAdvertisingParameters.Builder.html#Builder())
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/PeriodicAdvertisingParameters$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                    unsafe {
                        let __jni_args = [];
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/PeriodicAdvertisingParameters$Builder\0",
                            "<init>\0",
                            "()V\0",
                        );
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setIncludeTxPower](https://developer.android.com/reference/android/bluetooth/le/PeriodicAdvertisingParameters.Builder.html#setIncludeTxPower(boolean))
                pub fn setIncludeTxPower<'env>(
                    &'env self,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, PeriodicAdvertisingParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/PeriodicAdvertisingParameters$Builder", java.flags == PUBLIC, .name == "setIncludeTxPower", .descriptor == "(Z)Landroid/bluetooth/le/PeriodicAdvertisingParameters$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/PeriodicAdvertisingParameters$Builder\0",
                            "setIncludeTxPower\0",
                            "(Z)Landroid/bluetooth/le/PeriodicAdvertisingParameters$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setInterval](https://developer.android.com/reference/android/bluetooth/le/PeriodicAdvertisingParameters.Builder.html#setInterval(int))
                pub fn setInterval<'env>(
                    &'env self,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, PeriodicAdvertisingParameters_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/PeriodicAdvertisingParameters$Builder", java.flags == PUBLIC, .name == "setInterval", .descriptor == "(I)Landroid/bluetooth/le/PeriodicAdvertisingParameters$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/PeriodicAdvertisingParameters$Builder\0",
                            "setInterval\0",
                            "(I)Landroid/bluetooth/le/PeriodicAdvertisingParameters$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [build](https://developer.android.com/reference/android/bluetooth/le/PeriodicAdvertisingParameters.Builder.html#build())
                pub fn build<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, PeriodicAdvertisingParameters>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/PeriodicAdvertisingParameters$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/bluetooth/le/PeriodicAdvertisingParameters;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/PeriodicAdvertisingParameters$Builder\0",
                            "build\0",
                            "()Landroid/bluetooth/le/PeriodicAdvertisingParameters;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }
            }

            /// pub class [ScanCallback](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html)
            #[repr(transparent)]
            pub struct ScanCallback(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for ScanCallback {}

            unsafe impl ::java_spaghetti::JniType for ScanCallback {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/ScanCallback\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for ScanCallback {}
            impl ::std::ops::Deref for ScanCallback {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl ScanCallback {
                /// [ScanCallback](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html#ScanCallback())
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanCallback", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                    unsafe {
                        let __jni_args = [];
                        let (__jni_class, __jni_method) =
                            __jni_env.require_class_method("android/bluetooth/le/ScanCallback\0", "<init>\0", "()V\0");
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [onScanResult](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html#onScanResult(int,%20android.bluetooth.le.ScanResult))
                pub fn onScanResult<'env>(
                    &'env self,
                    arg0: i32,
                    arg1: impl ::java_spaghetti::AsArg<ScanResult>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanCallback", java.flags == PUBLIC, .name == "onScanResult", .descriptor == "(ILandroid/bluetooth/le/ScanResult;)V"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0), arg1.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanCallback\0",
                            "onScanResult\0",
                            "(ILandroid/bluetooth/le/ScanResult;)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [onBatchScanResults](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html#onBatchScanResults(java.util.List))
                pub fn onBatchScanResults<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<super::super::super::java::util::List>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanCallback", java.flags == PUBLIC, .name == "onBatchScanResults", .descriptor == "(Ljava/util/List;)V"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanCallback\0",
                            "onBatchScanResults\0",
                            "(Ljava/util/List;)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [onScanFailed](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html#onScanFailed(int))
                pub fn onScanFailed<'env>(
                    &'env self,
                    arg0: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanCallback", java.flags == PUBLIC, .name == "onScanFailed", .descriptor == "(I)V"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanCallback\0",
                            "onScanFailed\0",
                            "(I)V\0",
                        );
                        __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// public static final [SCAN_FAILED_ALREADY_STARTED](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html#SCAN_FAILED_ALREADY_STARTED)
                pub const SCAN_FAILED_ALREADY_STARTED: i32 = 1;

                /// public static final [SCAN_FAILED_APPLICATION_REGISTRATION_FAILED](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html#SCAN_FAILED_APPLICATION_REGISTRATION_FAILED)
                pub const SCAN_FAILED_APPLICATION_REGISTRATION_FAILED: i32 = 2;

                /// public static final [SCAN_FAILED_FEATURE_UNSUPPORTED](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html#SCAN_FAILED_FEATURE_UNSUPPORTED)
                pub const SCAN_FAILED_FEATURE_UNSUPPORTED: i32 = 4;

                /// public static final [SCAN_FAILED_INTERNAL_ERROR](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html#SCAN_FAILED_INTERNAL_ERROR)
                pub const SCAN_FAILED_INTERNAL_ERROR: i32 = 3;

                /// public static final [SCAN_FAILED_OUT_OF_HARDWARE_RESOURCES](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html#SCAN_FAILED_OUT_OF_HARDWARE_RESOURCES)
                pub const SCAN_FAILED_OUT_OF_HARDWARE_RESOURCES: i32 = 5;

                /// public static final [SCAN_FAILED_SCANNING_TOO_FREQUENTLY](https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html#SCAN_FAILED_SCANNING_TOO_FREQUENTLY)
                pub const SCAN_FAILED_SCANNING_TOO_FREQUENTLY: i32 = 6;
            }

            /// pub final class [ScanFilter](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html)
            #[repr(transparent)]
            pub struct ScanFilter(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for ScanFilter {}

            unsafe impl ::java_spaghetti::JniType for ScanFilter {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/ScanFilter\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::os::Parcelable> for ScanFilter {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for ScanFilter {}
            impl ::std::ops::Deref for ScanFilter {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl ::std::convert::AsRef<super::super::os::Parcelable> for ScanFilter {
                fn as_ref(&self) -> &super::super::os::Parcelable {
                    unsafe { &*(self as *const Self as *const super::super::os::Parcelable) }
                }
            }
            impl ScanFilter {
                /// [describeContents](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#describeContents())
                pub fn describeContents<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanFilter", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter\0",
                            "describeContents\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getDeviceName](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getDeviceName())
                pub fn getDeviceName<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter", java.flags == PUBLIC, .name == "getDeviceName", .descriptor == "()Ljava/lang/String;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter\0",
                            "getDeviceName\0",
                            "()Ljava/lang/String;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getServiceUuid](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getServiceUuid())
                pub fn getServiceUuid<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::os::ParcelUuid>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter", java.flags == PUBLIC, .name == "getServiceUuid", .descriptor == "()Landroid/os/ParcelUuid;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter\0",
                            "getServiceUuid\0",
                            "()Landroid/os/ParcelUuid;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getServiceUuidMask](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getServiceUuidMask())
                pub fn getServiceUuidMask<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::os::ParcelUuid>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter", java.flags == PUBLIC, .name == "getServiceUuidMask", .descriptor == "()Landroid/os/ParcelUuid;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter\0",
                            "getServiceUuidMask\0",
                            "()Landroid/os/ParcelUuid;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getServiceSolicitationUuid](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getServiceSolicitationUuid())
                pub fn getServiceSolicitationUuid<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::os::ParcelUuid>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter", java.flags == PUBLIC, .name == "getServiceSolicitationUuid", .descriptor == "()Landroid/os/ParcelUuid;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter\0",
                            "getServiceSolicitationUuid\0",
                            "()Landroid/os/ParcelUuid;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getServiceSolicitationUuidMask](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getServiceSolicitationUuidMask())
                pub fn getServiceSolicitationUuidMask<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::os::ParcelUuid>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter", java.flags == PUBLIC, .name == "getServiceSolicitationUuidMask", .descriptor == "()Landroid/os/ParcelUuid;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter\0",
                            "getServiceSolicitationUuidMask\0",
                            "()Landroid/os/ParcelUuid;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getDeviceAddress](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getDeviceAddress())
                pub fn getDeviceAddress<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter", java.flags == PUBLIC, .name == "getDeviceAddress", .descriptor == "()Ljava/lang/String;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter\0",
                            "getDeviceAddress\0",
                            "()Ljava/lang/String;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getServiceData](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getServiceData())
                pub fn getServiceData<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter", java.flags == PUBLIC, .name == "getServiceData", .descriptor == "()[B"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter\0",
                            "getServiceData\0",
                            "()[B\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getServiceDataMask](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getServiceDataMask())
                pub fn getServiceDataMask<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter", java.flags == PUBLIC, .name == "getServiceDataMask", .descriptor == "()[B"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter\0",
                            "getServiceDataMask\0",
                            "()[B\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getServiceDataUuid](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getServiceDataUuid())
                pub fn getServiceDataUuid<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::os::ParcelUuid>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter", java.flags == PUBLIC, .name == "getServiceDataUuid", .descriptor == "()Landroid/os/ParcelUuid;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter\0",
                            "getServiceDataUuid\0",
                            "()Landroid/os/ParcelUuid;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getManufacturerId](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getManufacturerId())
                pub fn getManufacturerId<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanFilter", java.flags == PUBLIC, .name == "getManufacturerId", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter\0",
                            "getManufacturerId\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getManufacturerData](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getManufacturerData())
                pub fn getManufacturerData<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter", java.flags == PUBLIC, .name == "getManufacturerData", .descriptor == "()[B"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter\0",
                            "getManufacturerData\0",
                            "()[B\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getManufacturerDataMask](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getManufacturerDataMask())
                pub fn getManufacturerDataMask<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter", java.flags == PUBLIC, .name == "getManufacturerDataMask", .descriptor == "()[B"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter\0",
                            "getManufacturerDataMask\0",
                            "()[B\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getAdvertisingDataType](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getAdvertisingDataType())
                pub fn getAdvertisingDataType<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanFilter", java.flags == PUBLIC, .name == "getAdvertisingDataType", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter\0",
                            "getAdvertisingDataType\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getAdvertisingData](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getAdvertisingData())
                pub fn getAdvertisingData<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter", java.flags == PUBLIC, .name == "getAdvertisingData", .descriptor == "()[B"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter\0",
                            "getAdvertisingData\0",
                            "()[B\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getAdvertisingDataMask](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#getAdvertisingDataMask())
                pub fn getAdvertisingDataMask<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter", java.flags == PUBLIC, .name == "getAdvertisingDataMask", .descriptor == "()[B"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter\0",
                            "getAdvertisingDataMask\0",
                            "()[B\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [matches](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#matches(android.bluetooth.le.ScanResult))
                pub fn matches<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<ScanResult>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter", java.flags == PUBLIC, .name == "matches", .descriptor == "(Landroid/bluetooth/le/ScanResult;)Z"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter\0",
                            "matches\0",
                            "(Landroid/bluetooth/le/ScanResult;)Z\0",
                        );
                        __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [toString](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#toString())
                pub fn toString<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter\0",
                            "toString\0",
                            "()Ljava/lang/String;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [hashCode](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#hashCode())
                pub fn hashCode<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanFilter", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) =
                            __jni_env.require_class_method("android/bluetooth/le/ScanFilter\0", "hashCode\0", "()I\0");
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [equals](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html#equals(java.lang.Object))
                pub fn equals<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<super::super::super::java::lang::Object>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter\0",
                            "equals\0",
                            "(Ljava/lang/Object;)Z\0",
                        );
                        __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }
            }

            /// pub final class [ScanFilter.Builder](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html)
            #[repr(transparent)]
            pub struct ScanFilter_Builder(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for ScanFilter_Builder {}

            unsafe impl ::java_spaghetti::JniType for ScanFilter_Builder {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/ScanFilter$Builder\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for ScanFilter_Builder {}
            impl ::std::ops::Deref for ScanFilter_Builder {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl ScanFilter_Builder {
                /// [Builder](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#Builder())
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                    unsafe {
                        let __jni_args = [];
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter$Builder\0",
                            "<init>\0",
                            "()V\0",
                        );
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setDeviceName](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setDeviceName(java.lang.String))
                pub fn setDeviceName<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<super::super::super::java::lang::String>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setDeviceName", .descriptor == "(Ljava/lang/String;)Landroid/bluetooth/le/ScanFilter$Builder;"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter$Builder\0",
                            "setDeviceName\0",
                            "(Ljava/lang/String;)Landroid/bluetooth/le/ScanFilter$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setDeviceAddress](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setDeviceAddress(java.lang.String))
                pub fn setDeviceAddress<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<super::super::super::java::lang::String>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setDeviceAddress", .descriptor == "(Ljava/lang/String;)Landroid/bluetooth/le/ScanFilter$Builder;"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter$Builder\0",
                            "setDeviceAddress\0",
                            "(Ljava/lang/String;)Landroid/bluetooth/le/ScanFilter$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setServiceUuid](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setServiceUuid(android.os.ParcelUuid))
                pub fn setServiceUuid_ParcelUuid<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setServiceUuid", .descriptor == "(Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter$Builder\0",
                            "setServiceUuid\0",
                            "(Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setServiceUuid](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setServiceUuid(android.os.ParcelUuid,%20android.os.ParcelUuid))
                pub fn setServiceUuid_ParcelUuid_ParcelUuid<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                    arg1: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setServiceUuid", .descriptor == "(Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanFilter$Builder\0", "setServiceUuid\0", "(Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;\0");
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setServiceSolicitationUuid](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setServiceSolicitationUuid(android.os.ParcelUuid))
                pub fn setServiceSolicitationUuid_ParcelUuid<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setServiceSolicitationUuid", .descriptor == "(Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter$Builder\0",
                            "setServiceSolicitationUuid\0",
                            "(Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setServiceSolicitationUuid](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setServiceSolicitationUuid(android.os.ParcelUuid,%20android.os.ParcelUuid))
                pub fn setServiceSolicitationUuid_ParcelUuid_ParcelUuid<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                    arg1: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setServiceSolicitationUuid", .descriptor == "(Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanFilter$Builder\0", "setServiceSolicitationUuid\0", "(Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;\0");
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setServiceData](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setServiceData(android.os.ParcelUuid,%20byte%5B%5D))
                pub fn setServiceData_ParcelUuid_byte_array<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                    arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setServiceData", .descriptor == "(Landroid/os/ParcelUuid;[B)Landroid/bluetooth/le/ScanFilter$Builder;"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter$Builder\0",
                            "setServiceData\0",
                            "(Landroid/os/ParcelUuid;[B)Landroid/bluetooth/le/ScanFilter$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setServiceData](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setServiceData(android.os.ParcelUuid,%20byte%5B%5D,%20byte%5B%5D))
                pub fn setServiceData_ParcelUuid_byte_array_byte_array<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                    arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                    arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setServiceData", .descriptor == "(Landroid/os/ParcelUuid;[B[B)Landroid/bluetooth/le/ScanFilter$Builder;"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue(), arg2.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter$Builder\0",
                            "setServiceData\0",
                            "(Landroid/os/ParcelUuid;[B[B)Landroid/bluetooth/le/ScanFilter$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setManufacturerData](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setManufacturerData(int,%20byte%5B%5D))
                pub fn setManufacturerData_int_byte_array<'env>(
                    &'env self,
                    arg0: i32,
                    arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setManufacturerData", .descriptor == "(I[B)Landroid/bluetooth/le/ScanFilter$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0), arg1.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter$Builder\0",
                            "setManufacturerData\0",
                            "(I[B)Landroid/bluetooth/le/ScanFilter$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setManufacturerData](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setManufacturerData(int,%20byte%5B%5D,%20byte%5B%5D))
                pub fn setManufacturerData_int_byte_array_byte_array<'env>(
                    &'env self,
                    arg0: i32,
                    arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                    arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setManufacturerData", .descriptor == "(I[B[B)Landroid/bluetooth/le/ScanFilter$Builder;"
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            arg1.as_arg_jvalue(),
                            arg2.as_arg_jvalue(),
                        ];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter$Builder\0",
                            "setManufacturerData\0",
                            "(I[B[B)Landroid/bluetooth/le/ScanFilter$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setAdvertisingDataTypeWithData](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setAdvertisingDataTypeWithData(int,%20byte%5B%5D,%20byte%5B%5D))
                pub fn setAdvertisingDataTypeWithData<'env>(
                    &'env self,
                    arg0: i32,
                    arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                    arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setAdvertisingDataTypeWithData", .descriptor == "(I[B[B)Landroid/bluetooth/le/ScanFilter$Builder;"
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            arg1.as_arg_jvalue(),
                            arg2.as_arg_jvalue(),
                        ];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter$Builder\0",
                            "setAdvertisingDataTypeWithData\0",
                            "(I[B[B)Landroid/bluetooth/le/ScanFilter$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setAdvertisingDataType](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setAdvertisingDataType(int))
                pub fn setAdvertisingDataType<'env>(
                    &'env self,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setAdvertisingDataType", .descriptor == "(I)Landroid/bluetooth/le/ScanFilter$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter$Builder\0",
                            "setAdvertisingDataType\0",
                            "(I)Landroid/bluetooth/le/ScanFilter$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [build](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#build())
                pub fn build<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanFilter>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/bluetooth/le/ScanFilter;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanFilter$Builder\0",
                            "build\0",
                            "()Landroid/bluetooth/le/ScanFilter;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }
            }

            /// pub final class [ScanRecord](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html)
            #[repr(transparent)]
            pub struct ScanRecord(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for ScanRecord {}

            unsafe impl ::java_spaghetti::JniType for ScanRecord {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/ScanRecord\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for ScanRecord {}
            impl ::std::ops::Deref for ScanRecord {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl ScanRecord {
                /// [getAdvertiseFlags](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getAdvertiseFlags())
                pub fn getAdvertiseFlags<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanRecord", java.flags == PUBLIC, .name == "getAdvertiseFlags", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanRecord\0",
                            "getAdvertiseFlags\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getServiceUuids](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getServiceUuids())
                pub fn getServiceUuids<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::util::List>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanRecord", java.flags == PUBLIC, .name == "getServiceUuids", .descriptor == "()Ljava/util/List;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanRecord\0",
                            "getServiceUuids\0",
                            "()Ljava/util/List;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getServiceSolicitationUuids](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getServiceSolicitationUuids())
                pub fn getServiceSolicitationUuids<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::util::List>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanRecord", java.flags == PUBLIC, .name == "getServiceSolicitationUuids", .descriptor == "()Ljava/util/List;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanRecord\0",
                            "getServiceSolicitationUuids\0",
                            "()Ljava/util/List;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getManufacturerSpecificData](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getManufacturerSpecificData())
                pub fn getManufacturerSpecificData<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::util::SparseArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanRecord", java.flags == PUBLIC, .name == "getManufacturerSpecificData", .descriptor == "()Landroid/util/SparseArray;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanRecord\0",
                            "getManufacturerSpecificData\0",
                            "()Landroid/util/SparseArray;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getManufacturerSpecificData](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getManufacturerSpecificData(int))
                pub fn getManufacturerSpecificData_int<'env>(
                    &'env self,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanRecord", java.flags == PUBLIC, .name == "getManufacturerSpecificData", .descriptor == "(I)[B"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanRecord\0",
                            "getManufacturerSpecificData\0",
                            "(I)[B\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getServiceData](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getServiceData())
                pub fn getServiceData<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::util::Map>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanRecord", java.flags == PUBLIC, .name == "getServiceData", .descriptor == "()Ljava/util/Map;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanRecord\0",
                            "getServiceData\0",
                            "()Ljava/util/Map;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getServiceData](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getServiceData(android.os.ParcelUuid))
                pub fn getServiceData_ParcelUuid<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<super::super::os::ParcelUuid>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanRecord", java.flags == PUBLIC, .name == "getServiceData", .descriptor == "(Landroid/os/ParcelUuid;)[B"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanRecord\0",
                            "getServiceData\0",
                            "(Landroid/os/ParcelUuid;)[B\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getTxPowerLevel](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getTxPowerLevel())
                pub fn getTxPowerLevel<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanRecord", java.flags == PUBLIC, .name == "getTxPowerLevel", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanRecord\0",
                            "getTxPowerLevel\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getDeviceName](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getDeviceName())
                pub fn getDeviceName<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanRecord", java.flags == PUBLIC, .name == "getDeviceName", .descriptor == "()Ljava/lang/String;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanRecord\0",
                            "getDeviceName\0",
                            "()Ljava/lang/String;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getAdvertisingDataMap](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getAdvertisingDataMap())
                pub fn getAdvertisingDataMap<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::util::Map>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanRecord", java.flags == PUBLIC, .name == "getAdvertisingDataMap", .descriptor == "()Ljava/util/Map;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanRecord\0",
                            "getAdvertisingDataMap\0",
                            "()Ljava/util/Map;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getBytes](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#getBytes())
                pub fn getBytes<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanRecord", java.flags == PUBLIC, .name == "getBytes", .descriptor == "()[B"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) =
                            __jni_env.require_class_method("android/bluetooth/le/ScanRecord\0", "getBytes\0", "()[B\0");
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [toString](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#toString())
                pub fn toString<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanRecord", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanRecord\0",
                            "toString\0",
                            "()Ljava/lang/String;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// public static final [DATA_TYPE_3D_INFORMATION_DATA](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_3D_INFORMATION_DATA)
                pub const DATA_TYPE_3D_INFORMATION_DATA: i32 = 61;

                /// public static final [DATA_TYPE_ADVERTISING_INTERVAL](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_ADVERTISING_INTERVAL)
                pub const DATA_TYPE_ADVERTISING_INTERVAL: i32 = 26;

                /// public static final [DATA_TYPE_ADVERTISING_INTERVAL_LONG](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_ADVERTISING_INTERVAL_LONG)
                pub const DATA_TYPE_ADVERTISING_INTERVAL_LONG: i32 = 47;

                /// public static final [DATA_TYPE_APPEARANCE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_APPEARANCE)
                pub const DATA_TYPE_APPEARANCE: i32 = 25;

                /// public static final [DATA_TYPE_BIG_INFO](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_BIG_INFO)
                pub const DATA_TYPE_BIG_INFO: i32 = 44;

                /// public static final [DATA_TYPE_BROADCAST_CODE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_BROADCAST_CODE)
                pub const DATA_TYPE_BROADCAST_CODE: i32 = 45;

                /// public static final [DATA_TYPE_CHANNEL_MAP_UPDATE_INDICATION](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_CHANNEL_MAP_UPDATE_INDICATION)
                pub const DATA_TYPE_CHANNEL_MAP_UPDATE_INDICATION: i32 = 40;

                /// public static final [DATA_TYPE_CLASS_OF_DEVICE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_CLASS_OF_DEVICE)
                pub const DATA_TYPE_CLASS_OF_DEVICE: i32 = 13;

                /// public static final [DATA_TYPE_DEVICE_ID](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_DEVICE_ID)
                pub const DATA_TYPE_DEVICE_ID: i32 = 16;

                /// public static final [DATA_TYPE_FLAGS](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_FLAGS)
                pub const DATA_TYPE_FLAGS: i32 = 1;

                /// public static final [DATA_TYPE_INDOOR_POSITIONING](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_INDOOR_POSITIONING)
                pub const DATA_TYPE_INDOOR_POSITIONING: i32 = 37;

                /// public static final [DATA_TYPE_LE_BLUETOOTH_DEVICE_ADDRESS](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_LE_BLUETOOTH_DEVICE_ADDRESS)
                pub const DATA_TYPE_LE_BLUETOOTH_DEVICE_ADDRESS: i32 = 27;

                /// public static final [DATA_TYPE_LE_ROLE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_LE_ROLE)
                pub const DATA_TYPE_LE_ROLE: i32 = 28;

                /// public static final [DATA_TYPE_LE_SECURE_CONNECTIONS_CONFIRMATION_VALUE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_LE_SECURE_CONNECTIONS_CONFIRMATION_VALUE)
                pub const DATA_TYPE_LE_SECURE_CONNECTIONS_CONFIRMATION_VALUE: i32 = 34;

                /// public static final [DATA_TYPE_LE_SECURE_CONNECTIONS_RANDOM_VALUE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_LE_SECURE_CONNECTIONS_RANDOM_VALUE)
                pub const DATA_TYPE_LE_SECURE_CONNECTIONS_RANDOM_VALUE: i32 = 35;

                /// public static final [DATA_TYPE_LE_SUPPORTED_FEATURES](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_LE_SUPPORTED_FEATURES)
                pub const DATA_TYPE_LE_SUPPORTED_FEATURES: i32 = 39;

                /// public static final [DATA_TYPE_LOCAL_NAME_COMPLETE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_LOCAL_NAME_COMPLETE)
                pub const DATA_TYPE_LOCAL_NAME_COMPLETE: i32 = 9;

                /// public static final [DATA_TYPE_LOCAL_NAME_SHORT](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_LOCAL_NAME_SHORT)
                pub const DATA_TYPE_LOCAL_NAME_SHORT: i32 = 8;

                /// public static final [DATA_TYPE_MANUFACTURER_SPECIFIC_DATA](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_MANUFACTURER_SPECIFIC_DATA)
                pub const DATA_TYPE_MANUFACTURER_SPECIFIC_DATA: i32 = 255;

                /// public static final [DATA_TYPE_MESH_BEACON](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_MESH_BEACON)
                pub const DATA_TYPE_MESH_BEACON: i32 = 43;

                /// public static final [DATA_TYPE_MESH_MESSAGE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_MESH_MESSAGE)
                pub const DATA_TYPE_MESH_MESSAGE: i32 = 42;

                /// public static final [DATA_TYPE_NONE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_NONE)
                pub const DATA_TYPE_NONE: i32 = -1;

                /// public static final [DATA_TYPE_PB_ADV](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_PB_ADV)
                pub const DATA_TYPE_PB_ADV: i32 = 41;

                /// public static final [DATA_TYPE_PUBLIC_TARGET_ADDRESS](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_PUBLIC_TARGET_ADDRESS)
                pub const DATA_TYPE_PUBLIC_TARGET_ADDRESS: i32 = 23;

                /// public static final [DATA_TYPE_RANDOM_TARGET_ADDRESS](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_RANDOM_TARGET_ADDRESS)
                pub const DATA_TYPE_RANDOM_TARGET_ADDRESS: i32 = 24;

                /// public static final [DATA_TYPE_RESOLVABLE_SET_IDENTIFIER](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_RESOLVABLE_SET_IDENTIFIER)
                pub const DATA_TYPE_RESOLVABLE_SET_IDENTIFIER: i32 = 46;

                /// public static final [DATA_TYPE_SECURITY_MANAGER_OUT_OF_BAND_FLAGS](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SECURITY_MANAGER_OUT_OF_BAND_FLAGS)
                pub const DATA_TYPE_SECURITY_MANAGER_OUT_OF_BAND_FLAGS: i32 = 17;

                /// public static final [DATA_TYPE_SERVICE_DATA_128_BIT](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_DATA_128_BIT)
                pub const DATA_TYPE_SERVICE_DATA_128_BIT: i32 = 33;

                /// public static final [DATA_TYPE_SERVICE_DATA_16_BIT](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_DATA_16_BIT)
                pub const DATA_TYPE_SERVICE_DATA_16_BIT: i32 = 22;

                /// public static final [DATA_TYPE_SERVICE_DATA_32_BIT](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_DATA_32_BIT)
                pub const DATA_TYPE_SERVICE_DATA_32_BIT: i32 = 32;

                /// public static final [DATA_TYPE_SERVICE_SOLICITATION_UUIDS_128_BIT](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_SOLICITATION_UUIDS_128_BIT)
                pub const DATA_TYPE_SERVICE_SOLICITATION_UUIDS_128_BIT: i32 = 21;

                /// public static final [DATA_TYPE_SERVICE_SOLICITATION_UUIDS_16_BIT](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_SOLICITATION_UUIDS_16_BIT)
                pub const DATA_TYPE_SERVICE_SOLICITATION_UUIDS_16_BIT: i32 = 20;

                /// public static final [DATA_TYPE_SERVICE_SOLICITATION_UUIDS_32_BIT](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_SOLICITATION_UUIDS_32_BIT)
                pub const DATA_TYPE_SERVICE_SOLICITATION_UUIDS_32_BIT: i32 = 31;

                /// public static final [DATA_TYPE_SERVICE_UUIDS_128_BIT_COMPLETE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_UUIDS_128_BIT_COMPLETE)
                pub const DATA_TYPE_SERVICE_UUIDS_128_BIT_COMPLETE: i32 = 7;

                /// public static final [DATA_TYPE_SERVICE_UUIDS_128_BIT_PARTIAL](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_UUIDS_128_BIT_PARTIAL)
                pub const DATA_TYPE_SERVICE_UUIDS_128_BIT_PARTIAL: i32 = 6;

                /// public static final [DATA_TYPE_SERVICE_UUIDS_16_BIT_COMPLETE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_UUIDS_16_BIT_COMPLETE)
                pub const DATA_TYPE_SERVICE_UUIDS_16_BIT_COMPLETE: i32 = 3;

                /// public static final [DATA_TYPE_SERVICE_UUIDS_16_BIT_PARTIAL](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_UUIDS_16_BIT_PARTIAL)
                pub const DATA_TYPE_SERVICE_UUIDS_16_BIT_PARTIAL: i32 = 2;

                /// public static final [DATA_TYPE_SERVICE_UUIDS_32_BIT_COMPLETE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_UUIDS_32_BIT_COMPLETE)
                pub const DATA_TYPE_SERVICE_UUIDS_32_BIT_COMPLETE: i32 = 5;

                /// public static final [DATA_TYPE_SERVICE_UUIDS_32_BIT_PARTIAL](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SERVICE_UUIDS_32_BIT_PARTIAL)
                pub const DATA_TYPE_SERVICE_UUIDS_32_BIT_PARTIAL: i32 = 4;

                /// public static final [DATA_TYPE_SIMPLE_PAIRING_HASH_C](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SIMPLE_PAIRING_HASH_C)
                pub const DATA_TYPE_SIMPLE_PAIRING_HASH_C: i32 = 14;

                /// public static final [DATA_TYPE_SIMPLE_PAIRING_HASH_C_256](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SIMPLE_PAIRING_HASH_C_256)
                pub const DATA_TYPE_SIMPLE_PAIRING_HASH_C_256: i32 = 29;

                /// public static final [DATA_TYPE_SIMPLE_PAIRING_RANDOMIZER_R](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SIMPLE_PAIRING_RANDOMIZER_R)
                pub const DATA_TYPE_SIMPLE_PAIRING_RANDOMIZER_R: i32 = 15;

                /// public static final [DATA_TYPE_SIMPLE_PAIRING_RANDOMIZER_R_256](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SIMPLE_PAIRING_RANDOMIZER_R_256)
                pub const DATA_TYPE_SIMPLE_PAIRING_RANDOMIZER_R_256: i32 = 30;

                /// public static final [DATA_TYPE_SLAVE_CONNECTION_INTERVAL_RANGE](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_SLAVE_CONNECTION_INTERVAL_RANGE)
                pub const DATA_TYPE_SLAVE_CONNECTION_INTERVAL_RANGE: i32 = 18;

                /// public static final [DATA_TYPE_TRANSPORT_DISCOVERY_DATA](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_TRANSPORT_DISCOVERY_DATA)
                pub const DATA_TYPE_TRANSPORT_DISCOVERY_DATA: i32 = 38;

                /// public static final [DATA_TYPE_TX_POWER_LEVEL](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_TX_POWER_LEVEL)
                pub const DATA_TYPE_TX_POWER_LEVEL: i32 = 10;

                /// public static final [DATA_TYPE_URI](https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html#DATA_TYPE_URI)
                pub const DATA_TYPE_URI: i32 = 36;
            }

            /// pub final class [ScanResult](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html)
            #[repr(transparent)]
            pub struct ScanResult(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for ScanResult {}

            unsafe impl ::java_spaghetti::JniType for ScanResult {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/ScanResult\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::os::Parcelable> for ScanResult {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for ScanResult {}
            impl ::std::ops::Deref for ScanResult {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl ::std::convert::AsRef<super::super::os::Parcelable> for ScanResult {
                fn as_ref(&self) -> &super::super::os::Parcelable {
                    unsafe { &*(self as *const Self as *const super::super::os::Parcelable) }
                }
            }
            impl ScanResult {
                /// [ScanResult](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#ScanResult(android.bluetooth.BluetoothDevice,%20android.bluetooth.le.ScanRecord,%20int,%20long))
                #[deprecated]
                pub fn new_BluetoothDevice_ScanRecord_int_long<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: impl ::java_spaghetti::AsArg<super::BluetoothDevice>,
                    arg1: impl ::java_spaghetti::AsArg<ScanRecord>,
                    arg2: i32,
                    arg3: i64,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanResult", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/le/ScanRecord;IJ)V"
                    unsafe {
                        let __jni_args = [
                            arg0.as_arg_jvalue(),
                            arg1.as_arg_jvalue(),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ];
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanResult\0",
                            "<init>\0",
                            "(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/le/ScanRecord;IJ)V\0",
                        );
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [ScanResult](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#ScanResult(android.bluetooth.BluetoothDevice,%20int,%20int,%20int,%20int,%20int,%20int,%20int,%20android.bluetooth.le.ScanRecord,%20long))
                pub fn new_BluetoothDevice_int_int_int_int_int_int_int_ScanRecord_long<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: impl ::java_spaghetti::AsArg<super::BluetoothDevice>,
                    arg1: i32,
                    arg2: i32,
                    arg3: i32,
                    arg4: i32,
                    arg5: i32,
                    arg6: i32,
                    arg7: i32,
                    arg8: impl ::java_spaghetti::AsArg<ScanRecord>,
                    arg9: i64,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanResult", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/bluetooth/BluetoothDevice;IIIIIIILandroid/bluetooth/le/ScanRecord;J)V"
                    unsafe {
                        let __jni_args = [
                            arg0.as_arg_jvalue(),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg6),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg7),
                            arg8.as_arg_jvalue(),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg9),
                        ];
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanResult\0",
                            "<init>\0",
                            "(Landroid/bluetooth/BluetoothDevice;IIIIIIILandroid/bluetooth/le/ScanRecord;J)V\0",
                        );
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [describeContents](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#describeContents())
                pub fn describeContents<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanResult", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanResult\0",
                            "describeContents\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getDevice](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getDevice())
                pub fn getDevice<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::BluetoothDevice>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanResult", java.flags == PUBLIC, .name == "getDevice", .descriptor == "()Landroid/bluetooth/BluetoothDevice;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanResult\0",
                            "getDevice\0",
                            "()Landroid/bluetooth/BluetoothDevice;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getScanRecord](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getScanRecord())
                pub fn getScanRecord<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanRecord>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanResult", java.flags == PUBLIC, .name == "getScanRecord", .descriptor == "()Landroid/bluetooth/le/ScanRecord;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanResult\0",
                            "getScanRecord\0",
                            "()Landroid/bluetooth/le/ScanRecord;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getRssi](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getRssi())
                pub fn getRssi<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanResult", java.flags == PUBLIC, .name == "getRssi", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) =
                            __jni_env.require_class_method("android/bluetooth/le/ScanResult\0", "getRssi\0", "()I\0");
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getTimestampNanos](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getTimestampNanos())
                pub fn getTimestampNanos<'env>(
                    &'env self,
                ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanResult", java.flags == PUBLIC, .name == "getTimestampNanos", .descriptor == "()J"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanResult\0",
                            "getTimestampNanos\0",
                            "()J\0",
                        );
                        __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [isLegacy](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#isLegacy())
                pub fn isLegacy<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanResult", java.flags == PUBLIC, .name == "isLegacy", .descriptor == "()Z"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) =
                            __jni_env.require_class_method("android/bluetooth/le/ScanResult\0", "isLegacy\0", "()Z\0");
                        __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [isConnectable](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#isConnectable())
                pub fn isConnectable<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanResult", java.flags == PUBLIC, .name == "isConnectable", .descriptor == "()Z"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanResult\0",
                            "isConnectable\0",
                            "()Z\0",
                        );
                        __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getDataStatus](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getDataStatus())
                pub fn getDataStatus<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanResult", java.flags == PUBLIC, .name == "getDataStatus", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanResult\0",
                            "getDataStatus\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getPrimaryPhy](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getPrimaryPhy())
                pub fn getPrimaryPhy<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanResult", java.flags == PUBLIC, .name == "getPrimaryPhy", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanResult\0",
                            "getPrimaryPhy\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getSecondaryPhy](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getSecondaryPhy())
                pub fn getSecondaryPhy<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanResult", java.flags == PUBLIC, .name == "getSecondaryPhy", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanResult\0",
                            "getSecondaryPhy\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getAdvertisingSid](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getAdvertisingSid())
                pub fn getAdvertisingSid<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanResult", java.flags == PUBLIC, .name == "getAdvertisingSid", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanResult\0",
                            "getAdvertisingSid\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getTxPower](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getTxPower())
                pub fn getTxPower<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanResult", java.flags == PUBLIC, .name == "getTxPower", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanResult\0",
                            "getTxPower\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getPeriodicAdvertisingInterval](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getPeriodicAdvertisingInterval())
                pub fn getPeriodicAdvertisingInterval<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanResult", java.flags == PUBLIC, .name == "getPeriodicAdvertisingInterval", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanResult\0",
                            "getPeriodicAdvertisingInterval\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [hashCode](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#hashCode())
                pub fn hashCode<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanResult", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) =
                            __jni_env.require_class_method("android/bluetooth/le/ScanResult\0", "hashCode\0", "()I\0");
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [equals](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#equals(java.lang.Object))
                pub fn equals<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<super::super::super::java::lang::Object>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanResult", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanResult\0",
                            "equals\0",
                            "(Ljava/lang/Object;)Z\0",
                        );
                        __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [toString](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#toString())
                pub fn toString<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanResult", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanResult\0",
                            "toString\0",
                            "()Ljava/lang/String;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// public static final [DATA_COMPLETE](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#DATA_COMPLETE)
                pub const DATA_COMPLETE: i32 = 0;

                /// public static final [DATA_TRUNCATED](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#DATA_TRUNCATED)
                pub const DATA_TRUNCATED: i32 = 2;

                /// public static final [PERIODIC_INTERVAL_NOT_PRESENT](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#PERIODIC_INTERVAL_NOT_PRESENT)
                pub const PERIODIC_INTERVAL_NOT_PRESENT: i32 = 0;

                /// public static final [PHY_UNUSED](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#PHY_UNUSED)
                pub const PHY_UNUSED: i32 = 0;

                /// public static final [SID_NOT_PRESENT](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#SID_NOT_PRESENT)
                pub const SID_NOT_PRESENT: i32 = 255;

                /// public static final [TX_POWER_NOT_PRESENT](https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#TX_POWER_NOT_PRESENT)
                pub const TX_POWER_NOT_PRESENT: i32 = 127;
            }

            /// pub final class [ScanSettings](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html)
            #[repr(transparent)]
            pub struct ScanSettings(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for ScanSettings {}

            unsafe impl ::java_spaghetti::JniType for ScanSettings {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/ScanSettings\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::os::Parcelable> for ScanSettings {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for ScanSettings {}
            impl ::std::ops::Deref for ScanSettings {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl ::std::convert::AsRef<super::super::os::Parcelable> for ScanSettings {
                fn as_ref(&self) -> &super::super::os::Parcelable {
                    unsafe { &*(self as *const Self as *const super::super::os::Parcelable) }
                }
            }
            impl ScanSettings {
                /// [getScanMode](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#getScanMode())
                pub fn getScanMode<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanSettings", java.flags == PUBLIC, .name == "getScanMode", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanSettings\0",
                            "getScanMode\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getCallbackType](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#getCallbackType())
                pub fn getCallbackType<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanSettings", java.flags == PUBLIC, .name == "getCallbackType", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanSettings\0",
                            "getCallbackType\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getScanResultType](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#getScanResultType())
                pub fn getScanResultType<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanSettings", java.flags == PUBLIC, .name == "getScanResultType", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanSettings\0",
                            "getScanResultType\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getLegacy](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#getLegacy())
                pub fn getLegacy<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanSettings", java.flags == PUBLIC, .name == "getLegacy", .descriptor == "()Z"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanSettings\0",
                            "getLegacy\0",
                            "()Z\0",
                        );
                        __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getPhy](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#getPhy())
                pub fn getPhy<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanSettings", java.flags == PUBLIC, .name == "getPhy", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) =
                            __jni_env.require_class_method("android/bluetooth/le/ScanSettings\0", "getPhy\0", "()I\0");
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getReportDelayMillis](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#getReportDelayMillis())
                pub fn getReportDelayMillis<'env>(
                    &'env self,
                ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanSettings", java.flags == PUBLIC, .name == "getReportDelayMillis", .descriptor == "()J"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanSettings\0",
                            "getReportDelayMillis\0",
                            "()J\0",
                        );
                        __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [describeContents](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#describeContents())
                pub fn describeContents<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/ScanSettings", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanSettings\0",
                            "describeContents\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// public static final [CALLBACK_TYPE_ALL_MATCHES](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#CALLBACK_TYPE_ALL_MATCHES)
                pub const CALLBACK_TYPE_ALL_MATCHES: i32 = 1;

                /// public static final [CALLBACK_TYPE_FIRST_MATCH](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#CALLBACK_TYPE_FIRST_MATCH)
                pub const CALLBACK_TYPE_FIRST_MATCH: i32 = 2;

                /// public static final [CALLBACK_TYPE_MATCH_LOST](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#CALLBACK_TYPE_MATCH_LOST)
                pub const CALLBACK_TYPE_MATCH_LOST: i32 = 4;

                /// public static final [MATCH_MODE_AGGRESSIVE](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#MATCH_MODE_AGGRESSIVE)
                pub const MATCH_MODE_AGGRESSIVE: i32 = 1;

                /// public static final [MATCH_MODE_STICKY](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#MATCH_MODE_STICKY)
                pub const MATCH_MODE_STICKY: i32 = 2;

                /// public static final [MATCH_NUM_FEW_ADVERTISEMENT](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#MATCH_NUM_FEW_ADVERTISEMENT)
                pub const MATCH_NUM_FEW_ADVERTISEMENT: i32 = 2;

                /// public static final [MATCH_NUM_MAX_ADVERTISEMENT](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#MATCH_NUM_MAX_ADVERTISEMENT)
                pub const MATCH_NUM_MAX_ADVERTISEMENT: i32 = 3;

                /// public static final [MATCH_NUM_ONE_ADVERTISEMENT](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#MATCH_NUM_ONE_ADVERTISEMENT)
                pub const MATCH_NUM_ONE_ADVERTISEMENT: i32 = 1;

                /// public static final [PHY_LE_ALL_SUPPORTED](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#PHY_LE_ALL_SUPPORTED)
                pub const PHY_LE_ALL_SUPPORTED: i32 = 255;

                /// public static final [SCAN_MODE_BALANCED](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#SCAN_MODE_BALANCED)
                pub const SCAN_MODE_BALANCED: i32 = 1;

                /// public static final [SCAN_MODE_LOW_LATENCY](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#SCAN_MODE_LOW_LATENCY)
                pub const SCAN_MODE_LOW_LATENCY: i32 = 2;

                /// public static final [SCAN_MODE_LOW_POWER](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#SCAN_MODE_LOW_POWER)
                pub const SCAN_MODE_LOW_POWER: i32 = 0;

                /// public static final [SCAN_MODE_OPPORTUNISTIC](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html#SCAN_MODE_OPPORTUNISTIC)
                pub const SCAN_MODE_OPPORTUNISTIC: i32 = -1;
            }

            /// pub final class [ScanSettings.Builder](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html)
            #[repr(transparent)]
            pub struct ScanSettings_Builder(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for ScanSettings_Builder {}

            unsafe impl ::java_spaghetti::JniType for ScanSettings_Builder {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/ScanSettings$Builder\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for ScanSettings_Builder {}
            impl ::std::ops::Deref for ScanSettings_Builder {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl ScanSettings_Builder {
                /// [Builder](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#Builder())
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanSettings$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                    unsafe {
                        let __jni_args = [];
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanSettings$Builder\0",
                            "<init>\0",
                            "()V\0",
                        );
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setScanMode](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setScanMode(int))
                pub fn setScanMode<'env>(
                    &'env self,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanSettings$Builder", java.flags == PUBLIC, .name == "setScanMode", .descriptor == "(I)Landroid/bluetooth/le/ScanSettings$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanSettings$Builder\0",
                            "setScanMode\0",
                            "(I)Landroid/bluetooth/le/ScanSettings$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setCallbackType](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setCallbackType(int))
                pub fn setCallbackType<'env>(
                    &'env self,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanSettings$Builder", java.flags == PUBLIC, .name == "setCallbackType", .descriptor == "(I)Landroid/bluetooth/le/ScanSettings$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanSettings$Builder\0",
                            "setCallbackType\0",
                            "(I)Landroid/bluetooth/le/ScanSettings$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setReportDelay](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setReportDelay(long))
                pub fn setReportDelay<'env>(
                    &'env self,
                    arg0: i64,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanSettings$Builder", java.flags == PUBLIC, .name == "setReportDelay", .descriptor == "(J)Landroid/bluetooth/le/ScanSettings$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanSettings$Builder\0",
                            "setReportDelay\0",
                            "(J)Landroid/bluetooth/le/ScanSettings$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setNumOfMatches](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setNumOfMatches(int))
                pub fn setNumOfMatches<'env>(
                    &'env self,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanSettings$Builder", java.flags == PUBLIC, .name == "setNumOfMatches", .descriptor == "(I)Landroid/bluetooth/le/ScanSettings$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanSettings$Builder\0",
                            "setNumOfMatches\0",
                            "(I)Landroid/bluetooth/le/ScanSettings$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setMatchMode](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setMatchMode(int))
                pub fn setMatchMode<'env>(
                    &'env self,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanSettings$Builder", java.flags == PUBLIC, .name == "setMatchMode", .descriptor == "(I)Landroid/bluetooth/le/ScanSettings$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanSettings$Builder\0",
                            "setMatchMode\0",
                            "(I)Landroid/bluetooth/le/ScanSettings$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setLegacy](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setLegacy(boolean))
                pub fn setLegacy<'env>(
                    &'env self,
                    arg0: bool,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanSettings$Builder", java.flags == PUBLIC, .name == "setLegacy", .descriptor == "(Z)Landroid/bluetooth/le/ScanSettings$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanSettings$Builder\0",
                            "setLegacy\0",
                            "(Z)Landroid/bluetooth/le/ScanSettings$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [setPhy](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setPhy(int))
                pub fn setPhy<'env>(
                    &'env self,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanSettings_Builder>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanSettings$Builder", java.flags == PUBLIC, .name == "setPhy", .descriptor == "(I)Landroid/bluetooth/le/ScanSettings$Builder;"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanSettings$Builder\0",
                            "setPhy\0",
                            "(I)Landroid/bluetooth/le/ScanSettings$Builder;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [build](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#build())
                pub fn build<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ScanSettings>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/ScanSettings$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/bluetooth/le/ScanSettings;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/ScanSettings$Builder\0",
                            "build\0",
                            "()Landroid/bluetooth/le/ScanSettings;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }
            }

            /// pub final class [TransportBlock](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html)
            #[repr(transparent)]
            pub struct TransportBlock(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for TransportBlock {}

            unsafe impl ::java_spaghetti::JniType for TransportBlock {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/TransportBlock\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::os::Parcelable> for TransportBlock {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for TransportBlock {}
            impl ::std::ops::Deref for TransportBlock {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl ::std::convert::AsRef<super::super::os::Parcelable> for TransportBlock {
                fn as_ref(&self) -> &super::super::os::Parcelable {
                    unsafe { &*(self as *const Self as *const super::super::os::Parcelable) }
                }
            }
            impl TransportBlock {
                /// [TransportBlock](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html#TransportBlock(int,%20int,%20int,%20byte%5B%5D))
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: i32,
                    arg1: i32,
                    arg2: i32,
                    arg3: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/TransportBlock", java.flags == PUBLIC, .name == "<init>", .descriptor == "(III[B)V"
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                            arg3.as_arg_jvalue(),
                        ];
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/TransportBlock\0",
                            "<init>\0",
                            "(III[B)V\0",
                        );
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [describeContents](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html#describeContents())
                pub fn describeContents<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/TransportBlock", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/TransportBlock\0",
                            "describeContents\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [equals](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html#equals(java.lang.Object))
                pub fn equals<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<super::super::super::java::lang::Object>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/TransportBlock", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/TransportBlock\0",
                            "equals\0",
                            "(Ljava/lang/Object;)Z\0",
                        );
                        __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getOrgId](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html#getOrgId())
                pub fn getOrgId<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/TransportBlock", java.flags == PUBLIC, .name == "getOrgId", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/TransportBlock\0",
                            "getOrgId\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getTdsFlags](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html#getTdsFlags())
                pub fn getTdsFlags<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/TransportBlock", java.flags == PUBLIC, .name == "getTdsFlags", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/TransportBlock\0",
                            "getTdsFlags\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getTransportDataLength](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html#getTransportDataLength())
                pub fn getTransportDataLength<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/TransportBlock", java.flags == PUBLIC, .name == "getTransportDataLength", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/TransportBlock\0",
                            "getTransportDataLength\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getTransportData](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html#getTransportData())
                pub fn getTransportData<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/TransportBlock", java.flags == PUBLIC, .name == "getTransportData", .descriptor == "()[B"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/TransportBlock\0",
                            "getTransportData\0",
                            "()[B\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [toByteArray](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html#toByteArray())
                pub fn toByteArray<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/TransportBlock", java.flags == PUBLIC, .name == "toByteArray", .descriptor == "()[B"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/TransportBlock\0",
                            "toByteArray\0",
                            "()[B\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [totalBytes](https://developer.android.com/reference/android/bluetooth/le/TransportBlock.html#totalBytes())
                pub fn totalBytes<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/TransportBlock", java.flags == PUBLIC, .name == "totalBytes", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/TransportBlock\0",
                            "totalBytes\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }
            }

            /// pub final class [TransportDiscoveryData](https://developer.android.com/reference/android/bluetooth/le/TransportDiscoveryData.html)
            #[repr(transparent)]
            pub struct TransportDiscoveryData(pub(crate) ::java_spaghetti::ObjectAndEnv);
            unsafe impl ::java_spaghetti::ReferenceType for TransportDiscoveryData {}

            unsafe impl ::java_spaghetti::JniType for TransportDiscoveryData {
                fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                    callback("android/bluetooth/le/TransportDiscoveryData\0")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::os::Parcelable> for TransportDiscoveryData {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for TransportDiscoveryData {}
            impl ::std::ops::Deref for TransportDiscoveryData {
                type Target = super::super::super::java::lang::Object;
                fn deref(&self) -> &Self::Target {
                    unsafe { &*(self as *const Self as *const Self::Target) }
                }
            }
            impl ::std::convert::AsRef<super::super::os::Parcelable> for TransportDiscoveryData {
                fn as_ref(&self) -> &super::super::os::Parcelable {
                    unsafe { &*(self as *const Self as *const super::super::os::Parcelable) }
                }
            }
            impl TransportDiscoveryData {
                /// [TransportDiscoveryData](https://developer.android.com/reference/android/bluetooth/le/TransportDiscoveryData.html#TransportDiscoveryData(int,%20java.util.List))
                pub fn new_int_List<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: i32,
                    arg1: impl ::java_spaghetti::AsArg<super::super::super::java::util::List>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/TransportDiscoveryData", java.flags == PUBLIC, .name == "<init>", .descriptor == "(ILjava/util/List;)V"
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0), arg1.as_arg_jvalue()];
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/TransportDiscoveryData\0",
                            "<init>\0",
                            "(ILjava/util/List;)V\0",
                        );
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [TransportDiscoveryData](https://developer.android.com/reference/android/bluetooth/le/TransportDiscoveryData.html#TransportDiscoveryData(byte%5B%5D))
                pub fn new_byte_array<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/TransportDiscoveryData", java.flags == PUBLIC, .name == "<init>", .descriptor == "([B)V"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/TransportDiscoveryData\0",
                            "<init>\0",
                            "([B)V\0",
                        );
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [describeContents](https://developer.android.com/reference/android/bluetooth/le/TransportDiscoveryData.html#describeContents())
                pub fn describeContents<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/TransportDiscoveryData", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/TransportDiscoveryData\0",
                            "describeContents\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [equals](https://developer.android.com/reference/android/bluetooth/le/TransportDiscoveryData.html#equals(java.lang.Object))
                pub fn equals<'env>(
                    &'env self,
                    arg0: impl ::java_spaghetti::AsArg<super::super::super::java::lang::Object>,
                ) -> ::std::result::Result<
                    bool,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/TransportDiscoveryData", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                    unsafe {
                        let __jni_args = [arg0.as_arg_jvalue()];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/TransportDiscoveryData\0",
                            "equals\0",
                            "(Ljava/lang/Object;)Z\0",
                        );
                        __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getTransportDataType](https://developer.android.com/reference/android/bluetooth/le/TransportDiscoveryData.html#getTransportDataType())
                pub fn getTransportDataType<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/TransportDiscoveryData", java.flags == PUBLIC, .name == "getTransportDataType", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/TransportDiscoveryData\0",
                            "getTransportDataType\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [getTransportBlocks](https://developer.android.com/reference/android/bluetooth/le/TransportDiscoveryData.html#getTransportBlocks())
                pub fn getTransportBlocks<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::util::List>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/TransportDiscoveryData", java.flags == PUBLIC, .name == "getTransportBlocks", .descriptor == "()Ljava/util/List;"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/TransportDiscoveryData\0",
                            "getTransportBlocks\0",
                            "()Ljava/util/List;\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [toByteArray](https://developer.android.com/reference/android/bluetooth/le/TransportDiscoveryData.html#toByteArray())
                pub fn toByteArray<'env>(
                    &'env self,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    // class.path == "android/bluetooth/le/TransportDiscoveryData", java.flags == PUBLIC, .name == "toByteArray", .descriptor == "()[B"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/TransportDiscoveryData\0",
                            "toByteArray\0",
                            "()[B\0",
                        );
                        __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }

                /// [totalBytes](https://developer.android.com/reference/android/bluetooth/le/TransportDiscoveryData.html#totalBytes())
                pub fn totalBytes<'env>(
                    &'env self,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    // class.path == "android/bluetooth/le/TransportDiscoveryData", java.flags == PUBLIC, .name == "totalBytes", .descriptor == "()I"
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                        let (__jni_class, __jni_method) = __jni_env.require_class_method(
                            "android/bluetooth/le/TransportDiscoveryData\0",
                            "totalBytes\0",
                            "()I\0",
                        );
                        __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                    }
                }
            }
        }

        /// pub final class [BluetoothA2dp](https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html)
        #[repr(transparent)]
        pub struct BluetoothA2dp(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothA2dp {}

        unsafe impl ::java_spaghetti::JniType for BluetoothA2dp {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothA2dp\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<BluetoothProfile> for BluetoothA2dp {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothA2dp {}
        impl ::std::ops::Deref for BluetoothA2dp {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<BluetoothProfile> for BluetoothA2dp {
            fn as_ref(&self) -> &BluetoothProfile {
                unsafe { &*(self as *const Self as *const BluetoothProfile) }
            }
        }
        impl BluetoothA2dp {
            /// [finalize](https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html#finalize())
            pub fn finalize<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothA2dp", java.flags == PUBLIC, .name == "finalize", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothA2dp\0", "finalize\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html#getConnectedDevices())
            pub fn getConnectedDevices<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothA2dp", java.flags == PUBLIC, .name == "getConnectedDevices", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothA2dp\0",
                        "getConnectedDevices\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html#getDevicesMatchingConnectionStates(int%5B%5D))
            pub fn getDevicesMatchingConnectionStates<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothA2dp", java.flags == PUBLIC, .name == "getDevicesMatchingConnectionStates", .descriptor == "([I)Ljava/util/List;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothA2dp\0",
                        "getDevicesMatchingConnectionStates\0",
                        "([I)Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html#getConnectionState(android.bluetooth.BluetoothDevice))
            pub fn getConnectionState<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothA2dp", java.flags == PUBLIC, .name == "getConnectionState", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothA2dp\0",
                        "getConnectionState\0",
                        "(Landroid/bluetooth/BluetoothDevice;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isA2dpPlaying](https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html#isA2dpPlaying(android.bluetooth.BluetoothDevice))
            pub fn isA2dpPlaying<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothA2dp", java.flags == PUBLIC, .name == "isA2dpPlaying", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothA2dp\0",
                        "isA2dpPlaying\0",
                        "(Landroid/bluetooth/BluetoothDevice;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [ACTION_CONNECTION_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html#ACTION_CONNECTION_STATE_CHANGED)
            pub const ACTION_CONNECTION_STATE_CHANGED: &'static str =
                "android.bluetooth.a2dp.profile.action.CONNECTION_STATE_CHANGED";

            /// public static final [ACTION_PLAYING_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html#ACTION_PLAYING_STATE_CHANGED)
            pub const ACTION_PLAYING_STATE_CHANGED: &'static str =
                "android.bluetooth.a2dp.profile.action.PLAYING_STATE_CHANGED";

            /// public static final [STATE_NOT_PLAYING](https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html#STATE_NOT_PLAYING)
            pub const STATE_NOT_PLAYING: i32 = 11;

            /// public static final [STATE_PLAYING](https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html#STATE_PLAYING)
            pub const STATE_PLAYING: i32 = 10;
        }

        /// pub final class [BluetoothAdapter](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html)
        #[repr(transparent)]
        pub struct BluetoothAdapter(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothAdapter {}

        unsafe impl ::java_spaghetti::JniType for BluetoothAdapter {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothAdapter\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothAdapter {}
        impl ::std::ops::Deref for BluetoothAdapter {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BluetoothAdapter {
            /// [getDefaultAdapter](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getDefaultAdapter())
            #[deprecated]
            pub fn getDefaultAdapter<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothAdapter>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC | STATIC | SYNCRONIZED, .name == "getDefaultAdapter", .descriptor == "()Landroid/bluetooth/BluetoothAdapter;"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "getDefaultAdapter\0",
                        "()Landroid/bluetooth/BluetoothAdapter;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getRemoteDevice](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getRemoteDevice(java.lang.String))
            pub fn getRemoteDevice_String<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothDevice>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getRemoteDevice", .descriptor == "(Ljava/lang/String;)Landroid/bluetooth/BluetoothDevice;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "getRemoteDevice\0",
                        "(Ljava/lang/String;)Landroid/bluetooth/BluetoothDevice;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getRemoteLeDevice](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getRemoteLeDevice(java.lang.String,%20int))
            pub fn getRemoteLeDevice<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothDevice>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getRemoteLeDevice", .descriptor == "(Ljava/lang/String;I)Landroid/bluetooth/BluetoothDevice;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "getRemoteLeDevice\0",
                        "(Ljava/lang/String;I)Landroid/bluetooth/BluetoothDevice;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getRemoteDevice](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getRemoteDevice(byte%5B%5D))
            pub fn getRemoteDevice_byte_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothDevice>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getRemoteDevice", .descriptor == "([B)Landroid/bluetooth/BluetoothDevice;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "getRemoteDevice\0",
                        "([B)Landroid/bluetooth/BluetoothDevice;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getBluetoothLeAdvertiser](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBluetoothLeAdvertiser())
            pub fn getBluetoothLeAdvertiser<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, le::BluetoothLeAdvertiser>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getBluetoothLeAdvertiser", .descriptor == "()Landroid/bluetooth/le/BluetoothLeAdvertiser;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "getBluetoothLeAdvertiser\0",
                        "()Landroid/bluetooth/le/BluetoothLeAdvertiser;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getBluetoothLeScanner](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBluetoothLeScanner())
            pub fn getBluetoothLeScanner<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, le::BluetoothLeScanner>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getBluetoothLeScanner", .descriptor == "()Landroid/bluetooth/le/BluetoothLeScanner;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "getBluetoothLeScanner\0",
                        "()Landroid/bluetooth/le/BluetoothLeScanner;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isEnabled](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isEnabled())
            pub fn isEnabled<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isEnabled", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "isEnabled\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getState](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getState())
            pub fn getState<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getState", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "getState\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [enable](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#enable())
            #[deprecated]
            pub fn enable<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "enable", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "enable\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [disable](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#disable())
            #[deprecated]
            pub fn disable<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "disable", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "disable\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getAddress](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getAddress())
            pub fn getAddress<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getAddress", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "getAddress\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getName](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getName())
            pub fn getName<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getName", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "getName\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setName](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#setName(java.lang.String))
            pub fn setName<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "setName", .descriptor == "(Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "setName\0",
                        "(Ljava/lang/String;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getScanMode](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getScanMode())
            pub fn getScanMode<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getScanMode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "getScanMode\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [startDiscovery](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#startDiscovery())
            pub fn startDiscovery<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "startDiscovery", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "startDiscovery\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [cancelDiscovery](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#cancelDiscovery())
            pub fn cancelDiscovery<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "cancelDiscovery", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "cancelDiscovery\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isDiscovering](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isDiscovering())
            pub fn isDiscovering<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isDiscovering", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "isDiscovering\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isMultipleAdvertisementSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isMultipleAdvertisementSupported())
            pub fn isMultipleAdvertisementSupported<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isMultipleAdvertisementSupported", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "isMultipleAdvertisementSupported\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isOffloadedFilteringSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isOffloadedFilteringSupported())
            pub fn isOffloadedFilteringSupported<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isOffloadedFilteringSupported", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "isOffloadedFilteringSupported\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isOffloadedScanBatchingSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isOffloadedScanBatchingSupported())
            pub fn isOffloadedScanBatchingSupported<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isOffloadedScanBatchingSupported", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "isOffloadedScanBatchingSupported\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isLe2MPhySupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLe2MPhySupported())
            pub fn isLe2MPhySupported<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isLe2MPhySupported", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "isLe2MPhySupported\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isLeCodedPhySupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeCodedPhySupported())
            pub fn isLeCodedPhySupported<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isLeCodedPhySupported", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "isLeCodedPhySupported\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isLeExtendedAdvertisingSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeExtendedAdvertisingSupported())
            pub fn isLeExtendedAdvertisingSupported<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isLeExtendedAdvertisingSupported", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "isLeExtendedAdvertisingSupported\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isLePeriodicAdvertisingSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLePeriodicAdvertisingSupported())
            pub fn isLePeriodicAdvertisingSupported<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isLePeriodicAdvertisingSupported", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "isLePeriodicAdvertisingSupported\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isLeAudioSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeAudioSupported())
            pub fn isLeAudioSupported<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isLeAudioSupported", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "isLeAudioSupported\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isLeAudioBroadcastSourceSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeAudioBroadcastSourceSupported())
            pub fn isLeAudioBroadcastSourceSupported<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isLeAudioBroadcastSourceSupported", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "isLeAudioBroadcastSourceSupported\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isLeAudioBroadcastAssistantSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeAudioBroadcastAssistantSupported())
            pub fn isLeAudioBroadcastAssistantSupported<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isLeAudioBroadcastAssistantSupported", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "isLeAudioBroadcastAssistantSupported\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getLeMaximumAdvertisingDataLength](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getLeMaximumAdvertisingDataLength())
            pub fn getLeMaximumAdvertisingDataLength<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getLeMaximumAdvertisingDataLength", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "getLeMaximumAdvertisingDataLength\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getMaxConnectedAudioDevices](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getMaxConnectedAudioDevices())
            pub fn getMaxConnectedAudioDevices<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getMaxConnectedAudioDevices", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "getMaxConnectedAudioDevices\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getBondedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBondedDevices())
            pub fn getBondedDevices<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::Set>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getBondedDevices", .descriptor == "()Ljava/util/Set;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "getBondedDevices\0",
                        "()Ljava/util/Set;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getProfileConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getProfileConnectionState(int))
            pub fn getProfileConnectionState<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getProfileConnectionState", .descriptor == "(I)I"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "getProfileConnectionState\0",
                        "(I)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [listenUsingRfcommWithServiceRecord](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingRfcommWithServiceRecord(java.lang.String,%20java.util.UUID))
            pub fn listenUsingRfcommWithServiceRecord<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothServerSocket>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "listenUsingRfcommWithServiceRecord", .descriptor == "(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "listenUsingRfcommWithServiceRecord\0",
                        "(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [listenUsingInsecureRfcommWithServiceRecord](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingInsecureRfcommWithServiceRecord(java.lang.String,%20java.util.UUID))
            pub fn listenUsingInsecureRfcommWithServiceRecord<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothServerSocket>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "listenUsingInsecureRfcommWithServiceRecord", .descriptor == "(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "listenUsingInsecureRfcommWithServiceRecord\0",
                        "(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getProfileProxy](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getProfileProxy(android.content.Context,%20android.bluetooth.BluetoothProfile.ServiceListener,%20int))
            pub fn getProfileProxy<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::content::Context>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothProfile_ServiceListener>,
                arg2: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getProfileProxy", .descriptor == "(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;I)Z"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "getProfileProxy\0",
                        "(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;I)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [closeProfileProxy](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#closeProfileProxy(int,%20android.bluetooth.BluetoothProfile))
            pub fn closeProfileProxy<'env>(
                &'env self,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<BluetoothProfile>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "closeProfileProxy", .descriptor == "(ILandroid/bluetooth/BluetoothProfile;)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "closeProfileProxy\0",
                        "(ILandroid/bluetooth/BluetoothProfile;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [checkBluetoothAddress](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#checkBluetoothAddress(java.lang.String))
            pub fn checkBluetoothAddress<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC | STATIC, .name == "checkBluetoothAddress", .descriptor == "(Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "checkBluetoothAddress\0",
                        "(Ljava/lang/String;)Z\0",
                    );
                    __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [startLeScan](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#startLeScan(android.bluetooth.BluetoothAdapter.LeScanCallback))
            #[deprecated]
            pub fn startLeScan_LeScanCallback<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothAdapter_LeScanCallback>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "startLeScan", .descriptor == "(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "startLeScan\0",
                        "(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [startLeScan](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#startLeScan(java.util.UUID%5B%5D,%20android.bluetooth.BluetoothAdapter.LeScanCallback))
            #[deprecated]
            pub fn startLeScan_UUID_array_LeScanCallback<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<super::super::java::util::UUID, super::super::java::lang::Throwable>,
                >,
                arg1: impl ::java_spaghetti::AsArg<BluetoothAdapter_LeScanCallback>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "startLeScan", .descriptor == "([Ljava/util/UUID;Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "startLeScan\0",
                        "([Ljava/util/UUID;Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [stopLeScan](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#stopLeScan(android.bluetooth.BluetoothAdapter.LeScanCallback))
            #[deprecated]
            pub fn stopLeScan<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothAdapter_LeScanCallback>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "stopLeScan", .descriptor == "(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "stopLeScan\0",
                        "(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [listenUsingL2capChannel](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingL2capChannel())
            pub fn listenUsingL2capChannel<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothServerSocket>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "listenUsingL2capChannel", .descriptor == "()Landroid/bluetooth/BluetoothServerSocket;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "listenUsingL2capChannel\0",
                        "()Landroid/bluetooth/BluetoothServerSocket;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [listenUsingInsecureL2capChannel](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingInsecureL2capChannel())
            pub fn listenUsingInsecureL2capChannel<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothServerSocket>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "listenUsingInsecureL2capChannel", .descriptor == "()Landroid/bluetooth/BluetoothServerSocket;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter\0",
                        "listenUsingInsecureL2capChannel\0",
                        "()Landroid/bluetooth/BluetoothServerSocket;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [ACTION_CONNECTION_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_CONNECTION_STATE_CHANGED)
            pub const ACTION_CONNECTION_STATE_CHANGED: &'static str =
                "android.bluetooth.adapter.action.CONNECTION_STATE_CHANGED";

            /// public static final [ACTION_DISCOVERY_FINISHED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_DISCOVERY_FINISHED)
            pub const ACTION_DISCOVERY_FINISHED: &'static str = "android.bluetooth.adapter.action.DISCOVERY_FINISHED";

            /// public static final [ACTION_DISCOVERY_STARTED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_DISCOVERY_STARTED)
            pub const ACTION_DISCOVERY_STARTED: &'static str = "android.bluetooth.adapter.action.DISCOVERY_STARTED";

            /// public static final [ACTION_LOCAL_NAME_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_LOCAL_NAME_CHANGED)
            pub const ACTION_LOCAL_NAME_CHANGED: &'static str = "android.bluetooth.adapter.action.LOCAL_NAME_CHANGED";

            /// public static final [ACTION_REQUEST_DISCOVERABLE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_REQUEST_DISCOVERABLE)
            pub const ACTION_REQUEST_DISCOVERABLE: &'static str =
                "android.bluetooth.adapter.action.REQUEST_DISCOVERABLE";

            /// public static final [ACTION_REQUEST_ENABLE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_REQUEST_ENABLE)
            pub const ACTION_REQUEST_ENABLE: &'static str = "android.bluetooth.adapter.action.REQUEST_ENABLE";

            /// public static final [ACTION_SCAN_MODE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_SCAN_MODE_CHANGED)
            pub const ACTION_SCAN_MODE_CHANGED: &'static str = "android.bluetooth.adapter.action.SCAN_MODE_CHANGED";

            /// public static final [ACTION_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_STATE_CHANGED)
            pub const ACTION_STATE_CHANGED: &'static str = "android.bluetooth.adapter.action.STATE_CHANGED";

            /// public static final [ERROR](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ERROR)
            pub const ERROR: i32 = -2147483648;

            /// public static final [EXTRA_CONNECTION_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_CONNECTION_STATE)
            pub const EXTRA_CONNECTION_STATE: &'static str = "android.bluetooth.adapter.extra.CONNECTION_STATE";

            /// public static final [EXTRA_DISCOVERABLE_DURATION](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_DISCOVERABLE_DURATION)
            pub const EXTRA_DISCOVERABLE_DURATION: &'static str =
                "android.bluetooth.adapter.extra.DISCOVERABLE_DURATION";

            /// public static final [EXTRA_LOCAL_NAME](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_LOCAL_NAME)
            pub const EXTRA_LOCAL_NAME: &'static str = "android.bluetooth.adapter.extra.LOCAL_NAME";

            /// public static final [EXTRA_PREVIOUS_CONNECTION_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_PREVIOUS_CONNECTION_STATE)
            pub const EXTRA_PREVIOUS_CONNECTION_STATE: &'static str =
                "android.bluetooth.adapter.extra.PREVIOUS_CONNECTION_STATE";

            /// public static final [EXTRA_PREVIOUS_SCAN_MODE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_PREVIOUS_SCAN_MODE)
            pub const EXTRA_PREVIOUS_SCAN_MODE: &'static str = "android.bluetooth.adapter.extra.PREVIOUS_SCAN_MODE";

            /// public static final [EXTRA_PREVIOUS_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_PREVIOUS_STATE)
            pub const EXTRA_PREVIOUS_STATE: &'static str = "android.bluetooth.adapter.extra.PREVIOUS_STATE";

            /// public static final [EXTRA_SCAN_MODE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_SCAN_MODE)
            pub const EXTRA_SCAN_MODE: &'static str = "android.bluetooth.adapter.extra.SCAN_MODE";

            /// public static final [EXTRA_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_STATE)
            pub const EXTRA_STATE: &'static str = "android.bluetooth.adapter.extra.STATE";

            /// public static final [SCAN_MODE_CONNECTABLE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#SCAN_MODE_CONNECTABLE)
            pub const SCAN_MODE_CONNECTABLE: i32 = 21;

            /// public static final [SCAN_MODE_CONNECTABLE_DISCOVERABLE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#SCAN_MODE_CONNECTABLE_DISCOVERABLE)
            pub const SCAN_MODE_CONNECTABLE_DISCOVERABLE: i32 = 23;

            /// public static final [SCAN_MODE_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#SCAN_MODE_NONE)
            pub const SCAN_MODE_NONE: i32 = 20;

            /// public static final [STATE_CONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_CONNECTED)
            pub const STATE_CONNECTED: i32 = 2;

            /// public static final [STATE_CONNECTING](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_CONNECTING)
            pub const STATE_CONNECTING: i32 = 1;

            /// public static final [STATE_DISCONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_DISCONNECTED)
            pub const STATE_DISCONNECTED: i32 = 0;

            /// public static final [STATE_DISCONNECTING](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_DISCONNECTING)
            pub const STATE_DISCONNECTING: i32 = 3;

            /// public static final [STATE_OFF](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_OFF)
            pub const STATE_OFF: i32 = 10;

            /// public static final [STATE_ON](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_ON)
            pub const STATE_ON: i32 = 12;

            /// public static final [STATE_TURNING_OFF](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_TURNING_OFF)
            pub const STATE_TURNING_OFF: i32 = 13;

            /// public static final [STATE_TURNING_ON](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_TURNING_ON)
            pub const STATE_TURNING_ON: i32 = 11;
        }

        /// pub interface [BluetoothAdapter.LeScanCallback](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.LeScanCallback.html)
        #[repr(transparent)]
        pub struct BluetoothAdapter_LeScanCallback(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothAdapter_LeScanCallback {}

        unsafe impl ::java_spaghetti::JniType for BluetoothAdapter_LeScanCallback {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothAdapter$LeScanCallback\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothAdapter_LeScanCallback {}
        impl ::std::ops::Deref for BluetoothAdapter_LeScanCallback {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BluetoothAdapter_LeScanCallback {
            /// [onLeScan](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.LeScanCallback.html#onLeScan(android.bluetooth.BluetoothDevice,%20int,%20byte%5B%5D))
            pub fn onLeScan<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothAdapter$LeScanCallback", java.flags == PUBLIC | ABSTRACT, .name == "onLeScan", .descriptor == "(Landroid/bluetooth/BluetoothDevice;I[B)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        arg2.as_arg_jvalue(),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothAdapter$LeScanCallback\0",
                        "onLeScan\0",
                        "(Landroid/bluetooth/BluetoothDevice;I[B)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub class [BluetoothAssignedNumbers](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html)
        #[repr(transparent)]
        pub struct BluetoothAssignedNumbers(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothAssignedNumbers {}

        unsafe impl ::java_spaghetti::JniType for BluetoothAssignedNumbers {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothAssignedNumbers\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothAssignedNumbers {}
        impl ::std::ops::Deref for BluetoothAssignedNumbers {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BluetoothAssignedNumbers {
            /// public static final [AAMP_OF_AMERICA](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#AAMP_OF_AMERICA)
            pub const AAMP_OF_AMERICA: i32 = 190;

            /// public static final [ACCEL_SEMICONDUCTOR](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ACCEL_SEMICONDUCTOR)
            pub const ACCEL_SEMICONDUCTOR: i32 = 74;

            /// public static final [ACE_SENSOR](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ACE_SENSOR)
            pub const ACE_SENSOR: i32 = 188;

            /// public static final [ADIDAS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ADIDAS)
            pub const ADIDAS: i32 = 195;

            /// public static final [ADVANCED_PANMOBIL_SYSTEMS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ADVANCED_PANMOBIL_SYSTEMS)
            pub const ADVANCED_PANMOBIL_SYSTEMS: i32 = 145;

            /// public static final [AIROHA_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#AIROHA_TECHNOLOGY)
            pub const AIROHA_TECHNOLOGY: i32 = 148;

            /// public static final [ALCATEL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ALCATEL)
            pub const ALCATEL: i32 = 36;

            /// public static final [ALPWISE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ALPWISE)
            pub const ALPWISE: i32 = 154;

            /// public static final [AMICCOM_ELECTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#AMICCOM_ELECTRONICS)
            pub const AMICCOM_ELECTRONICS: i32 = 192;

            /// public static final [APLIX](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#APLIX)
            pub const APLIX: i32 = 189;

            /// public static final [APPLE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#APPLE)
            pub const APPLE: i32 = 76;

            /// public static final [APT_LICENSING](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#APT_LICENSING)
            pub const APT_LICENSING: i32 = 79;

            /// public static final [ARCHOS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ARCHOS)
            pub const ARCHOS: i32 = 207;

            /// public static final [ARP_DEVICES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ARP_DEVICES)
            pub const ARP_DEVICES: i32 = 168;

            /// public static final [ATHEROS_COMMUNICATIONS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ATHEROS_COMMUNICATIONS)
            pub const ATHEROS_COMMUNICATIONS: i32 = 69;

            /// public static final [ATMEL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ATMEL)
            pub const ATMEL: i32 = 19;

            /// public static final [AUSTCO_COMMUNICATION_SYSTEMS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#AUSTCO_COMMUNICATION_SYSTEMS)
            pub const AUSTCO_COMMUNICATION_SYSTEMS: i32 = 213;

            /// public static final [AUTONET_MOBILE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#AUTONET_MOBILE)
            pub const AUTONET_MOBILE: i32 = 127;

            /// public static final [AVAGO](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#AVAGO)
            pub const AVAGO: i32 = 78;

            /// public static final [AVM_BERLIN](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#AVM_BERLIN)
            pub const AVM_BERLIN: i32 = 31;

            /// public static final [A_AND_D_ENGINEERING](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#A_AND_D_ENGINEERING)
            pub const A_AND_D_ENGINEERING: i32 = 105;

            /// public static final [A_AND_R_CAMBRIDGE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#A_AND_R_CAMBRIDGE)
            pub const A_AND_R_CAMBRIDGE: i32 = 124;

            /// public static final [BANDSPEED](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BANDSPEED)
            pub const BANDSPEED: i32 = 32;

            /// public static final [BAND_XI_INTERNATIONAL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BAND_XI_INTERNATIONAL)
            pub const BAND_XI_INTERNATIONAL: i32 = 100;

            /// public static final [BDE_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BDE_TECHNOLOGY)
            pub const BDE_TECHNOLOGY: i32 = 180;

            /// public static final [BEATS_ELECTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BEATS_ELECTRONICS)
            pub const BEATS_ELECTRONICS: i32 = 204;

            /// public static final [BEAUTIFUL_ENTERPRISE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BEAUTIFUL_ENTERPRISE)
            pub const BEAUTIFUL_ENTERPRISE: i32 = 108;

            /// public static final [BEKEY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BEKEY)
            pub const BEKEY: i32 = 178;

            /// public static final [BELKIN_INTERNATIONAL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BELKIN_INTERNATIONAL)
            pub const BELKIN_INTERNATIONAL: i32 = 92;

            /// public static final [BINAURIC](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BINAURIC)
            pub const BINAURIC: i32 = 203;

            /// public static final [BIOSENTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BIOSENTRONICS)
            pub const BIOSENTRONICS: i32 = 219;

            /// public static final [BLUEGIGA](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BLUEGIGA)
            pub const BLUEGIGA: i32 = 71;

            /// public static final [BLUERADIOS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BLUERADIOS)
            pub const BLUERADIOS: i32 = 133;

            /// public static final [BLUETOOTH_SIG](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BLUETOOTH_SIG)
            pub const BLUETOOTH_SIG: i32 = 63;

            /// public static final [BLUETREK_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BLUETREK_TECHNOLOGIES)
            pub const BLUETREK_TECHNOLOGIES: i32 = 151;

            /// public static final [BOSE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BOSE)
            pub const BOSE: i32 = 158;

            /// public static final [BRIARTEK](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BRIARTEK)
            pub const BRIARTEK: i32 = 109;

            /// public static final [BROADCOM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#BROADCOM)
            pub const BROADCOM: i32 = 15;

            /// public static final [CAEN_RFID](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#CAEN_RFID)
            pub const CAEN_RFID: i32 = 170;

            /// public static final [CAMBRIDGE_SILICON_RADIO](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#CAMBRIDGE_SILICON_RADIO)
            pub const CAMBRIDGE_SILICON_RADIO: i32 = 10;

            /// public static final [CATC](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#CATC)
            pub const CATC: i32 = 52;

            /// public static final [CINETIX](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#CINETIX)
            pub const CINETIX: i32 = 175;

            /// public static final [CLARINOX_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#CLARINOX_TECHNOLOGIES)
            pub const CLARINOX_TECHNOLOGIES: i32 = 179;

            /// public static final [COLORFY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#COLORFY)
            pub const COLORFY: i32 = 156;

            /// public static final [COMMIL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#COMMIL)
            pub const COMMIL: i32 = 51;

            /// public static final [CONEXANT_SYSTEMS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#CONEXANT_SYSTEMS)
            pub const CONEXANT_SYSTEMS: i32 = 28;

            /// public static final [CONNECTBLUE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#CONNECTBLUE)
            pub const CONNECTBLUE: i32 = 113;

            /// public static final [CONTINENTAL_AUTOMOTIVE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#CONTINENTAL_AUTOMOTIVE)
            pub const CONTINENTAL_AUTOMOTIVE: i32 = 75;

            /// public static final [CONWISE_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#CONWISE_TECHNOLOGY)
            pub const CONWISE_TECHNOLOGY: i32 = 66;

            /// public static final [CREATIVE_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#CREATIVE_TECHNOLOGY)
            pub const CREATIVE_TECHNOLOGY: i32 = 118;

            /// public static final [C_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#C_TECHNOLOGIES)
            pub const C_TECHNOLOGIES: i32 = 38;

            /// public static final [DANLERS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#DANLERS)
            pub const DANLERS: i32 = 225;

            /// public static final [DELORME_PUBLISHING_COMPANY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#DELORME_PUBLISHING_COMPANY)
            pub const DELORME_PUBLISHING_COMPANY: i32 = 128;

            /// public static final [DEXCOM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#DEXCOM)
            pub const DEXCOM: i32 = 208;

            /// public static final [DIALOG_SEMICONDUCTOR](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#DIALOG_SEMICONDUCTOR)
            pub const DIALOG_SEMICONDUCTOR: i32 = 210;

            /// public static final [DIGIANSWER](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#DIGIANSWER)
            pub const DIGIANSWER: i32 = 12;

            /// public static final [ECLIPSE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ECLIPSE)
            pub const ECLIPSE: i32 = 53;

            /// public static final [ECOTEST](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ECOTEST)
            pub const ECOTEST: i32 = 136;

            /// public static final [ELGATO_SYSTEMS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ELGATO_SYSTEMS)
            pub const ELGATO_SYSTEMS: i32 = 206;

            /// public static final [EM_MICROELECTRONIC_MARIN](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#EM_MICROELECTRONIC_MARIN)
            pub const EM_MICROELECTRONIC_MARIN: i32 = 90;

            /// public static final [EQUINOX_AG](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#EQUINOX_AG)
            pub const EQUINOX_AG: i32 = 134;

            /// public static final [ERICSSON_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ERICSSON_TECHNOLOGY)
            pub const ERICSSON_TECHNOLOGY: i32 = 0;

            /// public static final [EVLUMA](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#EVLUMA)
            pub const EVLUMA: i32 = 201;

            /// public static final [FREE2MOVE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#FREE2MOVE)
            pub const FREE2MOVE: i32 = 83;

            /// public static final [FUNAI_ELECTRIC](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#FUNAI_ELECTRIC)
            pub const FUNAI_ELECTRIC: i32 = 144;

            /// public static final [GARMIN_INTERNATIONAL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GARMIN_INTERNATIONAL)
            pub const GARMIN_INTERNATIONAL: i32 = 135;

            /// public static final [GCT_SEMICONDUCTOR](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GCT_SEMICONDUCTOR)
            pub const GCT_SEMICONDUCTOR: i32 = 45;

            /// public static final [GELO](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GELO)
            pub const GELO: i32 = 200;

            /// public static final [GENEQ](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GENEQ)
            pub const GENEQ: i32 = 194;

            /// public static final [GENERAL_MOTORS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GENERAL_MOTORS)
            pub const GENERAL_MOTORS: i32 = 104;

            /// public static final [GENNUM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GENNUM)
            pub const GENNUM: i32 = 59;

            /// public static final [GEOFORCE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GEOFORCE)
            pub const GEOFORCE: i32 = 157;

            /// public static final [GIBSON_GUITARS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GIBSON_GUITARS)
            pub const GIBSON_GUITARS: i32 = 98;

            /// public static final [GN_NETCOM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GN_NETCOM)
            pub const GN_NETCOM: i32 = 103;

            /// public static final [GN_RESOUND](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GN_RESOUND)
            pub const GN_RESOUND: i32 = 137;

            /// public static final [GOOGLE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GOOGLE)
            pub const GOOGLE: i32 = 224;

            /// public static final [GREEN_THROTTLE_GAMES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GREEN_THROTTLE_GAMES)
            pub const GREEN_THROTTLE_GAMES: i32 = 172;

            /// public static final [GROUP_SENSE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#GROUP_SENSE)
            pub const GROUP_SENSE: i32 = 115;

            /// public static final [HANLYNN_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#HANLYNN_TECHNOLOGIES)
            pub const HANLYNN_TECHNOLOGIES: i32 = 123;

            /// public static final [HARMAN_INTERNATIONAL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#HARMAN_INTERNATIONAL)
            pub const HARMAN_INTERNATIONAL: i32 = 87;

            /// public static final [HEWLETT_PACKARD](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#HEWLETT_PACKARD)
            pub const HEWLETT_PACKARD: i32 = 101;

            /// public static final [HITACHI](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#HITACHI)
            pub const HITACHI: i32 = 41;

            /// public static final [HOSIDEN](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#HOSIDEN)
            pub const HOSIDEN: i32 = 221;

            /// public static final [IBM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#IBM)
            pub const IBM: i32 = 3;

            /// public static final [INFINEON_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#INFINEON_TECHNOLOGIES)
            pub const INFINEON_TECHNOLOGIES: i32 = 9;

            /// public static final [INGENIEUR_SYSTEMGRUPPE_ZAHN](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#INGENIEUR_SYSTEMGRUPPE_ZAHN)
            pub const INGENIEUR_SYSTEMGRUPPE_ZAHN: i32 = 171;

            /// public static final [INTEGRATED_SILICON_SOLUTION](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#INTEGRATED_SILICON_SOLUTION)
            pub const INTEGRATED_SILICON_SOLUTION: i32 = 65;

            /// public static final [INTEGRATED_SYSTEM_SOLUTION](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#INTEGRATED_SYSTEM_SOLUTION)
            pub const INTEGRATED_SYSTEM_SOLUTION: i32 = 57;

            /// public static final [INTEL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#INTEL)
            pub const INTEL: i32 = 2;

            /// public static final [INVENTEL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#INVENTEL)
            pub const INVENTEL: i32 = 30;

            /// public static final [IPEXTREME](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#IPEXTREME)
            pub const IPEXTREME: i32 = 61;

            /// public static final [I_TECH_DYNAMIC_GLOBAL_DISTRIBUTION](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#I_TECH_DYNAMIC_GLOBAL_DISTRIBUTION)
            pub const I_TECH_DYNAMIC_GLOBAL_DISTRIBUTION: i32 = 153;

            /// public static final [JAWBONE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#JAWBONE)
            pub const JAWBONE: i32 = 138;

            /// public static final [JIANGSU_TOPPOWER_AUTOMOTIVE_ELECTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#JIANGSU_TOPPOWER_AUTOMOTIVE_ELECTRONICS)
            pub const JIANGSU_TOPPOWER_AUTOMOTIVE_ELECTRONICS: i32 = 155;

            /// public static final [JOHNSON_CONTROLS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#JOHNSON_CONTROLS)
            pub const JOHNSON_CONTROLS: i32 = 185;

            /// public static final [J_AND_M](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#J_AND_M)
            pub const J_AND_M: i32 = 82;

            /// public static final [KAWANTECH](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#KAWANTECH)
            pub const KAWANTECH: i32 = 212;

            /// public static final [KC_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#KC_TECHNOLOGY)
            pub const KC_TECHNOLOGY: i32 = 22;

            /// public static final [KENSINGTON_COMPUTER_PRODUCTS_GROUP](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#KENSINGTON_COMPUTER_PRODUCTS_GROUP)
            pub const KENSINGTON_COMPUTER_PRODUCTS_GROUP: i32 = 160;

            /// public static final [LAIRD_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#LAIRD_TECHNOLOGIES)
            pub const LAIRD_TECHNOLOGIES: i32 = 119;

            /// public static final [LESSWIRE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#LESSWIRE)
            pub const LESSWIRE: i32 = 121;

            /// public static final [LG_ELECTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#LG_ELECTRONICS)
            pub const LG_ELECTRONICS: i32 = 196;

            /// public static final [LINAK](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#LINAK)
            pub const LINAK: i32 = 164;

            /// public static final [LUCENT](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#LUCENT)
            pub const LUCENT: i32 = 7;

            /// public static final [LUDUS_HELSINKI](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#LUDUS_HELSINKI)
            pub const LUDUS_HELSINKI: i32 = 132;

            /// public static final [MACRONIX](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MACRONIX)
            pub const MACRONIX: i32 = 44;

            /// public static final [MAGNETI_MARELLI](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MAGNETI_MARELLI)
            pub const MAGNETI_MARELLI: i32 = 169;

            /// public static final [MANSELLA](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MANSELLA)
            pub const MANSELLA: i32 = 33;

            /// public static final [MARVELL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MARVELL)
            pub const MARVELL: i32 = 72;

            /// public static final [MATSUSHITA_ELECTRIC](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MATSUSHITA_ELECTRIC)
            pub const MATSUSHITA_ELECTRIC: i32 = 58;

            /// public static final [MC10](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MC10)
            pub const MC10: i32 = 202;

            /// public static final [MEDIATEK](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MEDIATEK)
            pub const MEDIATEK: i32 = 70;

            /// public static final [MESO_INTERNATIONAL](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MESO_INTERNATIONAL)
            pub const MESO_INTERNATIONAL: i32 = 182;

            /// public static final [META_WATCH](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#META_WATCH)
            pub const META_WATCH: i32 = 163;

            /// public static final [MEWTEL_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MEWTEL_TECHNOLOGY)
            pub const MEWTEL_TECHNOLOGY: i32 = 47;

            /// public static final [MICOMMAND](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MICOMMAND)
            pub const MICOMMAND: i32 = 99;

            /// public static final [MICROCHIP_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MICROCHIP_TECHNOLOGY)
            pub const MICROCHIP_TECHNOLOGY: i32 = 205;

            /// public static final [MICROSOFT](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MICROSOFT)
            pub const MICROSOFT: i32 = 6;

            /// public static final [MINDTREE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MINDTREE)
            pub const MINDTREE: i32 = 106;

            /// public static final [MISFIT_WEARABLES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MISFIT_WEARABLES)
            pub const MISFIT_WEARABLES: i32 = 223;

            /// public static final [MITEL_SEMICONDUCTOR](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MITEL_SEMICONDUCTOR)
            pub const MITEL_SEMICONDUCTOR: i32 = 16;

            /// public static final [MITSUBISHI_ELECTRIC](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MITSUBISHI_ELECTRIC)
            pub const MITSUBISHI_ELECTRIC: i32 = 20;

            /// public static final [MOBILIAN_CORPORATION](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MOBILIAN_CORPORATION)
            pub const MOBILIAN_CORPORATION: i32 = 55;

            /// public static final [MONSTER](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MONSTER)
            pub const MONSTER: i32 = 112;

            /// public static final [MOTOROLA](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MOTOROLA)
            pub const MOTOROLA: i32 = 8;

            /// public static final [MSTAR_SEMICONDUCTOR](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MSTAR_SEMICONDUCTOR)
            pub const MSTAR_SEMICONDUCTOR: i32 = 122;

            /// public static final [MUZIK](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#MUZIK)
            pub const MUZIK: i32 = 222;

            /// public static final [NEC](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#NEC)
            pub const NEC: i32 = 34;

            /// public static final [NEC_LIGHTING](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#NEC_LIGHTING)
            pub const NEC_LIGHTING: i32 = 149;

            /// public static final [NEWLOGIC](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#NEWLOGIC)
            pub const NEWLOGIC: i32 = 23;

            /// public static final [NIKE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#NIKE)
            pub const NIKE: i32 = 120;

            /// public static final [NINE_SOLUTIONS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#NINE_SOLUTIONS)
            pub const NINE_SOLUTIONS: i32 = 102;

            /// public static final [NOKIA_MOBILE_PHONES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#NOKIA_MOBILE_PHONES)
            pub const NOKIA_MOBILE_PHONES: i32 = 1;

            /// public static final [NORDIC_SEMICONDUCTOR](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#NORDIC_SEMICONDUCTOR)
            pub const NORDIC_SEMICONDUCTOR: i32 = 89;

            /// public static final [NORWOOD_SYSTEMS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#NORWOOD_SYSTEMS)
            pub const NORWOOD_SYSTEMS: i32 = 46;

            /// public static final [ODM_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ODM_TECHNOLOGY)
            pub const ODM_TECHNOLOGY: i32 = 150;

            /// public static final [OMEGAWAVE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#OMEGAWAVE)
            pub const OMEGAWAVE: i32 = 174;

            /// public static final [ONSET_COMPUTER](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ONSET_COMPUTER)
            pub const ONSET_COMPUTER: i32 = 197;

            /// public static final [OPEN_INTERFACE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#OPEN_INTERFACE)
            pub const OPEN_INTERFACE: i32 = 39;

            /// public static final [OTL_DYNAMICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#OTL_DYNAMICS)
            pub const OTL_DYNAMICS: i32 = 165;

            /// public static final [PANDA_OCEAN](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#PANDA_OCEAN)
            pub const PANDA_OCEAN: i32 = 166;

            /// public static final [PARROT](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#PARROT)
            pub const PARROT: i32 = 67;

            /// public static final [PARTHUS_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#PARTHUS_TECHNOLOGIES)
            pub const PARTHUS_TECHNOLOGIES: i32 = 14;

            /// public static final [PASSIF_SEMICONDUCTOR](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#PASSIF_SEMICONDUCTOR)
            pub const PASSIF_SEMICONDUCTOR: i32 = 176;

            /// public static final [PETER_SYSTEMTECHNIK](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#PETER_SYSTEMTECHNIK)
            pub const PETER_SYSTEMTECHNIK: i32 = 173;

            /// public static final [PHILIPS_SEMICONDUCTORS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#PHILIPS_SEMICONDUCTORS)
            pub const PHILIPS_SEMICONDUCTORS: i32 = 37;

            /// public static final [PLANTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#PLANTRONICS)
            pub const PLANTRONICS: i32 = 85;

            /// public static final [POLAR_ELECTRO](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#POLAR_ELECTRO)
            pub const POLAR_ELECTRO: i32 = 107;

            /// public static final [POLAR_ELECTRO_EUROPE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#POLAR_ELECTRO_EUROPE)
            pub const POLAR_ELECTRO_EUROPE: i32 = 209;

            /// public static final [PROCTER_AND_GAMBLE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#PROCTER_AND_GAMBLE)
            pub const PROCTER_AND_GAMBLE: i32 = 220;

            /// public static final [QUALCOMM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#QUALCOMM)
            pub const QUALCOMM: i32 = 29;

            /// public static final [QUALCOMM_CONNECTED_EXPERIENCES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#QUALCOMM_CONNECTED_EXPERIENCES)
            pub const QUALCOMM_CONNECTED_EXPERIENCES: i32 = 216;

            /// public static final [QUALCOMM_INNOVATION_CENTER](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#QUALCOMM_INNOVATION_CENTER)
            pub const QUALCOMM_INNOVATION_CENTER: i32 = 184;

            /// public static final [QUALCOMM_LABS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#QUALCOMM_LABS)
            pub const QUALCOMM_LABS: i32 = 140;

            /// public static final [QUALCOMM_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#QUALCOMM_TECHNOLOGIES)
            pub const QUALCOMM_TECHNOLOGIES: i32 = 215;

            /// public static final [QUINTIC](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#QUINTIC)
            pub const QUINTIC: i32 = 142;

            /// public static final [QUUPPA](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#QUUPPA)
            pub const QUUPPA: i32 = 199;

            /// public static final [RALINK_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#RALINK_TECHNOLOGY)
            pub const RALINK_TECHNOLOGY: i32 = 91;

            /// public static final [RDA_MICROELECTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#RDA_MICROELECTRONICS)
            pub const RDA_MICROELECTRONICS: i32 = 97;

            /// public static final [REALTEK_SEMICONDUCTOR](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#REALTEK_SEMICONDUCTOR)
            pub const REALTEK_SEMICONDUCTOR: i32 = 93;

            /// public static final [RED_M](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#RED_M)
            pub const RED_M: i32 = 50;

            /// public static final [RENESAS_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#RENESAS_TECHNOLOGY)
            pub const RENESAS_TECHNOLOGY: i32 = 54;

            /// public static final [RESEARCH_IN_MOTION](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#RESEARCH_IN_MOTION)
            pub const RESEARCH_IN_MOTION: i32 = 60;

            /// public static final [RF_MICRO_DEVICES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#RF_MICRO_DEVICES)
            pub const RF_MICRO_DEVICES: i32 = 40;

            /// public static final [RIVIERAWAVES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#RIVIERAWAVES)
            pub const RIVIERAWAVES: i32 = 96;

            /// public static final [ROHDE_AND_SCHWARZ](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ROHDE_AND_SCHWARZ)
            pub const ROHDE_AND_SCHWARZ: i32 = 25;

            /// public static final [RTX_TELECOM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#RTX_TELECOM)
            pub const RTX_TELECOM: i32 = 21;

            /// public static final [SAMSUNG_ELECTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SAMSUNG_ELECTRONICS)
            pub const SAMSUNG_ELECTRONICS: i32 = 117;

            /// public static final [SARIS_CYCLING_GROUP](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SARIS_CYCLING_GROUP)
            pub const SARIS_CYCLING_GROUP: i32 = 177;

            /// public static final [SEERS_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SEERS_TECHNOLOGY)
            pub const SEERS_TECHNOLOGY: i32 = 125;

            /// public static final [SEIKO_EPSON](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SEIKO_EPSON)
            pub const SEIKO_EPSON: i32 = 64;

            /// public static final [SELFLY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SELFLY)
            pub const SELFLY: i32 = 198;

            /// public static final [SEMILINK](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SEMILINK)
            pub const SEMILINK: i32 = 226;

            /// public static final [SENNHEISER_COMMUNICATIONS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SENNHEISER_COMMUNICATIONS)
            pub const SENNHEISER_COMMUNICATIONS: i32 = 130;

            /// public static final [SHANGHAI_SUPER_SMART_ELECTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SHANGHAI_SUPER_SMART_ELECTRONICS)
            pub const SHANGHAI_SUPER_SMART_ELECTRONICS: i32 = 114;

            /// public static final [SHENZHEN_EXCELSECU_DATA_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SHENZHEN_EXCELSECU_DATA_TECHNOLOGY)
            pub const SHENZHEN_EXCELSECU_DATA_TECHNOLOGY: i32 = 193;

            /// public static final [SIGNIA_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SIGNIA_TECHNOLOGIES)
            pub const SIGNIA_TECHNOLOGIES: i32 = 27;

            /// public static final [SILICON_WAVE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SILICON_WAVE)
            pub const SILICON_WAVE: i32 = 11;

            /// public static final [SIRF_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SIRF_TECHNOLOGY)
            pub const SIRF_TECHNOLOGY: i32 = 80;

            /// public static final [SOCKET_MOBILE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SOCKET_MOBILE)
            pub const SOCKET_MOBILE: i32 = 68;

            /// public static final [SONY_ERICSSON](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SONY_ERICSSON)
            pub const SONY_ERICSSON: i32 = 86;

            /// public static final [SOUND_ID](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SOUND_ID)
            pub const SOUND_ID: i32 = 111;

            /// public static final [SPORTS_TRACKING_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SPORTS_TRACKING_TECHNOLOGIES)
            pub const SPORTS_TRACKING_TECHNOLOGIES: i32 = 126;

            /// public static final [SR_MEDIZINELEKTRONIK](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SR_MEDIZINELEKTRONIK)
            pub const SR_MEDIZINELEKTRONIK: i32 = 161;

            /// public static final [STACCATO_COMMUNICATIONS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#STACCATO_COMMUNICATIONS)
            pub const STACCATO_COMMUNICATIONS: i32 = 77;

            /// public static final [STALMART_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#STALMART_TECHNOLOGY)
            pub const STALMART_TECHNOLOGY: i32 = 191;

            /// public static final [STARKEY_LABORATORIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#STARKEY_LABORATORIES)
            pub const STARKEY_LABORATORIES: i32 = 186;

            /// public static final [STOLLMAN_E_PLUS_V](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#STOLLMAN_E_PLUS_V)
            pub const STOLLMAN_E_PLUS_V: i32 = 143;

            /// public static final [STONESTREET_ONE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#STONESTREET_ONE)
            pub const STONESTREET_ONE: i32 = 94;

            /// public static final [ST_MICROELECTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ST_MICROELECTRONICS)
            pub const ST_MICROELECTRONICS: i32 = 48;

            /// public static final [SUMMIT_DATA_COMMUNICATIONS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SUMMIT_DATA_COMMUNICATIONS)
            pub const SUMMIT_DATA_COMMUNICATIONS: i32 = 110;

            /// public static final [SUUNTO](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SUUNTO)
            pub const SUUNTO: i32 = 159;

            /// public static final [SWIRL_NETWORKS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SWIRL_NETWORKS)
            pub const SWIRL_NETWORKS: i32 = 181;

            /// public static final [SYMBOL_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SYMBOL_TECHNOLOGIES)
            pub const SYMBOL_TECHNOLOGIES: i32 = 42;

            /// public static final [SYNOPSYS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SYNOPSYS)
            pub const SYNOPSYS: i32 = 49;

            /// public static final [SYSTEMS_AND_CHIPS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#SYSTEMS_AND_CHIPS)
            pub const SYSTEMS_AND_CHIPS: i32 = 62;

            /// public static final [S_POWER_ELECTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#S_POWER_ELECTRONICS)
            pub const S_POWER_ELECTRONICS: i32 = 187;

            /// public static final [TAIXINGBANG_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TAIXINGBANG_TECHNOLOGY)
            pub const TAIXINGBANG_TECHNOLOGY: i32 = 211;

            /// public static final [TENOVIS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TENOVIS)
            pub const TENOVIS: i32 = 43;

            /// public static final [TERAX](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TERAX)
            pub const TERAX: i32 = 56;

            /// public static final [TEXAS_INSTRUMENTS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TEXAS_INSTRUMENTS)
            pub const TEXAS_INSTRUMENTS: i32 = 13;

            /// public static final [THINKOPTICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#THINKOPTICS)
            pub const THINKOPTICS: i32 = 146;

            /// public static final [THREECOM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#THREECOM)
            pub const THREECOM: i32 = 5;

            /// public static final [THREE_DIJOY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#THREE_DIJOY)
            pub const THREE_DIJOY: i32 = 84;

            /// public static final [THREE_DSP](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#THREE_DSP)
            pub const THREE_DSP: i32 = 73;

            /// public static final [TIMEKEEPING_SYSTEMS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TIMEKEEPING_SYSTEMS)
            pub const TIMEKEEPING_SYSTEMS: i32 = 131;

            /// public static final [TIMEX_GROUP_USA](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TIMEX_GROUP_USA)
            pub const TIMEX_GROUP_USA: i32 = 214;

            /// public static final [TOPCORN_POSITIONING_SYSTEMS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TOPCORN_POSITIONING_SYSTEMS)
            pub const TOPCORN_POSITIONING_SYSTEMS: i32 = 139;

            /// public static final [TOSHIBA](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TOSHIBA)
            pub const TOSHIBA: i32 = 4;

            /// public static final [TRANSILICA](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TRANSILICA)
            pub const TRANSILICA: i32 = 24;

            /// public static final [TRELAB](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TRELAB)
            pub const TRELAB: i32 = 183;

            /// public static final [TTPCOM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TTPCOM)
            pub const TTPCOM: i32 = 26;

            /// public static final [TXTR](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TXTR)
            pub const TXTR: i32 = 218;

            /// public static final [TZERO_TECHNOLOGIES](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#TZERO_TECHNOLOGIES)
            pub const TZERO_TECHNOLOGIES: i32 = 81;

            /// public static final [UNIVERSAL_ELECTRONICS](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#UNIVERSAL_ELECTRONICS)
            pub const UNIVERSAL_ELECTRONICS: i32 = 147;

            /// public static final [VERTU](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#VERTU)
            pub const VERTU: i32 = 162;

            /// public static final [VISTEON](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#VISTEON)
            pub const VISTEON: i32 = 167;

            /// public static final [VIZIO](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#VIZIO)
            pub const VIZIO: i32 = 88;

            /// public static final [VOYETRA_TURTLE_BEACH](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#VOYETRA_TURTLE_BEACH)
            pub const VOYETRA_TURTLE_BEACH: i32 = 217;

            /// public static final [WAVEPLUS_TECHNOLOGY](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#WAVEPLUS_TECHNOLOGY)
            pub const WAVEPLUS_TECHNOLOGY: i32 = 35;

            /// public static final [WICENTRIC](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#WICENTRIC)
            pub const WICENTRIC: i32 = 95;

            /// public static final [WIDCOMM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#WIDCOMM)
            pub const WIDCOMM: i32 = 17;

            /// public static final [WUXI_VIMICRO](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#WUXI_VIMICRO)
            pub const WUXI_VIMICRO: i32 = 129;

            /// public static final [ZEEVO](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ZEEVO)
            pub const ZEEVO: i32 = 18;

            /// public static final [ZER01_TV](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ZER01_TV)
            pub const ZER01_TV: i32 = 152;

            /// public static final [ZOMM](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ZOMM)
            pub const ZOMM: i32 = 116;

            /// public static final [ZSCAN_SOFTWARE](https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html#ZSCAN_SOFTWARE)
            pub const ZSCAN_SOFTWARE: i32 = 141;
        }

        /// pub final class [BluetoothClass](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html)
        #[repr(transparent)]
        pub struct BluetoothClass(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothClass {}

        unsafe impl ::java_spaghetti::JniType for BluetoothClass {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothClass\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothClass {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothClass {}
        impl ::std::ops::Deref for BluetoothClass {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<super::os::Parcelable> for BluetoothClass {
            fn as_ref(&self) -> &super::os::Parcelable {
                unsafe { &*(self as *const Self as *const super::os::Parcelable) }
            }
        }
        impl BluetoothClass {
            /// [equals](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#equals(java.lang.Object))
            pub fn equals<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothClass", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothClass\0",
                        "equals\0",
                        "(Ljava/lang/Object;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hashCode](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#hashCode())
            pub fn hashCode<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothClass", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothClass\0", "hashCode\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toString](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#toString())
            pub fn toString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothClass", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothClass\0",
                        "toString\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#describeContents())
            pub fn describeContents<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothClass", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothClass\0",
                        "describeContents\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hasService](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#hasService(int))
            pub fn hasService<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothClass", java.flags == PUBLIC, .name == "hasService", .descriptor == "(I)Z"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothClass\0", "hasService\0", "(I)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getMajorDeviceClass](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#getMajorDeviceClass())
            pub fn getMajorDeviceClass<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothClass", java.flags == PUBLIC, .name == "getMajorDeviceClass", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothClass\0",
                        "getMajorDeviceClass\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDeviceClass](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#getDeviceClass())
            pub fn getDeviceClass<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothClass", java.flags == PUBLIC, .name == "getDeviceClass", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothClass\0",
                        "getDeviceClass\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [doesClassMatch](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#doesClassMatch(int))
            pub fn doesClassMatch<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothClass", java.flags == PUBLIC, .name == "doesClassMatch", .descriptor == "(I)Z"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothClass\0",
                        "doesClassMatch\0",
                        "(I)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [PROFILE_A2DP](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#PROFILE_A2DP)
            pub const PROFILE_A2DP: i32 = 1;

            /// public static final [PROFILE_HEADSET](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#PROFILE_HEADSET)
            pub const PROFILE_HEADSET: i32 = 0;

            /// public static final [PROFILE_HID](https://developer.android.com/reference/android/bluetooth/BluetoothClass.html#PROFILE_HID)
            pub const PROFILE_HID: i32 = 3;
        }

        /// pub class [BluetoothClass.Device](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html)
        #[repr(transparent)]
        pub struct BluetoothClass_Device(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothClass_Device {}

        unsafe impl ::java_spaghetti::JniType for BluetoothClass_Device {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothClass$Device\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothClass_Device {}
        impl ::std::ops::Deref for BluetoothClass_Device {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BluetoothClass_Device {
            /// [Device](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#Device())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothClass$Device", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothClass$Device\0",
                        "<init>\0",
                        "()V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [AUDIO_VIDEO_CAMCORDER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_CAMCORDER)
            pub const AUDIO_VIDEO_CAMCORDER: i32 = 1076;

            /// public static final [AUDIO_VIDEO_CAR_AUDIO](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_CAR_AUDIO)
            pub const AUDIO_VIDEO_CAR_AUDIO: i32 = 1056;

            /// public static final [AUDIO_VIDEO_HANDSFREE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_HANDSFREE)
            pub const AUDIO_VIDEO_HANDSFREE: i32 = 1032;

            /// public static final [AUDIO_VIDEO_HEADPHONES](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_HEADPHONES)
            pub const AUDIO_VIDEO_HEADPHONES: i32 = 1048;

            /// public static final [AUDIO_VIDEO_HIFI_AUDIO](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_HIFI_AUDIO)
            pub const AUDIO_VIDEO_HIFI_AUDIO: i32 = 1064;

            /// public static final [AUDIO_VIDEO_LOUDSPEAKER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_LOUDSPEAKER)
            pub const AUDIO_VIDEO_LOUDSPEAKER: i32 = 1044;

            /// public static final [AUDIO_VIDEO_MICROPHONE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_MICROPHONE)
            pub const AUDIO_VIDEO_MICROPHONE: i32 = 1040;

            /// public static final [AUDIO_VIDEO_PORTABLE_AUDIO](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_PORTABLE_AUDIO)
            pub const AUDIO_VIDEO_PORTABLE_AUDIO: i32 = 1052;

            /// public static final [AUDIO_VIDEO_SET_TOP_BOX](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_SET_TOP_BOX)
            pub const AUDIO_VIDEO_SET_TOP_BOX: i32 = 1060;

            /// public static final [AUDIO_VIDEO_UNCATEGORIZED](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_UNCATEGORIZED)
            pub const AUDIO_VIDEO_UNCATEGORIZED: i32 = 1024;

            /// public static final [AUDIO_VIDEO_VCR](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_VCR)
            pub const AUDIO_VIDEO_VCR: i32 = 1068;

            /// public static final [AUDIO_VIDEO_VIDEO_CAMERA](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_VIDEO_CAMERA)
            pub const AUDIO_VIDEO_VIDEO_CAMERA: i32 = 1072;

            /// public static final [AUDIO_VIDEO_VIDEO_CONFERENCING](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_VIDEO_CONFERENCING)
            pub const AUDIO_VIDEO_VIDEO_CONFERENCING: i32 = 1088;

            /// public static final [AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER)
            pub const AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER: i32 = 1084;

            /// public static final [AUDIO_VIDEO_VIDEO_GAMING_TOY](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_VIDEO_GAMING_TOY)
            pub const AUDIO_VIDEO_VIDEO_GAMING_TOY: i32 = 1096;

            /// public static final [AUDIO_VIDEO_VIDEO_MONITOR](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_VIDEO_MONITOR)
            pub const AUDIO_VIDEO_VIDEO_MONITOR: i32 = 1080;

            /// public static final [AUDIO_VIDEO_WEARABLE_HEADSET](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#AUDIO_VIDEO_WEARABLE_HEADSET)
            pub const AUDIO_VIDEO_WEARABLE_HEADSET: i32 = 1028;

            /// public static final [COMPUTER_DESKTOP](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#COMPUTER_DESKTOP)
            pub const COMPUTER_DESKTOP: i32 = 260;

            /// public static final [COMPUTER_HANDHELD_PC_PDA](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#COMPUTER_HANDHELD_PC_PDA)
            pub const COMPUTER_HANDHELD_PC_PDA: i32 = 272;

            /// public static final [COMPUTER_LAPTOP](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#COMPUTER_LAPTOP)
            pub const COMPUTER_LAPTOP: i32 = 268;

            /// public static final [COMPUTER_PALM_SIZE_PC_PDA](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#COMPUTER_PALM_SIZE_PC_PDA)
            pub const COMPUTER_PALM_SIZE_PC_PDA: i32 = 276;

            /// public static final [COMPUTER_SERVER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#COMPUTER_SERVER)
            pub const COMPUTER_SERVER: i32 = 264;

            /// public static final [COMPUTER_UNCATEGORIZED](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#COMPUTER_UNCATEGORIZED)
            pub const COMPUTER_UNCATEGORIZED: i32 = 256;

            /// public static final [COMPUTER_WEARABLE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#COMPUTER_WEARABLE)
            pub const COMPUTER_WEARABLE: i32 = 280;

            /// public static final [HEALTH_BLOOD_PRESSURE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#HEALTH_BLOOD_PRESSURE)
            pub const HEALTH_BLOOD_PRESSURE: i32 = 2308;

            /// public static final [HEALTH_DATA_DISPLAY](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#HEALTH_DATA_DISPLAY)
            pub const HEALTH_DATA_DISPLAY: i32 = 2332;

            /// public static final [HEALTH_GLUCOSE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#HEALTH_GLUCOSE)
            pub const HEALTH_GLUCOSE: i32 = 2320;

            /// public static final [HEALTH_PULSE_OXIMETER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#HEALTH_PULSE_OXIMETER)
            pub const HEALTH_PULSE_OXIMETER: i32 = 2324;

            /// public static final [HEALTH_PULSE_RATE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#HEALTH_PULSE_RATE)
            pub const HEALTH_PULSE_RATE: i32 = 2328;

            /// public static final [HEALTH_THERMOMETER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#HEALTH_THERMOMETER)
            pub const HEALTH_THERMOMETER: i32 = 2312;

            /// public static final [HEALTH_UNCATEGORIZED](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#HEALTH_UNCATEGORIZED)
            pub const HEALTH_UNCATEGORIZED: i32 = 2304;

            /// public static final [HEALTH_WEIGHING](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#HEALTH_WEIGHING)
            pub const HEALTH_WEIGHING: i32 = 2316;

            /// public static final [PERIPHERAL_KEYBOARD](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#PERIPHERAL_KEYBOARD)
            pub const PERIPHERAL_KEYBOARD: i32 = 1344;

            /// public static final [PERIPHERAL_KEYBOARD_POINTING](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#PERIPHERAL_KEYBOARD_POINTING)
            pub const PERIPHERAL_KEYBOARD_POINTING: i32 = 1472;

            /// public static final [PERIPHERAL_NON_KEYBOARD_NON_POINTING](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#PERIPHERAL_NON_KEYBOARD_NON_POINTING)
            pub const PERIPHERAL_NON_KEYBOARD_NON_POINTING: i32 = 1280;

            /// public static final [PERIPHERAL_POINTING](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#PERIPHERAL_POINTING)
            pub const PERIPHERAL_POINTING: i32 = 1408;

            /// public static final [PHONE_CELLULAR](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#PHONE_CELLULAR)
            pub const PHONE_CELLULAR: i32 = 516;

            /// public static final [PHONE_CORDLESS](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#PHONE_CORDLESS)
            pub const PHONE_CORDLESS: i32 = 520;

            /// public static final [PHONE_ISDN](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#PHONE_ISDN)
            pub const PHONE_ISDN: i32 = 532;

            /// public static final [PHONE_MODEM_OR_GATEWAY](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#PHONE_MODEM_OR_GATEWAY)
            pub const PHONE_MODEM_OR_GATEWAY: i32 = 528;

            /// public static final [PHONE_SMART](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#PHONE_SMART)
            pub const PHONE_SMART: i32 = 524;

            /// public static final [PHONE_UNCATEGORIZED](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#PHONE_UNCATEGORIZED)
            pub const PHONE_UNCATEGORIZED: i32 = 512;

            /// public static final [TOY_CONTROLLER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#TOY_CONTROLLER)
            pub const TOY_CONTROLLER: i32 = 2064;

            /// public static final [TOY_DOLL_ACTION_FIGURE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#TOY_DOLL_ACTION_FIGURE)
            pub const TOY_DOLL_ACTION_FIGURE: i32 = 2060;

            /// public static final [TOY_GAME](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#TOY_GAME)
            pub const TOY_GAME: i32 = 2068;

            /// public static final [TOY_ROBOT](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#TOY_ROBOT)
            pub const TOY_ROBOT: i32 = 2052;

            /// public static final [TOY_UNCATEGORIZED](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#TOY_UNCATEGORIZED)
            pub const TOY_UNCATEGORIZED: i32 = 2048;

            /// public static final [TOY_VEHICLE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#TOY_VEHICLE)
            pub const TOY_VEHICLE: i32 = 2056;

            /// public static final [WEARABLE_GLASSES](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#WEARABLE_GLASSES)
            pub const WEARABLE_GLASSES: i32 = 1812;

            /// public static final [WEARABLE_HELMET](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#WEARABLE_HELMET)
            pub const WEARABLE_HELMET: i32 = 1808;

            /// public static final [WEARABLE_JACKET](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#WEARABLE_JACKET)
            pub const WEARABLE_JACKET: i32 = 1804;

            /// public static final [WEARABLE_PAGER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#WEARABLE_PAGER)
            pub const WEARABLE_PAGER: i32 = 1800;

            /// public static final [WEARABLE_UNCATEGORIZED](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#WEARABLE_UNCATEGORIZED)
            pub const WEARABLE_UNCATEGORIZED: i32 = 1792;

            /// public static final [WEARABLE_WRIST_WATCH](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html#WEARABLE_WRIST_WATCH)
            pub const WEARABLE_WRIST_WATCH: i32 = 1796;
        }

        /// pub class [BluetoothClass.Device.Major](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html)
        #[repr(transparent)]
        pub struct BluetoothClass_Device_Major(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothClass_Device_Major {}

        unsafe impl ::java_spaghetti::JniType for BluetoothClass_Device_Major {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothClass$Device$Major\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothClass_Device_Major {}
        impl ::std::ops::Deref for BluetoothClass_Device_Major {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BluetoothClass_Device_Major {
            /// [Major](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#Major())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothClass$Device$Major", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothClass$Device$Major\0",
                        "<init>\0",
                        "()V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [AUDIO_VIDEO](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#AUDIO_VIDEO)
            pub const AUDIO_VIDEO: i32 = 1024;

            /// public static final [COMPUTER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#COMPUTER)
            pub const COMPUTER: i32 = 256;

            /// public static final [HEALTH](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#HEALTH)
            pub const HEALTH: i32 = 2304;

            /// public static final [IMAGING](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#IMAGING)
            pub const IMAGING: i32 = 1536;

            /// public static final [MISC](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#MISC)
            pub const MISC: i32 = 0;

            /// public static final [NETWORKING](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#NETWORKING)
            pub const NETWORKING: i32 = 768;

            /// public static final [PERIPHERAL](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#PERIPHERAL)
            pub const PERIPHERAL: i32 = 1280;

            /// public static final [PHONE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#PHONE)
            pub const PHONE: i32 = 512;

            /// public static final [TOY](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#TOY)
            pub const TOY: i32 = 2048;

            /// public static final [UNCATEGORIZED](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#UNCATEGORIZED)
            pub const UNCATEGORIZED: i32 = 7936;

            /// public static final [WEARABLE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html#WEARABLE)
            pub const WEARABLE: i32 = 1792;
        }

        /// pub final class [BluetoothClass.Service](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html)
        #[repr(transparent)]
        pub struct BluetoothClass_Service(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothClass_Service {}

        unsafe impl ::java_spaghetti::JniType for BluetoothClass_Service {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothClass$Service\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothClass_Service {}
        impl ::std::ops::Deref for BluetoothClass_Service {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BluetoothClass_Service {
            /// [Service](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#Service())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothClass$Service", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothClass$Service\0",
                        "<init>\0",
                        "()V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [AUDIO](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#AUDIO)
            pub const AUDIO: i32 = 2097152;

            /// public static final [CAPTURE](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#CAPTURE)
            pub const CAPTURE: i32 = 524288;

            /// public static final [INFORMATION](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#INFORMATION)
            pub const INFORMATION: i32 = 8388608;

            /// public static final [LE_AUDIO](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#LE_AUDIO)
            pub const LE_AUDIO: i32 = 16384;

            /// public static final [LIMITED_DISCOVERABILITY](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#LIMITED_DISCOVERABILITY)
            pub const LIMITED_DISCOVERABILITY: i32 = 8192;

            /// public static final [NETWORKING](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#NETWORKING)
            pub const NETWORKING: i32 = 131072;

            /// public static final [OBJECT_TRANSFER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#OBJECT_TRANSFER)
            pub const OBJECT_TRANSFER: i32 = 1048576;

            /// public static final [POSITIONING](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#POSITIONING)
            pub const POSITIONING: i32 = 65536;

            /// public static final [RENDER](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#RENDER)
            pub const RENDER: i32 = 262144;

            /// public static final [TELEPHONY](https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html#TELEPHONY)
            pub const TELEPHONY: i32 = 4194304;
        }

        /// pub final class [BluetoothCodecConfig](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html)
        #[repr(transparent)]
        pub struct BluetoothCodecConfig(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothCodecConfig {}

        unsafe impl ::java_spaghetti::JniType for BluetoothCodecConfig {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothCodecConfig\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothCodecConfig {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothCodecConfig {}
        impl ::std::ops::Deref for BluetoothCodecConfig {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<super::os::Parcelable> for BluetoothCodecConfig {
            fn as_ref(&self) -> &super::os::Parcelable {
                unsafe { &*(self as *const Self as *const super::os::Parcelable) }
            }
        }
        impl BluetoothCodecConfig {
            /// [equals](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#equals(java.lang.Object))
            pub fn equals<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothCodecConfig", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig\0",
                        "equals\0",
                        "(Ljava/lang/Object;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hashCode](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#hashCode())
            pub fn hashCode<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothCodecConfig", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig\0",
                        "hashCode\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toString](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#toString())
            pub fn toString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecConfig", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig\0",
                        "toString\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#describeContents())
            pub fn describeContents<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothCodecConfig", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig\0",
                        "describeContents\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCodecType](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#getCodecType())
            pub fn getCodecType<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothCodecConfig", java.flags == PUBLIC, .name == "getCodecType", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig\0",
                        "getCodecType\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isMandatoryCodec](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#isMandatoryCodec())
            pub fn isMandatoryCodec<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothCodecConfig", java.flags == PUBLIC, .name == "isMandatoryCodec", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig\0",
                        "isMandatoryCodec\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCodecPriority](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#getCodecPriority())
            pub fn getCodecPriority<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothCodecConfig", java.flags == PUBLIC, .name == "getCodecPriority", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig\0",
                        "getCodecPriority\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getSampleRate](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#getSampleRate())
            pub fn getSampleRate<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothCodecConfig", java.flags == PUBLIC, .name == "getSampleRate", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig\0",
                        "getSampleRate\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getBitsPerSample](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#getBitsPerSample())
            pub fn getBitsPerSample<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothCodecConfig", java.flags == PUBLIC, .name == "getBitsPerSample", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig\0",
                        "getBitsPerSample\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getChannelMode](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#getChannelMode())
            pub fn getChannelMode<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothCodecConfig", java.flags == PUBLIC, .name == "getChannelMode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig\0",
                        "getChannelMode\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCodecSpecific1](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#getCodecSpecific1())
            pub fn getCodecSpecific1<'env>(
                &'env self,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothCodecConfig", java.flags == PUBLIC, .name == "getCodecSpecific1", .descriptor == "()J"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig\0",
                        "getCodecSpecific1\0",
                        "()J\0",
                    );
                    __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCodecSpecific2](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#getCodecSpecific2())
            pub fn getCodecSpecific2<'env>(
                &'env self,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothCodecConfig", java.flags == PUBLIC, .name == "getCodecSpecific2", .descriptor == "()J"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig\0",
                        "getCodecSpecific2\0",
                        "()J\0",
                    );
                    __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCodecSpecific3](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#getCodecSpecific3())
            pub fn getCodecSpecific3<'env>(
                &'env self,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothCodecConfig", java.flags == PUBLIC, .name == "getCodecSpecific3", .descriptor == "()J"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig\0",
                        "getCodecSpecific3\0",
                        "()J\0",
                    );
                    __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCodecSpecific4](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#getCodecSpecific4())
            pub fn getCodecSpecific4<'env>(
                &'env self,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothCodecConfig", java.flags == PUBLIC, .name == "getCodecSpecific4", .descriptor == "()J"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig\0",
                        "getCodecSpecific4\0",
                        "()J\0",
                    );
                    __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [BITS_PER_SAMPLE_16](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#BITS_PER_SAMPLE_16)
            pub const BITS_PER_SAMPLE_16: i32 = 1;

            /// public static final [BITS_PER_SAMPLE_24](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#BITS_PER_SAMPLE_24)
            pub const BITS_PER_SAMPLE_24: i32 = 2;

            /// public static final [BITS_PER_SAMPLE_32](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#BITS_PER_SAMPLE_32)
            pub const BITS_PER_SAMPLE_32: i32 = 4;

            /// public static final [BITS_PER_SAMPLE_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#BITS_PER_SAMPLE_NONE)
            pub const BITS_PER_SAMPLE_NONE: i32 = 0;

            /// public static final [CHANNEL_MODE_MONO](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#CHANNEL_MODE_MONO)
            pub const CHANNEL_MODE_MONO: i32 = 1;

            /// public static final [CHANNEL_MODE_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#CHANNEL_MODE_NONE)
            pub const CHANNEL_MODE_NONE: i32 = 0;

            /// public static final [CHANNEL_MODE_STEREO](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#CHANNEL_MODE_STEREO)
            pub const CHANNEL_MODE_STEREO: i32 = 2;

            /// public static final [CODEC_PRIORITY_DEFAULT](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#CODEC_PRIORITY_DEFAULT)
            pub const CODEC_PRIORITY_DEFAULT: i32 = 0;

            /// public static final [CODEC_PRIORITY_DISABLED](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#CODEC_PRIORITY_DISABLED)
            pub const CODEC_PRIORITY_DISABLED: i32 = -1;

            /// public static final [CODEC_PRIORITY_HIGHEST](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#CODEC_PRIORITY_HIGHEST)
            pub const CODEC_PRIORITY_HIGHEST: i32 = 1000000;

            /// public static final [SAMPLE_RATE_176400](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SAMPLE_RATE_176400)
            pub const SAMPLE_RATE_176400: i32 = 16;

            /// public static final [SAMPLE_RATE_192000](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SAMPLE_RATE_192000)
            pub const SAMPLE_RATE_192000: i32 = 32;

            /// public static final [SAMPLE_RATE_44100](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SAMPLE_RATE_44100)
            pub const SAMPLE_RATE_44100: i32 = 1;

            /// public static final [SAMPLE_RATE_48000](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SAMPLE_RATE_48000)
            pub const SAMPLE_RATE_48000: i32 = 2;

            /// public static final [SAMPLE_RATE_88200](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SAMPLE_RATE_88200)
            pub const SAMPLE_RATE_88200: i32 = 4;

            /// public static final [SAMPLE_RATE_96000](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SAMPLE_RATE_96000)
            pub const SAMPLE_RATE_96000: i32 = 8;

            /// public static final [SAMPLE_RATE_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SAMPLE_RATE_NONE)
            pub const SAMPLE_RATE_NONE: i32 = 0;

            /// public static final [SOURCE_CODEC_TYPE_AAC](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SOURCE_CODEC_TYPE_AAC)
            pub const SOURCE_CODEC_TYPE_AAC: i32 = 1;

            /// public static final [SOURCE_CODEC_TYPE_APTX](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SOURCE_CODEC_TYPE_APTX)
            pub const SOURCE_CODEC_TYPE_APTX: i32 = 2;

            /// public static final [SOURCE_CODEC_TYPE_APTX_HD](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SOURCE_CODEC_TYPE_APTX_HD)
            pub const SOURCE_CODEC_TYPE_APTX_HD: i32 = 3;

            /// public static final [SOURCE_CODEC_TYPE_INVALID](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SOURCE_CODEC_TYPE_INVALID)
            pub const SOURCE_CODEC_TYPE_INVALID: i32 = 1000000;

            /// public static final [SOURCE_CODEC_TYPE_LC3](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SOURCE_CODEC_TYPE_LC3)
            pub const SOURCE_CODEC_TYPE_LC3: i32 = 5;

            /// public static final [SOURCE_CODEC_TYPE_LDAC](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SOURCE_CODEC_TYPE_LDAC)
            pub const SOURCE_CODEC_TYPE_LDAC: i32 = 4;

            /// public static final [SOURCE_CODEC_TYPE_SBC](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.html#SOURCE_CODEC_TYPE_SBC)
            pub const SOURCE_CODEC_TYPE_SBC: i32 = 0;
        }

        /// pub final class [BluetoothCodecConfig.Builder](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html)
        #[repr(transparent)]
        pub struct BluetoothCodecConfig_Builder(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothCodecConfig_Builder {}

        unsafe impl ::java_spaghetti::JniType for BluetoothCodecConfig_Builder {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothCodecConfig$Builder\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothCodecConfig_Builder {}
        impl ::std::ops::Deref for BluetoothCodecConfig_Builder {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BluetoothCodecConfig_Builder {
            /// [Builder](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#Builder())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecConfig$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig$Builder\0",
                        "<init>\0",
                        "()V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setCodecType](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#setCodecType(int))
            pub fn setCodecType<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecConfig$Builder", java.flags == PUBLIC, .name == "setCodecType", .descriptor == "(I)Landroid/bluetooth/BluetoothCodecConfig$Builder;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig$Builder\0",
                        "setCodecType\0",
                        "(I)Landroid/bluetooth/BluetoothCodecConfig$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setCodecPriority](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#setCodecPriority(int))
            pub fn setCodecPriority<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecConfig$Builder", java.flags == PUBLIC, .name == "setCodecPriority", .descriptor == "(I)Landroid/bluetooth/BluetoothCodecConfig$Builder;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig$Builder\0",
                        "setCodecPriority\0",
                        "(I)Landroid/bluetooth/BluetoothCodecConfig$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setSampleRate](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#setSampleRate(int))
            pub fn setSampleRate<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecConfig$Builder", java.flags == PUBLIC, .name == "setSampleRate", .descriptor == "(I)Landroid/bluetooth/BluetoothCodecConfig$Builder;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig$Builder\0",
                        "setSampleRate\0",
                        "(I)Landroid/bluetooth/BluetoothCodecConfig$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setBitsPerSample](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#setBitsPerSample(int))
            pub fn setBitsPerSample<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecConfig$Builder", java.flags == PUBLIC, .name == "setBitsPerSample", .descriptor == "(I)Landroid/bluetooth/BluetoothCodecConfig$Builder;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig$Builder\0",
                        "setBitsPerSample\0",
                        "(I)Landroid/bluetooth/BluetoothCodecConfig$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setChannelMode](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#setChannelMode(int))
            pub fn setChannelMode<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecConfig$Builder", java.flags == PUBLIC, .name == "setChannelMode", .descriptor == "(I)Landroid/bluetooth/BluetoothCodecConfig$Builder;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig$Builder\0",
                        "setChannelMode\0",
                        "(I)Landroid/bluetooth/BluetoothCodecConfig$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setCodecSpecific1](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#setCodecSpecific1(long))
            pub fn setCodecSpecific1<'env>(
                &'env self,
                arg0: i64,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecConfig$Builder", java.flags == PUBLIC, .name == "setCodecSpecific1", .descriptor == "(J)Landroid/bluetooth/BluetoothCodecConfig$Builder;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig$Builder\0",
                        "setCodecSpecific1\0",
                        "(J)Landroid/bluetooth/BluetoothCodecConfig$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setCodecSpecific2](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#setCodecSpecific2(long))
            pub fn setCodecSpecific2<'env>(
                &'env self,
                arg0: i64,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecConfig$Builder", java.flags == PUBLIC, .name == "setCodecSpecific2", .descriptor == "(J)Landroid/bluetooth/BluetoothCodecConfig$Builder;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig$Builder\0",
                        "setCodecSpecific2\0",
                        "(J)Landroid/bluetooth/BluetoothCodecConfig$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setCodecSpecific3](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#setCodecSpecific3(long))
            pub fn setCodecSpecific3<'env>(
                &'env self,
                arg0: i64,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecConfig$Builder", java.flags == PUBLIC, .name == "setCodecSpecific3", .descriptor == "(J)Landroid/bluetooth/BluetoothCodecConfig$Builder;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig$Builder\0",
                        "setCodecSpecific3\0",
                        "(J)Landroid/bluetooth/BluetoothCodecConfig$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setCodecSpecific4](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#setCodecSpecific4(long))
            pub fn setCodecSpecific4<'env>(
                &'env self,
                arg0: i64,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecConfig$Builder", java.flags == PUBLIC, .name == "setCodecSpecific4", .descriptor == "(J)Landroid/bluetooth/BluetoothCodecConfig$Builder;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig$Builder\0",
                        "setCodecSpecific4\0",
                        "(J)Landroid/bluetooth/BluetoothCodecConfig$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [build](https://developer.android.com/reference/android/bluetooth/BluetoothCodecConfig.Builder.html#build())
            pub fn build<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecConfig$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/bluetooth/BluetoothCodecConfig;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecConfig$Builder\0",
                        "build\0",
                        "()Landroid/bluetooth/BluetoothCodecConfig;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub final class [BluetoothCodecStatus](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.html)
        #[repr(transparent)]
        pub struct BluetoothCodecStatus(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothCodecStatus {}

        unsafe impl ::java_spaghetti::JniType for BluetoothCodecStatus {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothCodecStatus\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothCodecStatus {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothCodecStatus {}
        impl ::std::ops::Deref for BluetoothCodecStatus {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<super::os::Parcelable> for BluetoothCodecStatus {
            fn as_ref(&self) -> &super::os::Parcelable {
                unsafe { &*(self as *const Self as *const super::os::Parcelable) }
            }
        }
        impl BluetoothCodecStatus {
            /// [equals](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.html#equals(java.lang.Object))
            pub fn equals<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothCodecStatus", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecStatus\0",
                        "equals\0",
                        "(Ljava/lang/Object;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isCodecConfigSelectable](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.html#isCodecConfigSelectable(android.bluetooth.BluetoothCodecConfig))
            pub fn isCodecConfigSelectable<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothCodecConfig>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothCodecStatus", java.flags == PUBLIC, .name == "isCodecConfigSelectable", .descriptor == "(Landroid/bluetooth/BluetoothCodecConfig;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecStatus\0",
                        "isCodecConfigSelectable\0",
                        "(Landroid/bluetooth/BluetoothCodecConfig;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hashCode](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.html#hashCode())
            pub fn hashCode<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothCodecStatus", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecStatus\0",
                        "hashCode\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toString](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.html#toString())
            pub fn toString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecStatus", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecStatus\0",
                        "toString\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.html#describeContents())
            pub fn describeContents<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothCodecStatus", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecStatus\0",
                        "describeContents\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCodecConfig](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.html#getCodecConfig())
            pub fn getCodecConfig<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecConfig>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecStatus", java.flags == PUBLIC, .name == "getCodecConfig", .descriptor == "()Landroid/bluetooth/BluetoothCodecConfig;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecStatus\0",
                        "getCodecConfig\0",
                        "()Landroid/bluetooth/BluetoothCodecConfig;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCodecsLocalCapabilities](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.html#getCodecsLocalCapabilities())
            pub fn getCodecsLocalCapabilities<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecStatus", java.flags == PUBLIC, .name == "getCodecsLocalCapabilities", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecStatus\0",
                        "getCodecsLocalCapabilities\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCodecsSelectableCapabilities](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.html#getCodecsSelectableCapabilities())
            pub fn getCodecsSelectableCapabilities<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecStatus", java.flags == PUBLIC, .name == "getCodecsSelectableCapabilities", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecStatus\0",
                        "getCodecsSelectableCapabilities\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [EXTRA_CODEC_STATUS](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.html#EXTRA_CODEC_STATUS)
            pub const EXTRA_CODEC_STATUS: &'static str = "android.bluetooth.extra.CODEC_STATUS";
        }

        /// pub final class [BluetoothCodecStatus.Builder](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.Builder.html)
        #[repr(transparent)]
        pub struct BluetoothCodecStatus_Builder(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothCodecStatus_Builder {}

        unsafe impl ::java_spaghetti::JniType for BluetoothCodecStatus_Builder {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothCodecStatus$Builder\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothCodecStatus_Builder {}
        impl ::std::ops::Deref for BluetoothCodecStatus_Builder {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BluetoothCodecStatus_Builder {
            /// [Builder](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.Builder.html#Builder())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecStatus$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecStatus$Builder\0",
                        "<init>\0",
                        "()V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setCodecConfig](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.Builder.html#setCodecConfig(android.bluetooth.BluetoothCodecConfig))
            pub fn setCodecConfig<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothCodecConfig>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecStatus_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecStatus$Builder", java.flags == PUBLIC, .name == "setCodecConfig", .descriptor == "(Landroid/bluetooth/BluetoothCodecConfig;)Landroid/bluetooth/BluetoothCodecStatus$Builder;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecStatus$Builder\0",
                        "setCodecConfig\0",
                        "(Landroid/bluetooth/BluetoothCodecConfig;)Landroid/bluetooth/BluetoothCodecStatus$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setCodecsLocalCapabilities](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.Builder.html#setCodecsLocalCapabilities(java.util.List))
            pub fn setCodecsLocalCapabilities<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecStatus_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecStatus$Builder", java.flags == PUBLIC, .name == "setCodecsLocalCapabilities", .descriptor == "(Ljava/util/List;)Landroid/bluetooth/BluetoothCodecStatus$Builder;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecStatus$Builder\0",
                        "setCodecsLocalCapabilities\0",
                        "(Ljava/util/List;)Landroid/bluetooth/BluetoothCodecStatus$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setCodecsSelectableCapabilities](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.Builder.html#setCodecsSelectableCapabilities(java.util.List))
            pub fn setCodecsSelectableCapabilities<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecStatus_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecStatus$Builder", java.flags == PUBLIC, .name == "setCodecsSelectableCapabilities", .descriptor == "(Ljava/util/List;)Landroid/bluetooth/BluetoothCodecStatus$Builder;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecStatus$Builder\0",
                        "setCodecsSelectableCapabilities\0",
                        "(Ljava/util/List;)Landroid/bluetooth/BluetoothCodecStatus$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [build](https://developer.android.com/reference/android/bluetooth/BluetoothCodecStatus.Builder.html#build())
            pub fn build<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothCodecStatus>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCodecStatus$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/bluetooth/BluetoothCodecStatus;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCodecStatus$Builder\0",
                        "build\0",
                        "()Landroid/bluetooth/BluetoothCodecStatus;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub final class [BluetoothCsipSetCoordinator](https://developer.android.com/reference/android/bluetooth/BluetoothCsipSetCoordinator.html)
        #[repr(transparent)]
        pub struct BluetoothCsipSetCoordinator(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothCsipSetCoordinator {}

        unsafe impl ::java_spaghetti::JniType for BluetoothCsipSetCoordinator {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothCsipSetCoordinator\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<BluetoothProfile> for BluetoothCsipSetCoordinator {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothCsipSetCoordinator {}
        impl ::std::ops::Deref for BluetoothCsipSetCoordinator {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<BluetoothProfile> for BluetoothCsipSetCoordinator {
            fn as_ref(&self) -> &BluetoothProfile {
                unsafe { &*(self as *const Self as *const BluetoothProfile) }
            }
        }
        impl BluetoothCsipSetCoordinator {
            /// [close](https://developer.android.com/reference/android/bluetooth/BluetoothCsipSetCoordinator.html#close())
            pub fn close<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothCsipSetCoordinator", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCsipSetCoordinator\0",
                        "close\0",
                        "()V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothCsipSetCoordinator.html#getConnectedDevices())
            pub fn getConnectedDevices<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCsipSetCoordinator", java.flags == PUBLIC, .name == "getConnectedDevices", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCsipSetCoordinator\0",
                        "getConnectedDevices\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothCsipSetCoordinator.html#getDevicesMatchingConnectionStates(int%5B%5D))
            pub fn getDevicesMatchingConnectionStates<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothCsipSetCoordinator", java.flags == PUBLIC, .name == "getDevicesMatchingConnectionStates", .descriptor == "([I)Ljava/util/List;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCsipSetCoordinator\0",
                        "getDevicesMatchingConnectionStates\0",
                        "([I)Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothCsipSetCoordinator.html#getConnectionState(android.bluetooth.BluetoothDevice))
            pub fn getConnectionState<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothCsipSetCoordinator", java.flags == PUBLIC, .name == "getConnectionState", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothCsipSetCoordinator\0",
                        "getConnectionState\0",
                        "(Landroid/bluetooth/BluetoothDevice;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [ACTION_CSIS_CONNECTION_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothCsipSetCoordinator.html#ACTION_CSIS_CONNECTION_STATE_CHANGED)
            pub const ACTION_CSIS_CONNECTION_STATE_CHANGED: &'static str =
                "android.bluetooth.action.CSIS_CONNECTION_STATE_CHANGED";
        }

        /// pub final class [BluetoothDevice](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html)
        #[repr(transparent)]
        pub struct BluetoothDevice(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothDevice {}

        unsafe impl ::java_spaghetti::JniType for BluetoothDevice {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothDevice\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothDevice {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothDevice {}
        impl ::std::ops::Deref for BluetoothDevice {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<super::os::Parcelable> for BluetoothDevice {
            fn as_ref(&self) -> &super::os::Parcelable {
                unsafe { &*(self as *const Self as *const super::os::Parcelable) }
            }
        }
        impl BluetoothDevice {
            /// [equals](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#equals(java.lang.Object))
            pub fn equals<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothDevice\0",
                        "equals\0",
                        "(Ljava/lang/Object;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hashCode](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#hashCode())
            pub fn hashCode<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "hashCode\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toString](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#toString())
            pub fn toString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothDevice\0",
                        "toString\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#describeContents())
            pub fn describeContents<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothDevice\0",
                        "describeContents\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getAddress](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getAddress())
            pub fn getAddress<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "getAddress", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothDevice\0",
                        "getAddress\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getName](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getName())
            pub fn getName<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "getName", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothDevice\0",
                        "getName\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getType](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getType())
            pub fn getType<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "getType", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "getType\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getAlias](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getAlias())
            pub fn getAlias<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "getAlias", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothDevice\0",
                        "getAlias\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setAlias](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#setAlias(java.lang.String))
            pub fn setAlias<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "setAlias", .descriptor == "(Ljava/lang/String;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothDevice\0",
                        "setAlias\0",
                        "(Ljava/lang/String;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [createBond](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createBond())
            pub fn createBond<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "createBond", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "createBond\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getBondState](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getBondState())
            pub fn getBondState<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "getBondState", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothDevice\0",
                        "getBondState\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getBluetoothClass](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getBluetoothClass())
            pub fn getBluetoothClass<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothClass>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "getBluetoothClass", .descriptor == "()Landroid/bluetooth/BluetoothClass;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothDevice\0",
                        "getBluetoothClass\0",
                        "()Landroid/bluetooth/BluetoothClass;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getUuids](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getUuids())
            pub fn getUuids<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::os::ParcelUuid, super::super::java::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "getUuids", .descriptor == "()[Landroid/os/ParcelUuid;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothDevice\0",
                        "getUuids\0",
                        "()[Landroid/os/ParcelUuid;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [fetchUuidsWithSdp](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#fetchUuidsWithSdp())
            pub fn fetchUuidsWithSdp<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "fetchUuidsWithSdp", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothDevice\0",
                        "fetchUuidsWithSdp\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setPin](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#setPin(byte%5B%5D))
            pub fn setPin<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "setPin", .descriptor == "([B)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "setPin\0", "([B)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setPairingConfirmation](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#setPairingConfirmation(boolean))
            pub fn setPairingConfirmation<'env>(
                &'env self,
                arg0: bool,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "setPairingConfirmation", .descriptor == "(Z)Z"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothDevice\0",
                        "setPairingConfirmation\0",
                        "(Z)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [createRfcommSocketToServiceRecord](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createRfcommSocketToServiceRecord(java.util.UUID))
            pub fn createRfcommSocketToServiceRecord<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothSocket>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "createRfcommSocketToServiceRecord", .descriptor == "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothDevice\0",
                        "createRfcommSocketToServiceRecord\0",
                        "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [createInsecureRfcommSocketToServiceRecord](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createInsecureRfcommSocketToServiceRecord(java.util.UUID))
            pub fn createInsecureRfcommSocketToServiceRecord<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothSocket>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "createInsecureRfcommSocketToServiceRecord", .descriptor == "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothDevice\0",
                        "createInsecureRfcommSocketToServiceRecord\0",
                        "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [connectGatt](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#connectGatt(android.content.Context,%20boolean,%20android.bluetooth.BluetoothGattCallback))
            pub fn connectGatt_Context_boolean_BluetoothGattCallback<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::content::Context>,
                arg1: bool,
                arg2: impl ::java_spaghetti::AsArg<BluetoothGattCallback>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothGatt>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "connectGatt", .descriptor == "(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;)Landroid/bluetooth/BluetoothGatt;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        arg2.as_arg_jvalue(),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "connectGatt\0", "(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;)Landroid/bluetooth/BluetoothGatt;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [connectGatt](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#connectGatt(android.content.Context,%20boolean,%20android.bluetooth.BluetoothGattCallback,%20int))
            pub fn connectGatt_Context_boolean_BluetoothGattCallback_int<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::content::Context>,
                arg1: bool,
                arg2: impl ::java_spaghetti::AsArg<BluetoothGattCallback>,
                arg3: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothGatt>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "connectGatt", .descriptor == "(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;I)Landroid/bluetooth/BluetoothGatt;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        arg2.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "connectGatt\0", "(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;I)Landroid/bluetooth/BluetoothGatt;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [connectGatt](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#connectGatt(android.content.Context,%20boolean,%20android.bluetooth.BluetoothGattCallback,%20int,%20int))
            pub fn connectGatt_Context_boolean_BluetoothGattCallback_int_int<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::content::Context>,
                arg1: bool,
                arg2: impl ::java_spaghetti::AsArg<BluetoothGattCallback>,
                arg3: i32,
                arg4: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothGatt>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "connectGatt", .descriptor == "(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;II)Landroid/bluetooth/BluetoothGatt;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        arg2.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "connectGatt\0", "(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;II)Landroid/bluetooth/BluetoothGatt;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [createL2capChannel](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createL2capChannel(int))
            pub fn createL2capChannel<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothSocket>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "createL2capChannel", .descriptor == "(I)Landroid/bluetooth/BluetoothSocket;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothDevice\0",
                        "createL2capChannel\0",
                        "(I)Landroid/bluetooth/BluetoothSocket;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [createInsecureL2capChannel](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createInsecureL2capChannel(int))
            pub fn createInsecureL2capChannel<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothSocket>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "createInsecureL2capChannel", .descriptor == "(I)Landroid/bluetooth/BluetoothSocket;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothDevice\0",
                        "createInsecureL2capChannel\0",
                        "(I)Landroid/bluetooth/BluetoothSocket;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [ACTION_ACL_CONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_ACL_CONNECTED)
            pub const ACTION_ACL_CONNECTED: &'static str = "android.bluetooth.device.action.ACL_CONNECTED";

            /// public static final [ACTION_ACL_DISCONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_ACL_DISCONNECTED)
            pub const ACTION_ACL_DISCONNECTED: &'static str = "android.bluetooth.device.action.ACL_DISCONNECTED";

            /// public static final [ACTION_ACL_DISCONNECT_REQUESTED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_ACL_DISCONNECT_REQUESTED)
            pub const ACTION_ACL_DISCONNECT_REQUESTED: &'static str =
                "android.bluetooth.device.action.ACL_DISCONNECT_REQUESTED";

            /// public static final [ACTION_ALIAS_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_ALIAS_CHANGED)
            pub const ACTION_ALIAS_CHANGED: &'static str = "android.bluetooth.device.action.ALIAS_CHANGED";

            /// public static final [ACTION_BOND_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_BOND_STATE_CHANGED)
            pub const ACTION_BOND_STATE_CHANGED: &'static str = "android.bluetooth.device.action.BOND_STATE_CHANGED";

            /// public static final [ACTION_CLASS_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_CLASS_CHANGED)
            pub const ACTION_CLASS_CHANGED: &'static str = "android.bluetooth.device.action.CLASS_CHANGED";

            /// public static final [ACTION_FOUND](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_FOUND)
            pub const ACTION_FOUND: &'static str = "android.bluetooth.device.action.FOUND";

            /// public static final [ACTION_NAME_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_NAME_CHANGED)
            pub const ACTION_NAME_CHANGED: &'static str = "android.bluetooth.device.action.NAME_CHANGED";

            /// public static final [ACTION_PAIRING_REQUEST](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_PAIRING_REQUEST)
            pub const ACTION_PAIRING_REQUEST: &'static str = "android.bluetooth.device.action.PAIRING_REQUEST";

            /// public static final [ACTION_UUID](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_UUID)
            pub const ACTION_UUID: &'static str = "android.bluetooth.device.action.UUID";

            /// public static final [ADDRESS_TYPE_PUBLIC](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ADDRESS_TYPE_PUBLIC)
            pub const ADDRESS_TYPE_PUBLIC: i32 = 0;

            /// public static final [ADDRESS_TYPE_RANDOM](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ADDRESS_TYPE_RANDOM)
            pub const ADDRESS_TYPE_RANDOM: i32 = 1;

            /// public static final [ADDRESS_TYPE_UNKNOWN](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ADDRESS_TYPE_UNKNOWN)
            pub const ADDRESS_TYPE_UNKNOWN: i32 = 65535;

            /// public static final [BOND_BONDED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#BOND_BONDED)
            pub const BOND_BONDED: i32 = 12;

            /// public static final [BOND_BONDING](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#BOND_BONDING)
            pub const BOND_BONDING: i32 = 11;

            /// public static final [BOND_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#BOND_NONE)
            pub const BOND_NONE: i32 = 10;

            /// public static final [DEVICE_TYPE_CLASSIC](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#DEVICE_TYPE_CLASSIC)
            pub const DEVICE_TYPE_CLASSIC: i32 = 1;

            /// public static final [DEVICE_TYPE_DUAL](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#DEVICE_TYPE_DUAL)
            pub const DEVICE_TYPE_DUAL: i32 = 3;

            /// public static final [DEVICE_TYPE_LE](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#DEVICE_TYPE_LE)
            pub const DEVICE_TYPE_LE: i32 = 2;

            /// public static final [DEVICE_TYPE_UNKNOWN](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#DEVICE_TYPE_UNKNOWN)
            pub const DEVICE_TYPE_UNKNOWN: i32 = 0;

            /// public static final [ERROR](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ERROR)
            pub const ERROR: i32 = -2147483648;

            /// public static final [EXTRA_BOND_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_BOND_STATE)
            pub const EXTRA_BOND_STATE: &'static str = "android.bluetooth.device.extra.BOND_STATE";

            /// public static final [EXTRA_CLASS](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_CLASS)
            pub const EXTRA_CLASS: &'static str = "android.bluetooth.device.extra.CLASS";

            /// public static final [EXTRA_DEVICE](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_DEVICE)
            pub const EXTRA_DEVICE: &'static str = "android.bluetooth.device.extra.DEVICE";

            /// public static final [EXTRA_IS_COORDINATED_SET_MEMBER](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_IS_COORDINATED_SET_MEMBER)
            pub const EXTRA_IS_COORDINATED_SET_MEMBER: &'static str =
                "android.bluetooth.extra.IS_COORDINATED_SET_MEMBER";

            /// public static final [EXTRA_NAME](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_NAME)
            pub const EXTRA_NAME: &'static str = "android.bluetooth.device.extra.NAME";

            /// public static final [EXTRA_PAIRING_KEY](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_PAIRING_KEY)
            pub const EXTRA_PAIRING_KEY: &'static str = "android.bluetooth.device.extra.PAIRING_KEY";

            /// public static final [EXTRA_PAIRING_VARIANT](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_PAIRING_VARIANT)
            pub const EXTRA_PAIRING_VARIANT: &'static str = "android.bluetooth.device.extra.PAIRING_VARIANT";

            /// public static final [EXTRA_PREVIOUS_BOND_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_PREVIOUS_BOND_STATE)
            pub const EXTRA_PREVIOUS_BOND_STATE: &'static str = "android.bluetooth.device.extra.PREVIOUS_BOND_STATE";

            /// public static final [EXTRA_RSSI](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_RSSI)
            pub const EXTRA_RSSI: &'static str = "android.bluetooth.device.extra.RSSI";

            /// public static final [EXTRA_TRANSPORT](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_TRANSPORT)
            pub const EXTRA_TRANSPORT: &'static str = "android.bluetooth.device.extra.TRANSPORT";

            /// public static final [EXTRA_UUID](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_UUID)
            pub const EXTRA_UUID: &'static str = "android.bluetooth.device.extra.UUID";

            /// public static final [PAIRING_VARIANT_PASSKEY_CONFIRMATION](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PAIRING_VARIANT_PASSKEY_CONFIRMATION)
            pub const PAIRING_VARIANT_PASSKEY_CONFIRMATION: i32 = 2;

            /// public static final [PAIRING_VARIANT_PIN](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PAIRING_VARIANT_PIN)
            pub const PAIRING_VARIANT_PIN: i32 = 0;

            /// public static final [PHY_LE_1M](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_1M)
            pub const PHY_LE_1M: i32 = 1;

            /// public static final [PHY_LE_1M_MASK](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_1M_MASK)
            pub const PHY_LE_1M_MASK: i32 = 1;

            /// public static final [PHY_LE_2M](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_2M)
            pub const PHY_LE_2M: i32 = 2;

            /// public static final [PHY_LE_2M_MASK](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_2M_MASK)
            pub const PHY_LE_2M_MASK: i32 = 2;

            /// public static final [PHY_LE_CODED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_CODED)
            pub const PHY_LE_CODED: i32 = 3;

            /// public static final [PHY_LE_CODED_MASK](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_CODED_MASK)
            pub const PHY_LE_CODED_MASK: i32 = 4;

            /// public static final [PHY_OPTION_NO_PREFERRED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_OPTION_NO_PREFERRED)
            pub const PHY_OPTION_NO_PREFERRED: i32 = 0;

            /// public static final [PHY_OPTION_S2](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_OPTION_S2)
            pub const PHY_OPTION_S2: i32 = 1;

            /// public static final [PHY_OPTION_S8](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_OPTION_S8)
            pub const PHY_OPTION_S8: i32 = 2;

            /// public static final [TRANSPORT_AUTO](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#TRANSPORT_AUTO)
            pub const TRANSPORT_AUTO: i32 = 0;

            /// public static final [TRANSPORT_BREDR](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#TRANSPORT_BREDR)
            pub const TRANSPORT_BREDR: i32 = 1;

            /// public static final [TRANSPORT_LE](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#TRANSPORT_LE)
            pub const TRANSPORT_LE: i32 = 2;
        }

        /// pub final class [BluetoothGatt](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html)
        #[repr(transparent)]
        pub struct BluetoothGatt(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothGatt {}

        unsafe impl ::java_spaghetti::JniType for BluetoothGatt {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothGatt\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<BluetoothProfile> for BluetoothGatt {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothGatt {}
        impl ::std::ops::Deref for BluetoothGatt {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<BluetoothProfile> for BluetoothGatt {
            fn as_ref(&self) -> &BluetoothProfile {
                unsafe { &*(self as *const Self as *const BluetoothProfile) }
            }
        }
        impl BluetoothGatt {
            /// [close](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#close())
            pub fn close<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothGatt\0", "close\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [disconnect](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#disconnect())
            pub fn disconnect<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "disconnect", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothGatt\0", "disconnect\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [connect](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#connect())
            pub fn connect<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "connect", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothGatt\0", "connect\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setPreferredPhy](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#setPreferredPhy(int,%20int,%20int))
            pub fn setPreferredPhy<'env>(
                &'env self,
                arg0: i32,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "setPreferredPhy", .descriptor == "(III)V"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "setPreferredPhy\0",
                        "(III)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [readPhy](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#readPhy())
            pub fn readPhy<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "readPhy", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothGatt\0", "readPhy\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDevice](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#getDevice())
            pub fn getDevice<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothDevice>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "getDevice", .descriptor == "()Landroid/bluetooth/BluetoothDevice;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "getDevice\0",
                        "()Landroid/bluetooth/BluetoothDevice;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [discoverServices](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#discoverServices())
            pub fn discoverServices<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "discoverServices", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "discoverServices\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getServices](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#getServices())
            pub fn getServices<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "getServices", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "getServices\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getService](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#getService(java.util.UUID))
            pub fn getService<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothGattService>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "getService", .descriptor == "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattService;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "getService\0",
                        "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattService;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [readCharacteristic](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#readCharacteristic(android.bluetooth.BluetoothGattCharacteristic))
            pub fn readCharacteristic<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "readCharacteristic", .descriptor == "(Landroid/bluetooth/BluetoothGattCharacteristic;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "readCharacteristic\0",
                        "(Landroid/bluetooth/BluetoothGattCharacteristic;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [writeCharacteristic](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic))
            #[deprecated]
            pub fn writeCharacteristic_BluetoothGattCharacteristic<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "writeCharacteristic", .descriptor == "(Landroid/bluetooth/BluetoothGattCharacteristic;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "writeCharacteristic\0",
                        "(Landroid/bluetooth/BluetoothGattCharacteristic;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [writeCharacteristic](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic,%20byte%5B%5D,%20int))
            pub fn writeCharacteristic_BluetoothGattCharacteristic_byte_array_int<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg2: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "writeCharacteristic", .descriptor == "(Landroid/bluetooth/BluetoothGattCharacteristic;[BI)I"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "writeCharacteristic\0",
                        "(Landroid/bluetooth/BluetoothGattCharacteristic;[BI)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [readDescriptor](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#readDescriptor(android.bluetooth.BluetoothGattDescriptor))
            pub fn readDescriptor<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattDescriptor>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "readDescriptor", .descriptor == "(Landroid/bluetooth/BluetoothGattDescriptor;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "readDescriptor\0",
                        "(Landroid/bluetooth/BluetoothGattDescriptor;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [writeDescriptor](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#writeDescriptor(android.bluetooth.BluetoothGattDescriptor))
            #[deprecated]
            pub fn writeDescriptor_BluetoothGattDescriptor<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattDescriptor>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "writeDescriptor", .descriptor == "(Landroid/bluetooth/BluetoothGattDescriptor;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "writeDescriptor\0",
                        "(Landroid/bluetooth/BluetoothGattDescriptor;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [writeDescriptor](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#writeDescriptor(android.bluetooth.BluetoothGattDescriptor,%20byte%5B%5D))
            pub fn writeDescriptor_BluetoothGattDescriptor_byte_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattDescriptor>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "writeDescriptor", .descriptor == "(Landroid/bluetooth/BluetoothGattDescriptor;[B)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "writeDescriptor\0",
                        "(Landroid/bluetooth/BluetoothGattDescriptor;[B)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [beginReliableWrite](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#beginReliableWrite())
            pub fn beginReliableWrite<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "beginReliableWrite", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "beginReliableWrite\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [executeReliableWrite](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#executeReliableWrite())
            pub fn executeReliableWrite<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "executeReliableWrite", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "executeReliableWrite\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [abortReliableWrite](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#abortReliableWrite())
            pub fn abortReliableWrite<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "abortReliableWrite", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "abortReliableWrite\0",
                        "()V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [abortReliableWrite](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#abortReliableWrite(android.bluetooth.BluetoothDevice))
            #[deprecated]
            pub fn abortReliableWrite_BluetoothDevice<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "abortReliableWrite", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "abortReliableWrite\0",
                        "(Landroid/bluetooth/BluetoothDevice;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setCharacteristicNotification](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic,%20boolean))
            pub fn setCharacteristicNotification<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
                arg1: bool,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "setCharacteristicNotification", .descriptor == "(Landroid/bluetooth/BluetoothGattCharacteristic;Z)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "setCharacteristicNotification\0",
                        "(Landroid/bluetooth/BluetoothGattCharacteristic;Z)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [readRemoteRssi](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#readRemoteRssi())
            pub fn readRemoteRssi<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "readRemoteRssi", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "readRemoteRssi\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [requestMtu](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#requestMtu(int))
            pub fn requestMtu<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "requestMtu", .descriptor == "(I)Z"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothGatt\0", "requestMtu\0", "(I)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [requestConnectionPriority](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#requestConnectionPriority(int))
            pub fn requestConnectionPriority<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "requestConnectionPriority", .descriptor == "(I)Z"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "requestConnectionPriority\0",
                        "(I)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#getConnectionState(android.bluetooth.BluetoothDevice))
            #[deprecated]
            pub fn getConnectionState<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "getConnectionState", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "getConnectionState\0",
                        "(Landroid/bluetooth/BluetoothDevice;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#getConnectedDevices())
            #[deprecated]
            pub fn getConnectedDevices<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "getConnectedDevices", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "getConnectedDevices\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#getDevicesMatchingConnectionStates(int%5B%5D))
            #[deprecated]
            pub fn getDevicesMatchingConnectionStates<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGatt", java.flags == PUBLIC, .name == "getDevicesMatchingConnectionStates", .descriptor == "([I)Ljava/util/List;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGatt\0",
                        "getDevicesMatchingConnectionStates\0",
                        "([I)Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [CONNECTION_PRIORITY_BALANCED](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#CONNECTION_PRIORITY_BALANCED)
            pub const CONNECTION_PRIORITY_BALANCED: i32 = 0;

            /// public static final [CONNECTION_PRIORITY_HIGH](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#CONNECTION_PRIORITY_HIGH)
            pub const CONNECTION_PRIORITY_HIGH: i32 = 1;

            /// public static final [CONNECTION_PRIORITY_LOW_POWER](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#CONNECTION_PRIORITY_LOW_POWER)
            pub const CONNECTION_PRIORITY_LOW_POWER: i32 = 2;

            /// public static final [GATT_CONNECTION_CONGESTED](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_CONNECTION_CONGESTED)
            pub const GATT_CONNECTION_CONGESTED: i32 = 143;

            /// public static final [GATT_FAILURE](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_FAILURE)
            pub const GATT_FAILURE: i32 = 257;

            /// public static final [GATT_INSUFFICIENT_AUTHENTICATION](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_INSUFFICIENT_AUTHENTICATION)
            pub const GATT_INSUFFICIENT_AUTHENTICATION: i32 = 5;

            /// public static final [GATT_INSUFFICIENT_AUTHORIZATION](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_INSUFFICIENT_AUTHORIZATION)
            pub const GATT_INSUFFICIENT_AUTHORIZATION: i32 = 8;

            /// public static final [GATT_INSUFFICIENT_ENCRYPTION](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_INSUFFICIENT_ENCRYPTION)
            pub const GATT_INSUFFICIENT_ENCRYPTION: i32 = 15;

            /// public static final [GATT_INVALID_ATTRIBUTE_LENGTH](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_INVALID_ATTRIBUTE_LENGTH)
            pub const GATT_INVALID_ATTRIBUTE_LENGTH: i32 = 13;

            /// public static final [GATT_INVALID_OFFSET](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_INVALID_OFFSET)
            pub const GATT_INVALID_OFFSET: i32 = 7;

            /// public static final [GATT_READ_NOT_PERMITTED](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_READ_NOT_PERMITTED)
            pub const GATT_READ_NOT_PERMITTED: i32 = 2;

            /// public static final [GATT_REQUEST_NOT_SUPPORTED](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_REQUEST_NOT_SUPPORTED)
            pub const GATT_REQUEST_NOT_SUPPORTED: i32 = 6;

            /// public static final [GATT_SUCCESS](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_SUCCESS)
            pub const GATT_SUCCESS: i32 = 0;

            /// public static final [GATT_WRITE_NOT_PERMITTED](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_WRITE_NOT_PERMITTED)
            pub const GATT_WRITE_NOT_PERMITTED: i32 = 3;
        }

        /// pub class [BluetoothGattCallback](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html)
        #[repr(transparent)]
        pub struct BluetoothGattCallback(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothGattCallback {}

        unsafe impl ::java_spaghetti::JniType for BluetoothGattCallback {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothGattCallback\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothGattCallback {}
        impl ::std::ops::Deref for BluetoothGattCallback {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BluetoothGattCallback {
            /// [BluetoothGattCallback](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#BluetoothGattCallback())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattCallback", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCallback\0",
                        "<init>\0",
                        "()V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onPhyUpdate](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onPhyUpdate(android.bluetooth.BluetoothGatt,%20int,%20int,%20int))
            pub fn onPhyUpdate<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: i32,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCallback", java.flags == PUBLIC, .name == "onPhyUpdate", .descriptor == "(Landroid/bluetooth/BluetoothGatt;III)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCallback\0",
                        "onPhyUpdate\0",
                        "(Landroid/bluetooth/BluetoothGatt;III)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onPhyRead](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onPhyRead(android.bluetooth.BluetoothGatt,%20int,%20int,%20int))
            pub fn onPhyRead<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: i32,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCallback", java.flags == PUBLIC, .name == "onPhyRead", .descriptor == "(Landroid/bluetooth/BluetoothGatt;III)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCallback\0",
                        "onPhyRead\0",
                        "(Landroid/bluetooth/BluetoothGatt;III)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onConnectionStateChange](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onConnectionStateChange(android.bluetooth.BluetoothGatt,%20int,%20int))
            pub fn onConnectionStateChange<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCallback", java.flags == PUBLIC, .name == "onConnectionStateChange", .descriptor == "(Landroid/bluetooth/BluetoothGatt;II)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCallback\0",
                        "onConnectionStateChange\0",
                        "(Landroid/bluetooth/BluetoothGatt;II)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onServicesDiscovered](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onServicesDiscovered(android.bluetooth.BluetoothGatt,%20int))
            pub fn onServicesDiscovered<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCallback", java.flags == PUBLIC, .name == "onServicesDiscovered", .descriptor == "(Landroid/bluetooth/BluetoothGatt;I)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCallback\0",
                        "onServicesDiscovered\0",
                        "(Landroid/bluetooth/BluetoothGatt;I)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onCharacteristicRead](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onCharacteristicRead(android.bluetooth.BluetoothGatt,%20android.bluetooth.BluetoothGattCharacteristic,%20int))
            #[deprecated]
            pub fn onCharacteristicRead_BluetoothGatt_BluetoothGattCharacteristic_int<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCallback", java.flags == PUBLIC, .name == "onCharacteristicRead", .descriptor == "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;I)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCallback\0",
                        "onCharacteristicRead\0",
                        "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;I)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onCharacteristicRead](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onCharacteristicRead(android.bluetooth.BluetoothGatt,%20android.bluetooth.BluetoothGattCharacteristic,%20byte%5B%5D,%20int))
            pub fn onCharacteristicRead_BluetoothGatt_BluetoothGattCharacteristic_byte_array_int<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
                arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg3: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCallback", java.flags == PUBLIC, .name == "onCharacteristicRead", .descriptor == "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;[BI)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCallback\0",
                        "onCharacteristicRead\0",
                        "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;[BI)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onCharacteristicWrite](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onCharacteristicWrite(android.bluetooth.BluetoothGatt,%20android.bluetooth.BluetoothGattCharacteristic,%20int))
            pub fn onCharacteristicWrite<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCallback", java.flags == PUBLIC, .name == "onCharacteristicWrite", .descriptor == "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;I)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCallback\0",
                        "onCharacteristicWrite\0",
                        "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;I)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onCharacteristicChanged](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onCharacteristicChanged(android.bluetooth.BluetoothGatt,%20android.bluetooth.BluetoothGattCharacteristic))
            #[deprecated]
            pub fn onCharacteristicChanged_BluetoothGatt_BluetoothGattCharacteristic<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCallback", java.flags == PUBLIC, .name == "onCharacteristicChanged", .descriptor == "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCallback\0",
                        "onCharacteristicChanged\0",
                        "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onCharacteristicChanged](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onCharacteristicChanged(android.bluetooth.BluetoothGatt,%20android.bluetooth.BluetoothGattCharacteristic,%20byte%5B%5D))
            pub fn onCharacteristicChanged_BluetoothGatt_BluetoothGattCharacteristic_byte_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
                arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCallback", java.flags == PUBLIC, .name == "onCharacteristicChanged", .descriptor == "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;[B)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue(), arg2.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCallback\0",
                        "onCharacteristicChanged\0",
                        "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;[B)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onDescriptorRead](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onDescriptorRead(android.bluetooth.BluetoothGatt,%20android.bluetooth.BluetoothGattDescriptor,%20int))
            #[deprecated]
            pub fn onDescriptorRead_BluetoothGatt_BluetoothGattDescriptor_int<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattDescriptor>,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCallback", java.flags == PUBLIC, .name == "onDescriptorRead", .descriptor == "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattDescriptor;I)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCallback\0",
                        "onDescriptorRead\0",
                        "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattDescriptor;I)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onDescriptorRead](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onDescriptorRead(android.bluetooth.BluetoothGatt,%20android.bluetooth.BluetoothGattDescriptor,%20int,%20byte%5B%5D))
            pub fn onDescriptorRead_BluetoothGatt_BluetoothGattDescriptor_int_byte_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattDescriptor>,
                arg2: i32,
                arg3: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCallback", java.flags == PUBLIC, .name == "onDescriptorRead", .descriptor == "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattDescriptor;I[B)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        arg3.as_arg_jvalue(),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCallback\0",
                        "onDescriptorRead\0",
                        "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattDescriptor;I[B)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onDescriptorWrite](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onDescriptorWrite(android.bluetooth.BluetoothGatt,%20android.bluetooth.BluetoothGattDescriptor,%20int))
            pub fn onDescriptorWrite<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattDescriptor>,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCallback", java.flags == PUBLIC, .name == "onDescriptorWrite", .descriptor == "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattDescriptor;I)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCallback\0",
                        "onDescriptorWrite\0",
                        "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattDescriptor;I)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onReliableWriteCompleted](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onReliableWriteCompleted(android.bluetooth.BluetoothGatt,%20int))
            pub fn onReliableWriteCompleted<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCallback", java.flags == PUBLIC, .name == "onReliableWriteCompleted", .descriptor == "(Landroid/bluetooth/BluetoothGatt;I)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCallback\0",
                        "onReliableWriteCompleted\0",
                        "(Landroid/bluetooth/BluetoothGatt;I)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onReadRemoteRssi](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onReadRemoteRssi(android.bluetooth.BluetoothGatt,%20int,%20int))
            pub fn onReadRemoteRssi<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCallback", java.flags == PUBLIC, .name == "onReadRemoteRssi", .descriptor == "(Landroid/bluetooth/BluetoothGatt;II)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCallback\0",
                        "onReadRemoteRssi\0",
                        "(Landroid/bluetooth/BluetoothGatt;II)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onMtuChanged](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onMtuChanged(android.bluetooth.BluetoothGatt,%20int,%20int))
            pub fn onMtuChanged<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCallback", java.flags == PUBLIC, .name == "onMtuChanged", .descriptor == "(Landroid/bluetooth/BluetoothGatt;II)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCallback\0",
                        "onMtuChanged\0",
                        "(Landroid/bluetooth/BluetoothGatt;II)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onServiceChanged](https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html#onServiceChanged(android.bluetooth.BluetoothGatt))
            pub fn onServiceChanged<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGatt>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCallback", java.flags == PUBLIC, .name == "onServiceChanged", .descriptor == "(Landroid/bluetooth/BluetoothGatt;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCallback\0",
                        "onServiceChanged\0",
                        "(Landroid/bluetooth/BluetoothGatt;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub class [BluetoothGattCharacteristic](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html)
        #[repr(transparent)]
        pub struct BluetoothGattCharacteristic(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothGattCharacteristic {}

        unsafe impl ::java_spaghetti::JniType for BluetoothGattCharacteristic {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothGattCharacteristic\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothGattCharacteristic {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothGattCharacteristic {}
        impl ::std::ops::Deref for BluetoothGattCharacteristic {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<super::os::Parcelable> for BluetoothGattCharacteristic {
            fn as_ref(&self) -> &super::os::Parcelable {
                unsafe { &*(self as *const Self as *const super::os::Parcelable) }
            }
        }
        impl BluetoothGattCharacteristic {
            /// [BluetoothGattCharacteristic](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#BluetoothGattCharacteristic(java.util.UUID,%20int,%20int))
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattCharacteristic", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/util/UUID;II)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCharacteristic\0",
                        "<init>\0",
                        "(Ljava/util/UUID;II)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#describeContents())
            pub fn describeContents<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCharacteristic", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCharacteristic\0",
                        "describeContents\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [addDescriptor](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#addDescriptor(android.bluetooth.BluetoothGattDescriptor))
            pub fn addDescriptor<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattDescriptor>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCharacteristic", java.flags == PUBLIC, .name == "addDescriptor", .descriptor == "(Landroid/bluetooth/BluetoothGattDescriptor;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCharacteristic\0",
                        "addDescriptor\0",
                        "(Landroid/bluetooth/BluetoothGattDescriptor;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getService](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#getService())
            pub fn getService<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothGattService>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattCharacteristic", java.flags == PUBLIC, .name == "getService", .descriptor == "()Landroid/bluetooth/BluetoothGattService;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCharacteristic\0",
                        "getService\0",
                        "()Landroid/bluetooth/BluetoothGattService;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getUuid](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#getUuid())
            pub fn getUuid<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::UUID>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattCharacteristic", java.flags == PUBLIC, .name == "getUuid", .descriptor == "()Ljava/util/UUID;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCharacteristic\0",
                        "getUuid\0",
                        "()Ljava/util/UUID;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getInstanceId](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#getInstanceId())
            pub fn getInstanceId<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCharacteristic", java.flags == PUBLIC, .name == "getInstanceId", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCharacteristic\0",
                        "getInstanceId\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getProperties](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#getProperties())
            pub fn getProperties<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCharacteristic", java.flags == PUBLIC, .name == "getProperties", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCharacteristic\0",
                        "getProperties\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getPermissions](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#getPermissions())
            pub fn getPermissions<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCharacteristic", java.flags == PUBLIC, .name == "getPermissions", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCharacteristic\0",
                        "getPermissions\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getWriteType](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#getWriteType())
            pub fn getWriteType<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCharacteristic", java.flags == PUBLIC, .name == "getWriteType", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCharacteristic\0",
                        "getWriteType\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setWriteType](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#setWriteType(int))
            pub fn setWriteType<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCharacteristic", java.flags == PUBLIC, .name == "setWriteType", .descriptor == "(I)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCharacteristic\0",
                        "setWriteType\0",
                        "(I)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDescriptors](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#getDescriptors())
            pub fn getDescriptors<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattCharacteristic", java.flags == PUBLIC, .name == "getDescriptors", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCharacteristic\0",
                        "getDescriptors\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDescriptor](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#getDescriptor(java.util.UUID))
            pub fn getDescriptor<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothGattDescriptor>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattCharacteristic", java.flags == PUBLIC, .name == "getDescriptor", .descriptor == "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattDescriptor;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCharacteristic\0",
                        "getDescriptor\0",
                        "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattDescriptor;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getValue](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#getValue())
            #[deprecated]
            pub fn getValue<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattCharacteristic", java.flags == PUBLIC, .name == "getValue", .descriptor == "()[B"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCharacteristic\0",
                        "getValue\0",
                        "()[B\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getStringValue](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#getStringValue(int))
            #[deprecated]
            pub fn getStringValue<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattCharacteristic", java.flags == PUBLIC, .name == "getStringValue", .descriptor == "(I)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCharacteristic\0",
                        "getStringValue\0",
                        "(I)Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setValue](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#setValue(byte%5B%5D))
            #[deprecated]
            pub fn setValue_byte_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCharacteristic", java.flags == PUBLIC, .name == "setValue", .descriptor == "([B)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCharacteristic\0",
                        "setValue\0",
                        "([B)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setValue](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#setValue(int,%20int,%20int))
            #[deprecated]
            pub fn setValue_int_int_int<'env>(
                &'env self,
                arg0: i32,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCharacteristic", java.flags == PUBLIC, .name == "setValue", .descriptor == "(III)Z"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCharacteristic\0",
                        "setValue\0",
                        "(III)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setValue](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#setValue(int,%20int,%20int,%20int))
            #[deprecated]
            pub fn setValue_int_int_int_int<'env>(
                &'env self,
                arg0: i32,
                arg1: i32,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCharacteristic", java.flags == PUBLIC, .name == "setValue", .descriptor == "(IIII)Z"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCharacteristic\0",
                        "setValue\0",
                        "(IIII)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setValue](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#setValue(java.lang.String))
            #[deprecated]
            pub fn setValue_String<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattCharacteristic", java.flags == PUBLIC, .name == "setValue", .descriptor == "(Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattCharacteristic\0",
                        "setValue\0",
                        "(Ljava/lang/String;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [FORMAT_FLOAT](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#FORMAT_FLOAT)
            pub const FORMAT_FLOAT: i32 = 52;

            /// public static final [FORMAT_SFLOAT](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#FORMAT_SFLOAT)
            pub const FORMAT_SFLOAT: i32 = 50;

            /// public static final [FORMAT_SINT16](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#FORMAT_SINT16)
            pub const FORMAT_SINT16: i32 = 34;

            /// public static final [FORMAT_SINT32](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#FORMAT_SINT32)
            pub const FORMAT_SINT32: i32 = 36;

            /// public static final [FORMAT_SINT8](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#FORMAT_SINT8)
            pub const FORMAT_SINT8: i32 = 33;

            /// public static final [FORMAT_UINT16](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#FORMAT_UINT16)
            pub const FORMAT_UINT16: i32 = 18;

            /// public static final [FORMAT_UINT32](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#FORMAT_UINT32)
            pub const FORMAT_UINT32: i32 = 20;

            /// public static final [FORMAT_UINT8](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#FORMAT_UINT8)
            pub const FORMAT_UINT8: i32 = 17;

            /// public static final [PERMISSION_READ](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PERMISSION_READ)
            pub const PERMISSION_READ: i32 = 1;

            /// public static final [PERMISSION_READ_ENCRYPTED](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PERMISSION_READ_ENCRYPTED)
            pub const PERMISSION_READ_ENCRYPTED: i32 = 2;

            /// public static final [PERMISSION_READ_ENCRYPTED_MITM](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PERMISSION_READ_ENCRYPTED_MITM)
            pub const PERMISSION_READ_ENCRYPTED_MITM: i32 = 4;

            /// public static final [PERMISSION_WRITE](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PERMISSION_WRITE)
            pub const PERMISSION_WRITE: i32 = 16;

            /// public static final [PERMISSION_WRITE_ENCRYPTED](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PERMISSION_WRITE_ENCRYPTED)
            pub const PERMISSION_WRITE_ENCRYPTED: i32 = 32;

            /// public static final [PERMISSION_WRITE_ENCRYPTED_MITM](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PERMISSION_WRITE_ENCRYPTED_MITM)
            pub const PERMISSION_WRITE_ENCRYPTED_MITM: i32 = 64;

            /// public static final [PERMISSION_WRITE_SIGNED](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PERMISSION_WRITE_SIGNED)
            pub const PERMISSION_WRITE_SIGNED: i32 = 128;

            /// public static final [PERMISSION_WRITE_SIGNED_MITM](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PERMISSION_WRITE_SIGNED_MITM)
            pub const PERMISSION_WRITE_SIGNED_MITM: i32 = 256;

            /// public static final [PROPERTY_BROADCAST](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PROPERTY_BROADCAST)
            pub const PROPERTY_BROADCAST: i32 = 1;

            /// public static final [PROPERTY_EXTENDED_PROPS](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PROPERTY_EXTENDED_PROPS)
            pub const PROPERTY_EXTENDED_PROPS: i32 = 128;

            /// public static final [PROPERTY_INDICATE](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PROPERTY_INDICATE)
            pub const PROPERTY_INDICATE: i32 = 32;

            /// public static final [PROPERTY_NOTIFY](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PROPERTY_NOTIFY)
            pub const PROPERTY_NOTIFY: i32 = 16;

            /// public static final [PROPERTY_READ](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PROPERTY_READ)
            pub const PROPERTY_READ: i32 = 2;

            /// public static final [PROPERTY_SIGNED_WRITE](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PROPERTY_SIGNED_WRITE)
            pub const PROPERTY_SIGNED_WRITE: i32 = 64;

            /// public static final [PROPERTY_WRITE](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PROPERTY_WRITE)
            pub const PROPERTY_WRITE: i32 = 8;

            /// public static final [PROPERTY_WRITE_NO_RESPONSE](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#PROPERTY_WRITE_NO_RESPONSE)
            pub const PROPERTY_WRITE_NO_RESPONSE: i32 = 4;

            /// public static final [WRITE_TYPE_DEFAULT](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#WRITE_TYPE_DEFAULT)
            pub const WRITE_TYPE_DEFAULT: i32 = 2;

            /// public static final [WRITE_TYPE_NO_RESPONSE](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#WRITE_TYPE_NO_RESPONSE)
            pub const WRITE_TYPE_NO_RESPONSE: i32 = 1;

            /// public static final [WRITE_TYPE_SIGNED](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html#WRITE_TYPE_SIGNED)
            pub const WRITE_TYPE_SIGNED: i32 = 4;
        }

        /// pub class [BluetoothGattDescriptor](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html)
        #[repr(transparent)]
        pub struct BluetoothGattDescriptor(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothGattDescriptor {}

        unsafe impl ::java_spaghetti::JniType for BluetoothGattDescriptor {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothGattDescriptor\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothGattDescriptor {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothGattDescriptor {}
        impl ::std::ops::Deref for BluetoothGattDescriptor {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<super::os::Parcelable> for BluetoothGattDescriptor {
            fn as_ref(&self) -> &super::os::Parcelable {
                unsafe { &*(self as *const Self as *const super::os::Parcelable) }
            }
        }
        impl BluetoothGattDescriptor {
            /// [BluetoothGattDescriptor](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#BluetoothGattDescriptor(java.util.UUID,%20int))
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattDescriptor", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/util/UUID;I)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattDescriptor\0",
                        "<init>\0",
                        "(Ljava/util/UUID;I)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#describeContents())
            pub fn describeContents<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattDescriptor", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattDescriptor\0",
                        "describeContents\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCharacteristic](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#getCharacteristic())
            pub fn getCharacteristic<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothGattCharacteristic>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattDescriptor", java.flags == PUBLIC, .name == "getCharacteristic", .descriptor == "()Landroid/bluetooth/BluetoothGattCharacteristic;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattDescriptor\0",
                        "getCharacteristic\0",
                        "()Landroid/bluetooth/BluetoothGattCharacteristic;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getUuid](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#getUuid())
            pub fn getUuid<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::UUID>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattDescriptor", java.flags == PUBLIC, .name == "getUuid", .descriptor == "()Ljava/util/UUID;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattDescriptor\0",
                        "getUuid\0",
                        "()Ljava/util/UUID;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getPermissions](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#getPermissions())
            pub fn getPermissions<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattDescriptor", java.flags == PUBLIC, .name == "getPermissions", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattDescriptor\0",
                        "getPermissions\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getValue](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#getValue())
            #[deprecated]
            pub fn getValue<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattDescriptor", java.flags == PUBLIC, .name == "getValue", .descriptor == "()[B"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattDescriptor\0",
                        "getValue\0",
                        "()[B\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setValue](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#setValue(byte%5B%5D))
            #[deprecated]
            pub fn setValue<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattDescriptor", java.flags == PUBLIC, .name == "setValue", .descriptor == "([B)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattDescriptor\0",
                        "setValue\0",
                        "([B)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// **get** public static final [DISABLE_NOTIFICATION_VALUE](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#DISABLE_NOTIFICATION_VALUE)
            pub fn DISABLE_NOTIFICATION_VALUE<'env>(
                env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>> {
                unsafe {
                    let (__jni_class, __jni_field) = env.require_class_static_field(
                        "android/bluetooth/BluetoothGattDescriptor\0",
                        "DISABLE_NOTIFICATION_VALUE\0",
                        "[B\0",
                    );
                    env.get_static_object_field(__jni_class, __jni_field)
                }
            }

            /// **get** public static final [ENABLE_INDICATION_VALUE](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#ENABLE_INDICATION_VALUE)
            pub fn ENABLE_INDICATION_VALUE<'env>(
                env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>> {
                unsafe {
                    let (__jni_class, __jni_field) = env.require_class_static_field(
                        "android/bluetooth/BluetoothGattDescriptor\0",
                        "ENABLE_INDICATION_VALUE\0",
                        "[B\0",
                    );
                    env.get_static_object_field(__jni_class, __jni_field)
                }
            }

            /// **get** public static final [ENABLE_NOTIFICATION_VALUE](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#ENABLE_NOTIFICATION_VALUE)
            pub fn ENABLE_NOTIFICATION_VALUE<'env>(
                env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>> {
                unsafe {
                    let (__jni_class, __jni_field) = env.require_class_static_field(
                        "android/bluetooth/BluetoothGattDescriptor\0",
                        "ENABLE_NOTIFICATION_VALUE\0",
                        "[B\0",
                    );
                    env.get_static_object_field(__jni_class, __jni_field)
                }
            }

            /// public static final [PERMISSION_READ](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#PERMISSION_READ)
            pub const PERMISSION_READ: i32 = 1;

            /// public static final [PERMISSION_READ_ENCRYPTED](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#PERMISSION_READ_ENCRYPTED)
            pub const PERMISSION_READ_ENCRYPTED: i32 = 2;

            /// public static final [PERMISSION_READ_ENCRYPTED_MITM](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#PERMISSION_READ_ENCRYPTED_MITM)
            pub const PERMISSION_READ_ENCRYPTED_MITM: i32 = 4;

            /// public static final [PERMISSION_WRITE](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#PERMISSION_WRITE)
            pub const PERMISSION_WRITE: i32 = 16;

            /// public static final [PERMISSION_WRITE_ENCRYPTED](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#PERMISSION_WRITE_ENCRYPTED)
            pub const PERMISSION_WRITE_ENCRYPTED: i32 = 32;

            /// public static final [PERMISSION_WRITE_ENCRYPTED_MITM](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#PERMISSION_WRITE_ENCRYPTED_MITM)
            pub const PERMISSION_WRITE_ENCRYPTED_MITM: i32 = 64;

            /// public static final [PERMISSION_WRITE_SIGNED](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#PERMISSION_WRITE_SIGNED)
            pub const PERMISSION_WRITE_SIGNED: i32 = 128;

            /// public static final [PERMISSION_WRITE_SIGNED_MITM](https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html#PERMISSION_WRITE_SIGNED_MITM)
            pub const PERMISSION_WRITE_SIGNED_MITM: i32 = 256;
        }

        /// pub final class [BluetoothGattServer](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html)
        #[repr(transparent)]
        pub struct BluetoothGattServer(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothGattServer {}

        unsafe impl ::java_spaghetti::JniType for BluetoothGattServer {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothGattServer\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<BluetoothProfile> for BluetoothGattServer {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothGattServer {}
        impl ::std::ops::Deref for BluetoothGattServer {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<BluetoothProfile> for BluetoothGattServer {
            fn as_ref(&self) -> &BluetoothProfile {
                unsafe { &*(self as *const Self as *const BluetoothProfile) }
            }
        }
        impl BluetoothGattServer {
            /// [close](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#close())
            pub fn close<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServer", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothGattServer\0", "close\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [connect](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#connect(android.bluetooth.BluetoothDevice,%20boolean))
            pub fn connect<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: bool,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServer", java.flags == PUBLIC, .name == "connect", .descriptor == "(Landroid/bluetooth/BluetoothDevice;Z)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServer\0",
                        "connect\0",
                        "(Landroid/bluetooth/BluetoothDevice;Z)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [cancelConnection](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#cancelConnection(android.bluetooth.BluetoothDevice))
            pub fn cancelConnection<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServer", java.flags == PUBLIC, .name == "cancelConnection", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServer\0",
                        "cancelConnection\0",
                        "(Landroid/bluetooth/BluetoothDevice;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setPreferredPhy](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#setPreferredPhy(android.bluetooth.BluetoothDevice,%20int,%20int,%20int))
            pub fn setPreferredPhy<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServer", java.flags == PUBLIC, .name == "setPreferredPhy", .descriptor == "(Landroid/bluetooth/BluetoothDevice;III)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServer\0",
                        "setPreferredPhy\0",
                        "(Landroid/bluetooth/BluetoothDevice;III)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [readPhy](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#readPhy(android.bluetooth.BluetoothDevice))
            pub fn readPhy<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServer", java.flags == PUBLIC, .name == "readPhy", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServer\0",
                        "readPhy\0",
                        "(Landroid/bluetooth/BluetoothDevice;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [sendResponse](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#sendResponse(android.bluetooth.BluetoothDevice,%20int,%20int,%20int,%20byte%5B%5D))
            pub fn sendResponse<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: i32,
                arg3: i32,
                arg4: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServer", java.flags == PUBLIC, .name == "sendResponse", .descriptor == "(Landroid/bluetooth/BluetoothDevice;III[B)Z"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        arg4.as_arg_jvalue(),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServer\0",
                        "sendResponse\0",
                        "(Landroid/bluetooth/BluetoothDevice;III[B)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [notifyCharacteristicChanged](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#notifyCharacteristicChanged(android.bluetooth.BluetoothDevice,%20android.bluetooth.BluetoothGattCharacteristic,%20boolean))
            #[deprecated]
            pub fn notifyCharacteristicChanged_BluetoothDevice_BluetoothGattCharacteristic_boolean<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
                arg2: bool,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServer", java.flags == PUBLIC, .name == "notifyCharacteristicChanged", .descriptor == "(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothGattCharacteristic;Z)Z"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServer\0",
                        "notifyCharacteristicChanged\0",
                        "(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothGattCharacteristic;Z)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [notifyCharacteristicChanged](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#notifyCharacteristicChanged(android.bluetooth.BluetoothDevice,%20android.bluetooth.BluetoothGattCharacteristic,%20boolean,%20byte%5B%5D))
            pub fn notifyCharacteristicChanged_BluetoothDevice_BluetoothGattCharacteristic_boolean_byte_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
                arg2: bool,
                arg3: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServer", java.flags == PUBLIC, .name == "notifyCharacteristicChanged", .descriptor == "(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothGattCharacteristic;Z[B)I"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        arg3.as_arg_jvalue(),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServer\0",
                        "notifyCharacteristicChanged\0",
                        "(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothGattCharacteristic;Z[B)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [addService](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#addService(android.bluetooth.BluetoothGattService))
            pub fn addService<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattService>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServer", java.flags == PUBLIC, .name == "addService", .descriptor == "(Landroid/bluetooth/BluetoothGattService;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServer\0",
                        "addService\0",
                        "(Landroid/bluetooth/BluetoothGattService;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [removeService](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#removeService(android.bluetooth.BluetoothGattService))
            pub fn removeService<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattService>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServer", java.flags == PUBLIC, .name == "removeService", .descriptor == "(Landroid/bluetooth/BluetoothGattService;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServer\0",
                        "removeService\0",
                        "(Landroid/bluetooth/BluetoothGattService;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [clearServices](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#clearServices())
            pub fn clearServices<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServer", java.flags == PUBLIC, .name == "clearServices", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServer\0",
                        "clearServices\0",
                        "()V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getServices](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#getServices())
            pub fn getServices<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattServer", java.flags == PUBLIC, .name == "getServices", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServer\0",
                        "getServices\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getService](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#getService(java.util.UUID))
            pub fn getService<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothGattService>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattServer", java.flags == PUBLIC, .name == "getService", .descriptor == "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattService;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServer\0",
                        "getService\0",
                        "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattService;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#getConnectionState(android.bluetooth.BluetoothDevice))
            pub fn getConnectionState<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServer", java.flags == PUBLIC, .name == "getConnectionState", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServer\0",
                        "getConnectionState\0",
                        "(Landroid/bluetooth/BluetoothDevice;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#getConnectedDevices())
            pub fn getConnectedDevices<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattServer", java.flags == PUBLIC, .name == "getConnectedDevices", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServer\0",
                        "getConnectedDevices\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html#getDevicesMatchingConnectionStates(int%5B%5D))
            pub fn getDevicesMatchingConnectionStates<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattServer", java.flags == PUBLIC, .name == "getDevicesMatchingConnectionStates", .descriptor == "([I)Ljava/util/List;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServer\0",
                        "getDevicesMatchingConnectionStates\0",
                        "([I)Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub class [BluetoothGattServerCallback](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html)
        #[repr(transparent)]
        pub struct BluetoothGattServerCallback(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothGattServerCallback {}

        unsafe impl ::java_spaghetti::JniType for BluetoothGattServerCallback {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothGattServerCallback\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothGattServerCallback {}
        impl ::std::ops::Deref for BluetoothGattServerCallback {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BluetoothGattServerCallback {
            /// [BluetoothGattServerCallback](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#BluetoothGattServerCallback())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattServerCallback", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServerCallback\0",
                        "<init>\0",
                        "()V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onConnectionStateChange](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onConnectionStateChange(android.bluetooth.BluetoothDevice,%20int,%20int))
            pub fn onConnectionStateChange<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServerCallback", java.flags == PUBLIC, .name == "onConnectionStateChange", .descriptor == "(Landroid/bluetooth/BluetoothDevice;II)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServerCallback\0",
                        "onConnectionStateChange\0",
                        "(Landroid/bluetooth/BluetoothDevice;II)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onServiceAdded](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onServiceAdded(int,%20android.bluetooth.BluetoothGattService))
            pub fn onServiceAdded<'env>(
                &'env self,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattService>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServerCallback", java.flags == PUBLIC, .name == "onServiceAdded", .descriptor == "(ILandroid/bluetooth/BluetoothGattService;)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServerCallback\0",
                        "onServiceAdded\0",
                        "(ILandroid/bluetooth/BluetoothGattService;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onCharacteristicReadRequest](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onCharacteristicReadRequest(android.bluetooth.BluetoothDevice,%20int,%20int,%20android.bluetooth.BluetoothGattCharacteristic))
            pub fn onCharacteristicReadRequest<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: i32,
                arg3: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServerCallback", java.flags == PUBLIC, .name == "onCharacteristicReadRequest", .descriptor == "(Landroid/bluetooth/BluetoothDevice;IILandroid/bluetooth/BluetoothGattCharacteristic;)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        arg3.as_arg_jvalue(),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServerCallback\0",
                        "onCharacteristicReadRequest\0",
                        "(Landroid/bluetooth/BluetoothDevice;IILandroid/bluetooth/BluetoothGattCharacteristic;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onCharacteristicWriteRequest](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onCharacteristicWriteRequest(android.bluetooth.BluetoothDevice,%20int,%20android.bluetooth.BluetoothGattCharacteristic,%20boolean,%20boolean,%20int,%20byte%5B%5D))
            pub fn onCharacteristicWriteRequest<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
                arg3: bool,
                arg4: bool,
                arg5: i32,
                arg6: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServerCallback", java.flags == PUBLIC, .name == "onCharacteristicWriteRequest", .descriptor == "(Landroid/bluetooth/BluetoothDevice;ILandroid/bluetooth/BluetoothGattCharacteristic;ZZI[B)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        arg2.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                        arg6.as_arg_jvalue(),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServerCallback\0",
                        "onCharacteristicWriteRequest\0",
                        "(Landroid/bluetooth/BluetoothDevice;ILandroid/bluetooth/BluetoothGattCharacteristic;ZZI[B)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onDescriptorReadRequest](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onDescriptorReadRequest(android.bluetooth.BluetoothDevice,%20int,%20int,%20android.bluetooth.BluetoothGattDescriptor))
            pub fn onDescriptorReadRequest<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: i32,
                arg3: impl ::java_spaghetti::AsArg<BluetoothGattDescriptor>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServerCallback", java.flags == PUBLIC, .name == "onDescriptorReadRequest", .descriptor == "(Landroid/bluetooth/BluetoothDevice;IILandroid/bluetooth/BluetoothGattDescriptor;)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        arg3.as_arg_jvalue(),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServerCallback\0",
                        "onDescriptorReadRequest\0",
                        "(Landroid/bluetooth/BluetoothDevice;IILandroid/bluetooth/BluetoothGattDescriptor;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onDescriptorWriteRequest](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onDescriptorWriteRequest(android.bluetooth.BluetoothDevice,%20int,%20android.bluetooth.BluetoothGattDescriptor,%20boolean,%20boolean,%20int,%20byte%5B%5D))
            pub fn onDescriptorWriteRequest<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: impl ::java_spaghetti::AsArg<BluetoothGattDescriptor>,
                arg3: bool,
                arg4: bool,
                arg5: i32,
                arg6: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServerCallback", java.flags == PUBLIC, .name == "onDescriptorWriteRequest", .descriptor == "(Landroid/bluetooth/BluetoothDevice;ILandroid/bluetooth/BluetoothGattDescriptor;ZZI[B)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        arg2.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                        arg6.as_arg_jvalue(),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServerCallback\0",
                        "onDescriptorWriteRequest\0",
                        "(Landroid/bluetooth/BluetoothDevice;ILandroid/bluetooth/BluetoothGattDescriptor;ZZI[B)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onExecuteWrite](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onExecuteWrite(android.bluetooth.BluetoothDevice,%20int,%20boolean))
            pub fn onExecuteWrite<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServerCallback", java.flags == PUBLIC, .name == "onExecuteWrite", .descriptor == "(Landroid/bluetooth/BluetoothDevice;IZ)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServerCallback\0",
                        "onExecuteWrite\0",
                        "(Landroid/bluetooth/BluetoothDevice;IZ)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onNotificationSent](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onNotificationSent(android.bluetooth.BluetoothDevice,%20int))
            pub fn onNotificationSent<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServerCallback", java.flags == PUBLIC, .name == "onNotificationSent", .descriptor == "(Landroid/bluetooth/BluetoothDevice;I)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServerCallback\0",
                        "onNotificationSent\0",
                        "(Landroid/bluetooth/BluetoothDevice;I)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onMtuChanged](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onMtuChanged(android.bluetooth.BluetoothDevice,%20int))
            pub fn onMtuChanged<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServerCallback", java.flags == PUBLIC, .name == "onMtuChanged", .descriptor == "(Landroid/bluetooth/BluetoothDevice;I)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServerCallback\0",
                        "onMtuChanged\0",
                        "(Landroid/bluetooth/BluetoothDevice;I)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onPhyUpdate](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onPhyUpdate(android.bluetooth.BluetoothDevice,%20int,%20int,%20int))
            pub fn onPhyUpdate<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServerCallback", java.flags == PUBLIC, .name == "onPhyUpdate", .descriptor == "(Landroid/bluetooth/BluetoothDevice;III)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServerCallback\0",
                        "onPhyUpdate\0",
                        "(Landroid/bluetooth/BluetoothDevice;III)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onPhyRead](https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html#onPhyRead(android.bluetooth.BluetoothDevice,%20int,%20int,%20int))
            pub fn onPhyRead<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattServerCallback", java.flags == PUBLIC, .name == "onPhyRead", .descriptor == "(Landroid/bluetooth/BluetoothDevice;III)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattServerCallback\0",
                        "onPhyRead\0",
                        "(Landroid/bluetooth/BluetoothDevice;III)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub class [BluetoothGattService](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html)
        #[repr(transparent)]
        pub struct BluetoothGattService(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothGattService {}

        unsafe impl ::java_spaghetti::JniType for BluetoothGattService {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothGattService\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothGattService {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothGattService {}
        impl ::std::ops::Deref for BluetoothGattService {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<super::os::Parcelable> for BluetoothGattService {
            fn as_ref(&self) -> &super::os::Parcelable {
                unsafe { &*(self as *const Self as *const super::os::Parcelable) }
            }
        }
        impl BluetoothGattService {
            /// [BluetoothGattService](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#BluetoothGattService(java.util.UUID,%20int))
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattService", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/util/UUID;I)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattService\0",
                        "<init>\0",
                        "(Ljava/util/UUID;I)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#describeContents())
            pub fn describeContents<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattService", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattService\0",
                        "describeContents\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [addService](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#addService(android.bluetooth.BluetoothGattService))
            pub fn addService<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattService>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattService", java.flags == PUBLIC, .name == "addService", .descriptor == "(Landroid/bluetooth/BluetoothGattService;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattService\0",
                        "addService\0",
                        "(Landroid/bluetooth/BluetoothGattService;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [addCharacteristic](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#addCharacteristic(android.bluetooth.BluetoothGattCharacteristic))
            pub fn addCharacteristic<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothGattCharacteristic>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattService", java.flags == PUBLIC, .name == "addCharacteristic", .descriptor == "(Landroid/bluetooth/BluetoothGattCharacteristic;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattService\0",
                        "addCharacteristic\0",
                        "(Landroid/bluetooth/BluetoothGattCharacteristic;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getUuid](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#getUuid())
            pub fn getUuid<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::UUID>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattService", java.flags == PUBLIC, .name == "getUuid", .descriptor == "()Ljava/util/UUID;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattService\0",
                        "getUuid\0",
                        "()Ljava/util/UUID;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getInstanceId](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#getInstanceId())
            pub fn getInstanceId<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattService", java.flags == PUBLIC, .name == "getInstanceId", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattService\0",
                        "getInstanceId\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getType](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#getType())
            pub fn getType<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothGattService", java.flags == PUBLIC, .name == "getType", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattService\0",
                        "getType\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getIncludedServices](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#getIncludedServices())
            pub fn getIncludedServices<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattService", java.flags == PUBLIC, .name == "getIncludedServices", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattService\0",
                        "getIncludedServices\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCharacteristics](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#getCharacteristics())
            pub fn getCharacteristics<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattService", java.flags == PUBLIC, .name == "getCharacteristics", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattService\0",
                        "getCharacteristics\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCharacteristic](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#getCharacteristic(java.util.UUID))
            pub fn getCharacteristic<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothGattCharacteristic>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothGattService", java.flags == PUBLIC, .name == "getCharacteristic", .descriptor == "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattCharacteristic;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothGattService\0",
                        "getCharacteristic\0",
                        "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattCharacteristic;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [SERVICE_TYPE_PRIMARY](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#SERVICE_TYPE_PRIMARY)
            pub const SERVICE_TYPE_PRIMARY: i32 = 0;

            /// public static final [SERVICE_TYPE_SECONDARY](https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html#SERVICE_TYPE_SECONDARY)
            pub const SERVICE_TYPE_SECONDARY: i32 = 1;
        }

        /// pub final class [BluetoothHeadset](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html)
        #[repr(transparent)]
        pub struct BluetoothHeadset(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothHeadset {}

        unsafe impl ::java_spaghetti::JniType for BluetoothHeadset {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothHeadset\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<BluetoothProfile> for BluetoothHeadset {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothHeadset {}
        impl ::std::ops::Deref for BluetoothHeadset {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<BluetoothProfile> for BluetoothHeadset {
            fn as_ref(&self) -> &BluetoothProfile {
                unsafe { &*(self as *const Self as *const BluetoothProfile) }
            }
        }
        impl BluetoothHeadset {
            /// [getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#getConnectedDevices())
            pub fn getConnectedDevices<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothHeadset", java.flags == PUBLIC, .name == "getConnectedDevices", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHeadset\0",
                        "getConnectedDevices\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#getDevicesMatchingConnectionStates(int%5B%5D))
            pub fn getDevicesMatchingConnectionStates<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothHeadset", java.flags == PUBLIC, .name == "getDevicesMatchingConnectionStates", .descriptor == "([I)Ljava/util/List;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHeadset\0",
                        "getDevicesMatchingConnectionStates\0",
                        "([I)Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#getConnectionState(android.bluetooth.BluetoothDevice))
            pub fn getConnectionState<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHeadset", java.flags == PUBLIC, .name == "getConnectionState", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHeadset\0",
                        "getConnectionState\0",
                        "(Landroid/bluetooth/BluetoothDevice;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isNoiseReductionSupported](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#isNoiseReductionSupported(android.bluetooth.BluetoothDevice))
            pub fn isNoiseReductionSupported<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHeadset", java.flags == PUBLIC, .name == "isNoiseReductionSupported", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHeadset\0",
                        "isNoiseReductionSupported\0",
                        "(Landroid/bluetooth/BluetoothDevice;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isVoiceRecognitionSupported](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#isVoiceRecognitionSupported(android.bluetooth.BluetoothDevice))
            pub fn isVoiceRecognitionSupported<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHeadset", java.flags == PUBLIC, .name == "isVoiceRecognitionSupported", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHeadset\0",
                        "isVoiceRecognitionSupported\0",
                        "(Landroid/bluetooth/BluetoothDevice;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [startVoiceRecognition](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#startVoiceRecognition(android.bluetooth.BluetoothDevice))
            pub fn startVoiceRecognition<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHeadset", java.flags == PUBLIC, .name == "startVoiceRecognition", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHeadset\0",
                        "startVoiceRecognition\0",
                        "(Landroid/bluetooth/BluetoothDevice;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [stopVoiceRecognition](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#stopVoiceRecognition(android.bluetooth.BluetoothDevice))
            pub fn stopVoiceRecognition<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHeadset", java.flags == PUBLIC, .name == "stopVoiceRecognition", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHeadset\0",
                        "stopVoiceRecognition\0",
                        "(Landroid/bluetooth/BluetoothDevice;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isAudioConnected](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#isAudioConnected(android.bluetooth.BluetoothDevice))
            pub fn isAudioConnected<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHeadset", java.flags == PUBLIC, .name == "isAudioConnected", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHeadset\0",
                        "isAudioConnected\0",
                        "(Landroid/bluetooth/BluetoothDevice;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [sendVendorSpecificResultCode](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,%20java.lang.String,%20java.lang.String))
            pub fn sendVendorSpecificResultCode<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg2: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHeadset", java.flags == PUBLIC, .name == "sendVendorSpecificResultCode", .descriptor == "(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue(), arg2.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHeadset\0",
                        "sendVendorSpecificResultCode\0",
                        "(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;Ljava/lang/String;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [ACTION_AUDIO_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#ACTION_AUDIO_STATE_CHANGED)
            pub const ACTION_AUDIO_STATE_CHANGED: &'static str =
                "android.bluetooth.headset.profile.action.AUDIO_STATE_CHANGED";

            /// public static final [ACTION_CONNECTION_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#ACTION_CONNECTION_STATE_CHANGED)
            pub const ACTION_CONNECTION_STATE_CHANGED: &'static str =
                "android.bluetooth.headset.profile.action.CONNECTION_STATE_CHANGED";

            /// public static final [ACTION_VENDOR_SPECIFIC_HEADSET_EVENT](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#ACTION_VENDOR_SPECIFIC_HEADSET_EVENT)
            pub const ACTION_VENDOR_SPECIFIC_HEADSET_EVENT: &'static str =
                "android.bluetooth.headset.action.VENDOR_SPECIFIC_HEADSET_EVENT";

            /// public static final [AT_CMD_TYPE_ACTION](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#AT_CMD_TYPE_ACTION)
            pub const AT_CMD_TYPE_ACTION: i32 = 4;

            /// public static final [AT_CMD_TYPE_BASIC](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#AT_CMD_TYPE_BASIC)
            pub const AT_CMD_TYPE_BASIC: i32 = 3;

            /// public static final [AT_CMD_TYPE_READ](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#AT_CMD_TYPE_READ)
            pub const AT_CMD_TYPE_READ: i32 = 0;

            /// public static final [AT_CMD_TYPE_SET](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#AT_CMD_TYPE_SET)
            pub const AT_CMD_TYPE_SET: i32 = 2;

            /// public static final [AT_CMD_TYPE_TEST](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#AT_CMD_TYPE_TEST)
            pub const AT_CMD_TYPE_TEST: i32 = 1;

            /// public static final [EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS)
            pub const EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS: &'static str =
                "android.bluetooth.headset.extra.VENDOR_SPECIFIC_HEADSET_EVENT_ARGS";

            /// public static final [EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD)
            pub const EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD: &'static str =
                "android.bluetooth.headset.extra.VENDOR_SPECIFIC_HEADSET_EVENT_CMD";

            /// public static final [EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE)
            pub const EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE: &'static str =
                "android.bluetooth.headset.extra.VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE";

            /// public static final [STATE_AUDIO_CONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#STATE_AUDIO_CONNECTED)
            pub const STATE_AUDIO_CONNECTED: i32 = 12;

            /// public static final [STATE_AUDIO_CONNECTING](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#STATE_AUDIO_CONNECTING)
            pub const STATE_AUDIO_CONNECTING: i32 = 11;

            /// public static final [STATE_AUDIO_DISCONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#STATE_AUDIO_DISCONNECTED)
            pub const STATE_AUDIO_DISCONNECTED: i32 = 10;

            /// public static final [VENDOR_RESULT_CODE_COMMAND_ANDROID](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#VENDOR_RESULT_CODE_COMMAND_ANDROID)
            pub const VENDOR_RESULT_CODE_COMMAND_ANDROID: &'static str = "+ANDROID";

            /// public static final [VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY](https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html#VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY)
            pub const VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY: &'static str =
                "android.bluetooth.headset.intent.category.companyid";
        }

        /// pub final class [BluetoothHealth](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html)
        #[repr(transparent)]
        #[deprecated]
        pub struct BluetoothHealth(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothHealth {}

        unsafe impl ::java_spaghetti::JniType for BluetoothHealth {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothHealth\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<BluetoothProfile> for BluetoothHealth {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothHealth {}
        impl ::std::ops::Deref for BluetoothHealth {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<BluetoothProfile> for BluetoothHealth {
            fn as_ref(&self) -> &BluetoothProfile {
                unsafe { &*(self as *const Self as *const BluetoothProfile) }
            }
        }
        impl BluetoothHealth {
            /// [registerSinkAppConfiguration](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#registerSinkAppConfiguration(java.lang.String,%20int,%20android.bluetooth.BluetoothHealthCallback))
            #[deprecated]
            pub fn registerSinkAppConfiguration<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
                arg2: impl ::java_spaghetti::AsArg<BluetoothHealthCallback>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHealth", java.flags == PUBLIC, .name == "registerSinkAppConfiguration", .descriptor == "(Ljava/lang/String;ILandroid/bluetooth/BluetoothHealthCallback;)Z"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        arg2.as_arg_jvalue(),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHealth\0",
                        "registerSinkAppConfiguration\0",
                        "(Ljava/lang/String;ILandroid/bluetooth/BluetoothHealthCallback;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [unregisterAppConfiguration](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration))
            #[deprecated]
            pub fn unregisterAppConfiguration<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothHealthAppConfiguration>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHealth", java.flags == PUBLIC, .name == "unregisterAppConfiguration", .descriptor == "(Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHealth\0",
                        "unregisterAppConfiguration\0",
                        "(Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [connectChannelToSource](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#connectChannelToSource(android.bluetooth.BluetoothDevice,%20android.bluetooth.BluetoothHealthAppConfiguration))
            #[deprecated]
            pub fn connectChannelToSource<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothHealthAppConfiguration>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHealth", java.flags == PUBLIC, .name == "connectChannelToSource", .descriptor == "(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHealth\0",
                        "connectChannelToSource\0",
                        "(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [disconnectChannel](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#disconnectChannel(android.bluetooth.BluetoothDevice,%20android.bluetooth.BluetoothHealthAppConfiguration,%20int))
            #[deprecated]
            pub fn disconnectChannel<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothHealthAppConfiguration>,
                arg2: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHealth", java.flags == PUBLIC, .name == "disconnectChannel", .descriptor == "(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHealth\0",
                        "disconnectChannel\0",
                        "(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#getConnectionState(android.bluetooth.BluetoothDevice))
            #[deprecated]
            pub fn getConnectionState<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHealth", java.flags == PUBLIC, .name == "getConnectionState", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHealth\0",
                        "getConnectionState\0",
                        "(Landroid/bluetooth/BluetoothDevice;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#getConnectedDevices())
            #[deprecated]
            pub fn getConnectedDevices<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothHealth", java.flags == PUBLIC, .name == "getConnectedDevices", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHealth\0",
                        "getConnectedDevices\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#getDevicesMatchingConnectionStates(int%5B%5D))
            #[deprecated]
            pub fn getDevicesMatchingConnectionStates<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothHealth", java.flags == PUBLIC, .name == "getDevicesMatchingConnectionStates", .descriptor == "([I)Ljava/util/List;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHealth\0",
                        "getDevicesMatchingConnectionStates\0",
                        "([I)Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [APP_CONFIG_REGISTRATION_FAILURE](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#APP_CONFIG_REGISTRATION_FAILURE)
            #[deprecated]
            pub const APP_CONFIG_REGISTRATION_FAILURE: i32 = 1;

            /// public static final [APP_CONFIG_REGISTRATION_SUCCESS](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#APP_CONFIG_REGISTRATION_SUCCESS)
            #[deprecated]
            pub const APP_CONFIG_REGISTRATION_SUCCESS: i32 = 0;

            /// public static final [APP_CONFIG_UNREGISTRATION_FAILURE](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#APP_CONFIG_UNREGISTRATION_FAILURE)
            #[deprecated]
            pub const APP_CONFIG_UNREGISTRATION_FAILURE: i32 = 3;

            /// public static final [APP_CONFIG_UNREGISTRATION_SUCCESS](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#APP_CONFIG_UNREGISTRATION_SUCCESS)
            #[deprecated]
            pub const APP_CONFIG_UNREGISTRATION_SUCCESS: i32 = 2;

            /// public static final [CHANNEL_TYPE_RELIABLE](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#CHANNEL_TYPE_RELIABLE)
            #[deprecated]
            pub const CHANNEL_TYPE_RELIABLE: i32 = 10;

            /// public static final [CHANNEL_TYPE_STREAMING](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#CHANNEL_TYPE_STREAMING)
            #[deprecated]
            pub const CHANNEL_TYPE_STREAMING: i32 = 11;

            /// public static final [SINK_ROLE](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#SINK_ROLE)
            #[deprecated]
            pub const SINK_ROLE: i32 = 2;

            /// public static final [SOURCE_ROLE](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#SOURCE_ROLE)
            #[deprecated]
            pub const SOURCE_ROLE: i32 = 1;

            /// public static final [STATE_CHANNEL_CONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#STATE_CHANNEL_CONNECTED)
            #[deprecated]
            pub const STATE_CHANNEL_CONNECTED: i32 = 2;

            /// public static final [STATE_CHANNEL_CONNECTING](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#STATE_CHANNEL_CONNECTING)
            #[deprecated]
            pub const STATE_CHANNEL_CONNECTING: i32 = 1;

            /// public static final [STATE_CHANNEL_DISCONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#STATE_CHANNEL_DISCONNECTED)
            #[deprecated]
            pub const STATE_CHANNEL_DISCONNECTED: i32 = 0;

            /// public static final [STATE_CHANNEL_DISCONNECTING](https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#STATE_CHANNEL_DISCONNECTING)
            #[deprecated]
            pub const STATE_CHANNEL_DISCONNECTING: i32 = 3;
        }

        /// pub final class [BluetoothHealthAppConfiguration](https://developer.android.com/reference/android/bluetooth/BluetoothHealthAppConfiguration.html)
        #[repr(transparent)]
        #[deprecated]
        pub struct BluetoothHealthAppConfiguration(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothHealthAppConfiguration {}

        unsafe impl ::java_spaghetti::JniType for BluetoothHealthAppConfiguration {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothHealthAppConfiguration\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothHealthAppConfiguration {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothHealthAppConfiguration {}
        impl ::std::ops::Deref for BluetoothHealthAppConfiguration {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<super::os::Parcelable> for BluetoothHealthAppConfiguration {
            fn as_ref(&self) -> &super::os::Parcelable {
                unsafe { &*(self as *const Self as *const super::os::Parcelable) }
            }
        }
        impl BluetoothHealthAppConfiguration {
            /// [describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothHealthAppConfiguration.html#describeContents())
            #[deprecated]
            pub fn describeContents<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHealthAppConfiguration", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHealthAppConfiguration\0",
                        "describeContents\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDataType](https://developer.android.com/reference/android/bluetooth/BluetoothHealthAppConfiguration.html#getDataType())
            #[deprecated]
            pub fn getDataType<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHealthAppConfiguration", java.flags == PUBLIC, .name == "getDataType", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHealthAppConfiguration\0",
                        "getDataType\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getName](https://developer.android.com/reference/android/bluetooth/BluetoothHealthAppConfiguration.html#getName())
            #[deprecated]
            pub fn getName<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothHealthAppConfiguration", java.flags == PUBLIC, .name == "getName", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHealthAppConfiguration\0",
                        "getName\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getRole](https://developer.android.com/reference/android/bluetooth/BluetoothHealthAppConfiguration.html#getRole())
            #[deprecated]
            pub fn getRole<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHealthAppConfiguration", java.flags == PUBLIC, .name == "getRole", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHealthAppConfiguration\0",
                        "getRole\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub class [BluetoothHealthCallback](https://developer.android.com/reference/android/bluetooth/BluetoothHealthCallback.html)
        #[repr(transparent)]
        #[deprecated]
        pub struct BluetoothHealthCallback(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothHealthCallback {}

        unsafe impl ::java_spaghetti::JniType for BluetoothHealthCallback {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothHealthCallback\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothHealthCallback {}
        impl ::std::ops::Deref for BluetoothHealthCallback {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BluetoothHealthCallback {
            /// [BluetoothHealthCallback](https://developer.android.com/reference/android/bluetooth/BluetoothHealthCallback.html#BluetoothHealthCallback())
            #[deprecated]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothHealthCallback", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHealthCallback\0",
                        "<init>\0",
                        "()V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onHealthAppConfigurationStatusChange](https://developer.android.com/reference/android/bluetooth/BluetoothHealthCallback.html#onHealthAppConfigurationStatusChange(android.bluetooth.BluetoothHealthAppConfiguration,%20int))
            #[deprecated]
            pub fn onHealthAppConfigurationStatusChange<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothHealthAppConfiguration>,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHealthCallback", java.flags == PUBLIC, .name == "onHealthAppConfigurationStatusChange", .descriptor == "(Landroid/bluetooth/BluetoothHealthAppConfiguration;I)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHealthCallback\0",
                        "onHealthAppConfigurationStatusChange\0",
                        "(Landroid/bluetooth/BluetoothHealthAppConfiguration;I)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub final class [BluetoothHearingAid](https://developer.android.com/reference/android/bluetooth/BluetoothHearingAid.html)
        #[repr(transparent)]
        pub struct BluetoothHearingAid(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothHearingAid {}

        unsafe impl ::java_spaghetti::JniType for BluetoothHearingAid {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothHearingAid\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<BluetoothProfile> for BluetoothHearingAid {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothHearingAid {}
        impl ::std::ops::Deref for BluetoothHearingAid {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<BluetoothProfile> for BluetoothHearingAid {
            fn as_ref(&self) -> &BluetoothProfile {
                unsafe { &*(self as *const Self as *const BluetoothProfile) }
            }
        }
        impl BluetoothHearingAid {
            /// [getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothHearingAid.html#getConnectedDevices())
            pub fn getConnectedDevices<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothHearingAid", java.flags == PUBLIC, .name == "getConnectedDevices", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHearingAid\0",
                        "getConnectedDevices\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothHearingAid.html#getDevicesMatchingConnectionStates(int%5B%5D))
            pub fn getDevicesMatchingConnectionStates<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothHearingAid", java.flags == PUBLIC, .name == "getDevicesMatchingConnectionStates", .descriptor == "([I)Ljava/util/List;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHearingAid\0",
                        "getDevicesMatchingConnectionStates\0",
                        "([I)Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothHearingAid.html#getConnectionState(android.bluetooth.BluetoothDevice))
            pub fn getConnectionState<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHearingAid", java.flags == PUBLIC, .name == "getConnectionState", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHearingAid\0",
                        "getConnectionState\0",
                        "(Landroid/bluetooth/BluetoothDevice;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [ACTION_CONNECTION_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothHearingAid.html#ACTION_CONNECTION_STATE_CHANGED)
            pub const ACTION_CONNECTION_STATE_CHANGED: &'static str =
                "android.bluetooth.hearingaid.profile.action.CONNECTION_STATE_CHANGED";
        }

        /// pub final class [BluetoothHidDevice](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html)
        #[repr(transparent)]
        pub struct BluetoothHidDevice(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothHidDevice {}

        unsafe impl ::java_spaghetti::JniType for BluetoothHidDevice {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothHidDevice\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<BluetoothProfile> for BluetoothHidDevice {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothHidDevice {}
        impl ::std::ops::Deref for BluetoothHidDevice {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<BluetoothProfile> for BluetoothHidDevice {
            fn as_ref(&self) -> &BluetoothProfile {
                unsafe { &*(self as *const Self as *const BluetoothProfile) }
            }
        }
        impl BluetoothHidDevice {
            /// [getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#getConnectedDevices())
            pub fn getConnectedDevices<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothHidDevice", java.flags == PUBLIC, .name == "getConnectedDevices", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDevice\0",
                        "getConnectedDevices\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#getDevicesMatchingConnectionStates(int%5B%5D))
            pub fn getDevicesMatchingConnectionStates<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothHidDevice", java.flags == PUBLIC, .name == "getDevicesMatchingConnectionStates", .descriptor == "([I)Ljava/util/List;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDevice\0",
                        "getDevicesMatchingConnectionStates\0",
                        "([I)Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#getConnectionState(android.bluetooth.BluetoothDevice))
            pub fn getConnectionState<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDevice", java.flags == PUBLIC, .name == "getConnectionState", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDevice\0",
                        "getConnectionState\0",
                        "(Landroid/bluetooth/BluetoothDevice;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [unregisterApp](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#unregisterApp())
            pub fn unregisterApp<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDevice", java.flags == PUBLIC, .name == "unregisterApp", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDevice\0",
                        "unregisterApp\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [sendReport](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#sendReport(android.bluetooth.BluetoothDevice,%20int,%20byte%5B%5D))
            pub fn sendReport<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
                arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDevice", java.flags == PUBLIC, .name == "sendReport", .descriptor == "(Landroid/bluetooth/BluetoothDevice;I[B)Z"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        arg2.as_arg_jvalue(),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDevice\0",
                        "sendReport\0",
                        "(Landroid/bluetooth/BluetoothDevice;I[B)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [replyReport](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#replyReport(android.bluetooth.BluetoothDevice,%20byte,%20byte,%20byte%5B%5D))
            pub fn replyReport<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i8,
                arg2: i8,
                arg3: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDevice", java.flags == PUBLIC, .name == "replyReport", .descriptor == "(Landroid/bluetooth/BluetoothDevice;BB[B)Z"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        arg3.as_arg_jvalue(),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDevice\0",
                        "replyReport\0",
                        "(Landroid/bluetooth/BluetoothDevice;BB[B)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [reportError](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#reportError(android.bluetooth.BluetoothDevice,%20byte))
            pub fn reportError<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i8,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDevice", java.flags == PUBLIC, .name == "reportError", .descriptor == "(Landroid/bluetooth/BluetoothDevice;B)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDevice\0",
                        "reportError\0",
                        "(Landroid/bluetooth/BluetoothDevice;B)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [connect](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#connect(android.bluetooth.BluetoothDevice))
            pub fn connect<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDevice", java.flags == PUBLIC, .name == "connect", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDevice\0",
                        "connect\0",
                        "(Landroid/bluetooth/BluetoothDevice;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [disconnect](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#disconnect(android.bluetooth.BluetoothDevice))
            pub fn disconnect<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDevice", java.flags == PUBLIC, .name == "disconnect", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDevice\0",
                        "disconnect\0",
                        "(Landroid/bluetooth/BluetoothDevice;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [ACTION_CONNECTION_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ACTION_CONNECTION_STATE_CHANGED)
            pub const ACTION_CONNECTION_STATE_CHANGED: &'static str =
                "android.bluetooth.hiddevice.profile.action.CONNECTION_STATE_CHANGED";

            /// public static final [ERROR_RSP_INVALID_PARAM](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ERROR_RSP_INVALID_PARAM)
            pub const ERROR_RSP_INVALID_PARAM: i8 = 4;

            /// public static final [ERROR_RSP_INVALID_RPT_ID](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ERROR_RSP_INVALID_RPT_ID)
            pub const ERROR_RSP_INVALID_RPT_ID: i8 = 2;

            /// public static final [ERROR_RSP_NOT_READY](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ERROR_RSP_NOT_READY)
            pub const ERROR_RSP_NOT_READY: i8 = 1;

            /// public static final [ERROR_RSP_SUCCESS](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ERROR_RSP_SUCCESS)
            pub const ERROR_RSP_SUCCESS: i8 = 0;

            /// public static final [ERROR_RSP_UNKNOWN](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ERROR_RSP_UNKNOWN)
            pub const ERROR_RSP_UNKNOWN: i8 = 14;

            /// public static final [ERROR_RSP_UNSUPPORTED_REQ](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ERROR_RSP_UNSUPPORTED_REQ)
            pub const ERROR_RSP_UNSUPPORTED_REQ: i8 = 3;

            /// public static final [PROTOCOL_BOOT_MODE](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#PROTOCOL_BOOT_MODE)
            pub const PROTOCOL_BOOT_MODE: i8 = 0;

            /// public static final [PROTOCOL_REPORT_MODE](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#PROTOCOL_REPORT_MODE)
            pub const PROTOCOL_REPORT_MODE: i8 = 1;

            /// public static final [REPORT_TYPE_FEATURE](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#REPORT_TYPE_FEATURE)
            pub const REPORT_TYPE_FEATURE: i8 = 3;

            /// public static final [REPORT_TYPE_INPUT](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#REPORT_TYPE_INPUT)
            pub const REPORT_TYPE_INPUT: i8 = 1;

            /// public static final [REPORT_TYPE_OUTPUT](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#REPORT_TYPE_OUTPUT)
            pub const REPORT_TYPE_OUTPUT: i8 = 2;

            /// public static final [SUBCLASS1_COMBO](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS1_COMBO)
            pub const SUBCLASS1_COMBO: i8 = -64;

            /// public static final [SUBCLASS1_KEYBOARD](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS1_KEYBOARD)
            pub const SUBCLASS1_KEYBOARD: i8 = 64;

            /// public static final [SUBCLASS1_MOUSE](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS1_MOUSE)
            pub const SUBCLASS1_MOUSE: i8 = -128;

            /// public static final [SUBCLASS1_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS1_NONE)
            pub const SUBCLASS1_NONE: i8 = 0;

            /// public static final [SUBCLASS2_CARD_READER](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_CARD_READER)
            pub const SUBCLASS2_CARD_READER: i8 = 6;

            /// public static final [SUBCLASS2_DIGITIZER_TABLET](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_DIGITIZER_TABLET)
            pub const SUBCLASS2_DIGITIZER_TABLET: i8 = 5;

            /// public static final [SUBCLASS2_GAMEPAD](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_GAMEPAD)
            pub const SUBCLASS2_GAMEPAD: i8 = 2;

            /// public static final [SUBCLASS2_JOYSTICK](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_JOYSTICK)
            pub const SUBCLASS2_JOYSTICK: i8 = 1;

            /// public static final [SUBCLASS2_REMOTE_CONTROL](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_REMOTE_CONTROL)
            pub const SUBCLASS2_REMOTE_CONTROL: i8 = 3;

            /// public static final [SUBCLASS2_SENSING_DEVICE](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_SENSING_DEVICE)
            pub const SUBCLASS2_SENSING_DEVICE: i8 = 4;

            /// public static final [SUBCLASS2_UNCATEGORIZED](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_UNCATEGORIZED)
            pub const SUBCLASS2_UNCATEGORIZED: i8 = 0;
        }

        /// pub final class [BluetoothHidDeviceAppQosSettings](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html)
        #[repr(transparent)]
        pub struct BluetoothHidDeviceAppQosSettings(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothHidDeviceAppQosSettings {}

        unsafe impl ::java_spaghetti::JniType for BluetoothHidDeviceAppQosSettings {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothHidDeviceAppQosSettings\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothHidDeviceAppQosSettings {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothHidDeviceAppQosSettings {}
        impl ::std::ops::Deref for BluetoothHidDeviceAppQosSettings {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<super::os::Parcelable> for BluetoothHidDeviceAppQosSettings {
            fn as_ref(&self) -> &super::os::Parcelable {
                unsafe { &*(self as *const Self as *const super::os::Parcelable) }
            }
        }
        impl BluetoothHidDeviceAppQosSettings {
            /// [BluetoothHidDeviceAppQosSettings](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#BluetoothHidDeviceAppQosSettings(int,%20int,%20int,%20int,%20int,%20int))
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: i32,
                arg1: i32,
                arg2: i32,
                arg3: i32,
                arg4: i32,
                arg5: i32,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothHidDeviceAppQosSettings", java.flags == PUBLIC, .name == "<init>", .descriptor == "(IIIIII)V"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg5),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDeviceAppQosSettings\0",
                        "<init>\0",
                        "(IIIIII)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getServiceType](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#getServiceType())
            pub fn getServiceType<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDeviceAppQosSettings", java.flags == PUBLIC, .name == "getServiceType", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDeviceAppQosSettings\0",
                        "getServiceType\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getTokenRate](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#getTokenRate())
            pub fn getTokenRate<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDeviceAppQosSettings", java.flags == PUBLIC, .name == "getTokenRate", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDeviceAppQosSettings\0",
                        "getTokenRate\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getTokenBucketSize](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#getTokenBucketSize())
            pub fn getTokenBucketSize<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDeviceAppQosSettings", java.flags == PUBLIC, .name == "getTokenBucketSize", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDeviceAppQosSettings\0",
                        "getTokenBucketSize\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getPeakBandwidth](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#getPeakBandwidth())
            pub fn getPeakBandwidth<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDeviceAppQosSettings", java.flags == PUBLIC, .name == "getPeakBandwidth", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDeviceAppQosSettings\0",
                        "getPeakBandwidth\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getLatency](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#getLatency())
            pub fn getLatency<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDeviceAppQosSettings", java.flags == PUBLIC, .name == "getLatency", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDeviceAppQosSettings\0",
                        "getLatency\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDelayVariation](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#getDelayVariation())
            pub fn getDelayVariation<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDeviceAppQosSettings", java.flags == PUBLIC, .name == "getDelayVariation", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDeviceAppQosSettings\0",
                        "getDelayVariation\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#describeContents())
            pub fn describeContents<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDeviceAppQosSettings", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDeviceAppQosSettings\0",
                        "describeContents\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [MAX](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#MAX)
            pub const MAX: i32 = -1;

            /// public static final [SERVICE_BEST_EFFORT](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#SERVICE_BEST_EFFORT)
            pub const SERVICE_BEST_EFFORT: i32 = 1;

            /// public static final [SERVICE_GUARANTEED](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#SERVICE_GUARANTEED)
            pub const SERVICE_GUARANTEED: i32 = 2;

            /// public static final [SERVICE_NO_TRAFFIC](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppQosSettings.html#SERVICE_NO_TRAFFIC)
            pub const SERVICE_NO_TRAFFIC: i32 = 0;
        }

        /// pub final class [BluetoothHidDeviceAppSdpSettings](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppSdpSettings.html)
        #[repr(transparent)]
        pub struct BluetoothHidDeviceAppSdpSettings(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothHidDeviceAppSdpSettings {}

        unsafe impl ::java_spaghetti::JniType for BluetoothHidDeviceAppSdpSettings {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothHidDeviceAppSdpSettings\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothHidDeviceAppSdpSettings {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothHidDeviceAppSdpSettings {}
        impl ::std::ops::Deref for BluetoothHidDeviceAppSdpSettings {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<super::os::Parcelable> for BluetoothHidDeviceAppSdpSettings {
            fn as_ref(&self) -> &super::os::Parcelable {
                unsafe { &*(self as *const Self as *const super::os::Parcelable) }
            }
        }
        impl BluetoothHidDeviceAppSdpSettings {
            /// [BluetoothHidDeviceAppSdpSettings](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppSdpSettings.html#BluetoothHidDeviceAppSdpSettings(java.lang.String,%20java.lang.String,%20java.lang.String,%20byte,%20byte%5B%5D))
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg2: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg3: i8,
                arg4: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothHidDeviceAppSdpSettings", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;B[B)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        arg4.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDeviceAppSdpSettings\0",
                        "<init>\0",
                        "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;B[B)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getName](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppSdpSettings.html#getName())
            pub fn getName<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothHidDeviceAppSdpSettings", java.flags == PUBLIC, .name == "getName", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDeviceAppSdpSettings\0",
                        "getName\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDescription](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppSdpSettings.html#getDescription())
            pub fn getDescription<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothHidDeviceAppSdpSettings", java.flags == PUBLIC, .name == "getDescription", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDeviceAppSdpSettings\0",
                        "getDescription\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getProvider](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppSdpSettings.html#getProvider())
            pub fn getProvider<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothHidDeviceAppSdpSettings", java.flags == PUBLIC, .name == "getProvider", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDeviceAppSdpSettings\0",
                        "getProvider\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getSubclass](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppSdpSettings.html#getSubclass())
            pub fn getSubclass<'env>(
                &'env self,
            ) -> ::std::result::Result<i8, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDeviceAppSdpSettings", java.flags == PUBLIC, .name == "getSubclass", .descriptor == "()B"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDeviceAppSdpSettings\0",
                        "getSubclass\0",
                        "()B\0",
                    );
                    __jni_env.call_byte_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDescriptors](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppSdpSettings.html#getDescriptors())
            pub fn getDescriptors<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothHidDeviceAppSdpSettings", java.flags == PUBLIC, .name == "getDescriptors", .descriptor == "()[B"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDeviceAppSdpSettings\0",
                        "getDescriptors\0",
                        "()[B\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothHidDeviceAppSdpSettings.html#describeContents())
            pub fn describeContents<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDeviceAppSdpSettings", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDeviceAppSdpSettings\0",
                        "describeContents\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub class [BluetoothHidDevice.Callback](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html)
        #[repr(transparent)]
        pub struct BluetoothHidDevice_Callback(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothHidDevice_Callback {}

        unsafe impl ::java_spaghetti::JniType for BluetoothHidDevice_Callback {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothHidDevice$Callback\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothHidDevice_Callback {}
        impl ::std::ops::Deref for BluetoothHidDevice_Callback {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BluetoothHidDevice_Callback {
            /// [Callback](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#Callback())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothHidDevice$Callback", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDevice$Callback\0",
                        "<init>\0",
                        "()V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onAppStatusChanged](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onAppStatusChanged(android.bluetooth.BluetoothDevice,%20boolean))
            pub fn onAppStatusChanged<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDevice$Callback", java.flags == PUBLIC, .name == "onAppStatusChanged", .descriptor == "(Landroid/bluetooth/BluetoothDevice;Z)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDevice$Callback\0",
                        "onAppStatusChanged\0",
                        "(Landroid/bluetooth/BluetoothDevice;Z)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onConnectionStateChanged](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onConnectionStateChanged(android.bluetooth.BluetoothDevice,%20int))
            pub fn onConnectionStateChanged<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDevice$Callback", java.flags == PUBLIC, .name == "onConnectionStateChanged", .descriptor == "(Landroid/bluetooth/BluetoothDevice;I)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDevice$Callback\0",
                        "onConnectionStateChanged\0",
                        "(Landroid/bluetooth/BluetoothDevice;I)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onGetReport](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onGetReport(android.bluetooth.BluetoothDevice,%20byte,%20byte,%20int))
            pub fn onGetReport<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i8,
                arg2: i8,
                arg3: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDevice$Callback", java.flags == PUBLIC, .name == "onGetReport", .descriptor == "(Landroid/bluetooth/BluetoothDevice;BBI)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDevice$Callback\0",
                        "onGetReport\0",
                        "(Landroid/bluetooth/BluetoothDevice;BBI)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onSetReport](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onSetReport(android.bluetooth.BluetoothDevice,%20byte,%20byte,%20byte%5B%5D))
            pub fn onSetReport<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i8,
                arg2: i8,
                arg3: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDevice$Callback", java.flags == PUBLIC, .name == "onSetReport", .descriptor == "(Landroid/bluetooth/BluetoothDevice;BB[B)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        arg3.as_arg_jvalue(),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDevice$Callback\0",
                        "onSetReport\0",
                        "(Landroid/bluetooth/BluetoothDevice;BB[B)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onSetProtocol](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onSetProtocol(android.bluetooth.BluetoothDevice,%20byte))
            pub fn onSetProtocol<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i8,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDevice$Callback", java.flags == PUBLIC, .name == "onSetProtocol", .descriptor == "(Landroid/bluetooth/BluetoothDevice;B)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDevice$Callback\0",
                        "onSetProtocol\0",
                        "(Landroid/bluetooth/BluetoothDevice;B)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onInterruptData](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onInterruptData(android.bluetooth.BluetoothDevice,%20byte,%20byte%5B%5D))
            pub fn onInterruptData<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i8,
                arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDevice$Callback", java.flags == PUBLIC, .name == "onInterruptData", .descriptor == "(Landroid/bluetooth/BluetoothDevice;B[B)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        arg2.as_arg_jvalue(),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDevice$Callback\0",
                        "onInterruptData\0",
                        "(Landroid/bluetooth/BluetoothDevice;B[B)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onVirtualCableUnplug](https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onVirtualCableUnplug(android.bluetooth.BluetoothDevice))
            pub fn onVirtualCableUnplug<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothHidDevice$Callback", java.flags == PUBLIC, .name == "onVirtualCableUnplug", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothHidDevice$Callback\0",
                        "onVirtualCableUnplug\0",
                        "(Landroid/bluetooth/BluetoothDevice;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub final class [BluetoothLeAudio](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudio.html)
        #[repr(transparent)]
        pub struct BluetoothLeAudio(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothLeAudio {}

        unsafe impl ::java_spaghetti::JniType for BluetoothLeAudio {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothLeAudio\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<BluetoothProfile> for BluetoothLeAudio {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothLeAudio {}
        impl ::std::ops::Deref for BluetoothLeAudio {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<BluetoothProfile> for BluetoothLeAudio {
            fn as_ref(&self) -> &BluetoothProfile {
                unsafe { &*(self as *const Self as *const BluetoothProfile) }
            }
        }
        impl BluetoothLeAudio {
            /// [close](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudio.html#close())
            pub fn close<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothLeAudio", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothLeAudio\0", "close\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getConnectedGroupLeadDevice](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudio.html#getConnectedGroupLeadDevice(int))
            pub fn getConnectedGroupLeadDevice<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothDevice>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudio", java.flags == PUBLIC, .name == "getConnectedGroupLeadDevice", .descriptor == "(I)Landroid/bluetooth/BluetoothDevice;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudio\0",
                        "getConnectedGroupLeadDevice\0",
                        "(I)Landroid/bluetooth/BluetoothDevice;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudio.html#getConnectedDevices())
            pub fn getConnectedDevices<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudio", java.flags == PUBLIC, .name == "getConnectedDevices", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudio\0",
                        "getConnectedDevices\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudio.html#getDevicesMatchingConnectionStates(int%5B%5D))
            pub fn getDevicesMatchingConnectionStates<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudio", java.flags == PUBLIC, .name == "getDevicesMatchingConnectionStates", .descriptor == "([I)Ljava/util/List;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudio\0",
                        "getDevicesMatchingConnectionStates\0",
                        "([I)Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudio.html#getConnectionState(android.bluetooth.BluetoothDevice))
            pub fn getConnectionState<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothLeAudio", java.flags == PUBLIC, .name == "getConnectionState", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudio\0",
                        "getConnectionState\0",
                        "(Landroid/bluetooth/BluetoothDevice;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getGroupId](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudio.html#getGroupId(android.bluetooth.BluetoothDevice))
            pub fn getGroupId<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothLeAudio", java.flags == PUBLIC, .name == "getGroupId", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudio\0",
                        "getGroupId\0",
                        "(Landroid/bluetooth/BluetoothDevice;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [ACTION_LE_AUDIO_CONNECTION_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudio.html#ACTION_LE_AUDIO_CONNECTION_STATE_CHANGED)
            pub const ACTION_LE_AUDIO_CONNECTION_STATE_CHANGED: &'static str =
                "android.bluetooth.action.LE_AUDIO_CONNECTION_STATE_CHANGED";

            /// public static final [GROUP_ID_INVALID](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudio.html#GROUP_ID_INVALID)
            pub const GROUP_ID_INVALID: i32 = -1;
        }

        /// pub final class [BluetoothLeAudioCodecConfig](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html)
        #[repr(transparent)]
        pub struct BluetoothLeAudioCodecConfig(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothLeAudioCodecConfig {}

        unsafe impl ::java_spaghetti::JniType for BluetoothLeAudioCodecConfig {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothLeAudioCodecConfig\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothLeAudioCodecConfig {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothLeAudioCodecConfig {}
        impl ::std::ops::Deref for BluetoothLeAudioCodecConfig {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<super::os::Parcelable> for BluetoothLeAudioCodecConfig {
            fn as_ref(&self) -> &super::os::Parcelable {
                unsafe { &*(self as *const Self as *const super::os::Parcelable) }
            }
        }
        impl BluetoothLeAudioCodecConfig {
            /// [describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#describeContents())
            pub fn describeContents<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig\0",
                        "describeContents\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toString](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#toString())
            pub fn toString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig\0",
                        "toString\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCodecType](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#getCodecType())
            pub fn getCodecType<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig", java.flags == PUBLIC, .name == "getCodecType", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig\0",
                        "getCodecType\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCodecName](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#getCodecName())
            pub fn getCodecName<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig", java.flags == PUBLIC, .name == "getCodecName", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig\0",
                        "getCodecName\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCodecPriority](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#getCodecPriority())
            pub fn getCodecPriority<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig", java.flags == PUBLIC, .name == "getCodecPriority", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig\0",
                        "getCodecPriority\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getSampleRate](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#getSampleRate())
            pub fn getSampleRate<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig", java.flags == PUBLIC, .name == "getSampleRate", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig\0",
                        "getSampleRate\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getBitsPerSample](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#getBitsPerSample())
            pub fn getBitsPerSample<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig", java.flags == PUBLIC, .name == "getBitsPerSample", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig\0",
                        "getBitsPerSample\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getChannelCount](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#getChannelCount())
            pub fn getChannelCount<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig", java.flags == PUBLIC, .name == "getChannelCount", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig\0",
                        "getChannelCount\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getFrameDuration](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#getFrameDuration())
            pub fn getFrameDuration<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig", java.flags == PUBLIC, .name == "getFrameDuration", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig\0",
                        "getFrameDuration\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getOctetsPerFrame](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#getOctetsPerFrame())
            pub fn getOctetsPerFrame<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig", java.flags == PUBLIC, .name == "getOctetsPerFrame", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig\0",
                        "getOctetsPerFrame\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getMinOctetsPerFrame](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#getMinOctetsPerFrame())
            pub fn getMinOctetsPerFrame<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig", java.flags == PUBLIC, .name == "getMinOctetsPerFrame", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig\0",
                        "getMinOctetsPerFrame\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getMaxOctetsPerFrame](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#getMaxOctetsPerFrame())
            pub fn getMaxOctetsPerFrame<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig", java.flags == PUBLIC, .name == "getMaxOctetsPerFrame", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig\0",
                        "getMaxOctetsPerFrame\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [equals](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#equals(java.lang.Object))
            pub fn equals<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig\0",
                        "equals\0",
                        "(Ljava/lang/Object;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hashCode](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#hashCode())
            pub fn hashCode<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig\0",
                        "hashCode\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [BITS_PER_SAMPLE_16](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#BITS_PER_SAMPLE_16)
            pub const BITS_PER_SAMPLE_16: i32 = 1;

            /// public static final [BITS_PER_SAMPLE_24](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#BITS_PER_SAMPLE_24)
            pub const BITS_PER_SAMPLE_24: i32 = 2;

            /// public static final [BITS_PER_SAMPLE_32](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#BITS_PER_SAMPLE_32)
            pub const BITS_PER_SAMPLE_32: i32 = 8;

            /// public static final [BITS_PER_SAMPLE_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#BITS_PER_SAMPLE_NONE)
            pub const BITS_PER_SAMPLE_NONE: i32 = 0;

            /// public static final [CHANNEL_COUNT_1](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#CHANNEL_COUNT_1)
            pub const CHANNEL_COUNT_1: i32 = 1;

            /// public static final [CHANNEL_COUNT_2](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#CHANNEL_COUNT_2)
            pub const CHANNEL_COUNT_2: i32 = 2;

            /// public static final [CHANNEL_COUNT_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#CHANNEL_COUNT_NONE)
            pub const CHANNEL_COUNT_NONE: i32 = 0;

            /// public static final [CODEC_PRIORITY_DEFAULT](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#CODEC_PRIORITY_DEFAULT)
            pub const CODEC_PRIORITY_DEFAULT: i32 = 0;

            /// public static final [CODEC_PRIORITY_DISABLED](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#CODEC_PRIORITY_DISABLED)
            pub const CODEC_PRIORITY_DISABLED: i32 = -1;

            /// public static final [CODEC_PRIORITY_HIGHEST](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#CODEC_PRIORITY_HIGHEST)
            pub const CODEC_PRIORITY_HIGHEST: i32 = 1000000;

            /// public static final [FRAME_DURATION_10000](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#FRAME_DURATION_10000)
            pub const FRAME_DURATION_10000: i32 = 2;

            /// public static final [FRAME_DURATION_7500](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#FRAME_DURATION_7500)
            pub const FRAME_DURATION_7500: i32 = 1;

            /// public static final [FRAME_DURATION_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#FRAME_DURATION_NONE)
            pub const FRAME_DURATION_NONE: i32 = 0;

            /// public static final [SAMPLE_RATE_16000](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_16000)
            pub const SAMPLE_RATE_16000: i32 = 4;

            /// public static final [SAMPLE_RATE_24000](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_24000)
            pub const SAMPLE_RATE_24000: i32 = 16;

            /// public static final [SAMPLE_RATE_32000](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_32000)
            pub const SAMPLE_RATE_32000: i32 = 32;

            /// public static final [SAMPLE_RATE_44100](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_44100)
            pub const SAMPLE_RATE_44100: i32 = 64;

            /// public static final [SAMPLE_RATE_48000](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_48000)
            pub const SAMPLE_RATE_48000: i32 = 128;

            /// public static final [SAMPLE_RATE_8000](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_8000)
            pub const SAMPLE_RATE_8000: i32 = 1;

            /// public static final [SAMPLE_RATE_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SAMPLE_RATE_NONE)
            pub const SAMPLE_RATE_NONE: i32 = 0;

            /// public static final [SOURCE_CODEC_TYPE_INVALID](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SOURCE_CODEC_TYPE_INVALID)
            pub const SOURCE_CODEC_TYPE_INVALID: i32 = 1000000;

            /// public static final [SOURCE_CODEC_TYPE_LC3](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.html#SOURCE_CODEC_TYPE_LC3)
            pub const SOURCE_CODEC_TYPE_LC3: i32 = 0;
        }

        /// pub final class [BluetoothLeAudioCodecConfig.Builder](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html)
        #[repr(transparent)]
        pub struct BluetoothLeAudioCodecConfig_Builder(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothLeAudioCodecConfig_Builder {}

        unsafe impl ::java_spaghetti::JniType for BluetoothLeAudioCodecConfig_Builder {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothLeAudioCodecConfig$Builder\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothLeAudioCodecConfig_Builder {}
        impl ::std::ops::Deref for BluetoothLeAudioCodecConfig_Builder {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BluetoothLeAudioCodecConfig_Builder {
            /// [Builder](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#Builder())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig$Builder\0",
                        "<init>\0",
                        "()V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [Builder](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#Builder(android.bluetooth.BluetoothLeAudioCodecConfig))
            pub fn new_BluetoothLeAudioCodecConfig<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothLeAudioCodecConfig>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/bluetooth/BluetoothLeAudioCodecConfig;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig$Builder\0",
                        "<init>\0",
                        "(Landroid/bluetooth/BluetoothLeAudioCodecConfig;)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setCodecType](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#setCodecType(int))
            pub fn setCodecType<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig$Builder", java.flags == PUBLIC, .name == "setCodecType", .descriptor == "(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig$Builder\0",
                        "setCodecType\0",
                        "(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setCodecPriority](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#setCodecPriority(int))
            pub fn setCodecPriority<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig$Builder", java.flags == PUBLIC, .name == "setCodecPriority", .descriptor == "(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig$Builder\0",
                        "setCodecPriority\0",
                        "(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setSampleRate](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#setSampleRate(int))
            pub fn setSampleRate<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig$Builder", java.flags == PUBLIC, .name == "setSampleRate", .descriptor == "(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig$Builder\0",
                        "setSampleRate\0",
                        "(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setBitsPerSample](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#setBitsPerSample(int))
            pub fn setBitsPerSample<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig$Builder", java.flags == PUBLIC, .name == "setBitsPerSample", .descriptor == "(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig$Builder\0",
                        "setBitsPerSample\0",
                        "(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setChannelCount](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#setChannelCount(int))
            pub fn setChannelCount<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig$Builder", java.flags == PUBLIC, .name == "setChannelCount", .descriptor == "(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig$Builder\0",
                        "setChannelCount\0",
                        "(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setFrameDuration](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#setFrameDuration(int))
            pub fn setFrameDuration<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig$Builder", java.flags == PUBLIC, .name == "setFrameDuration", .descriptor == "(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig$Builder\0",
                        "setFrameDuration\0",
                        "(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setOctetsPerFrame](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#setOctetsPerFrame(int))
            pub fn setOctetsPerFrame<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig$Builder", java.flags == PUBLIC, .name == "setOctetsPerFrame", .descriptor == "(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig$Builder\0",
                        "setOctetsPerFrame\0",
                        "(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setMinOctetsPerFrame](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#setMinOctetsPerFrame(int))
            pub fn setMinOctetsPerFrame<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig$Builder", java.flags == PUBLIC, .name == "setMinOctetsPerFrame", .descriptor == "(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig$Builder\0",
                        "setMinOctetsPerFrame\0",
                        "(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setMaxOctetsPerFrame](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#setMaxOctetsPerFrame(int))
            pub fn setMaxOctetsPerFrame<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig_Builder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig$Builder", java.flags == PUBLIC, .name == "setMaxOctetsPerFrame", .descriptor == "(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig$Builder\0",
                        "setMaxOctetsPerFrame\0",
                        "(I)Landroid/bluetooth/BluetoothLeAudioCodecConfig$Builder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [build](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig.Builder.html#build())
            pub fn build<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecConfig$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/bluetooth/BluetoothLeAudioCodecConfig;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecConfig$Builder\0",
                        "build\0",
                        "()Landroid/bluetooth/BluetoothLeAudioCodecConfig;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub final class [BluetoothLeAudioCodecStatus](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html)
        #[repr(transparent)]
        pub struct BluetoothLeAudioCodecStatus(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothLeAudioCodecStatus {}

        unsafe impl ::java_spaghetti::JniType for BluetoothLeAudioCodecStatus {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothLeAudioCodecStatus\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for BluetoothLeAudioCodecStatus {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothLeAudioCodecStatus {}
        impl ::std::ops::Deref for BluetoothLeAudioCodecStatus {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<super::os::Parcelable> for BluetoothLeAudioCodecStatus {
            fn as_ref(&self) -> &super::os::Parcelable {
                unsafe { &*(self as *const Self as *const super::os::Parcelable) }
            }
        }
        impl BluetoothLeAudioCodecStatus {
            /// [BluetoothLeAudioCodecStatus](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#BluetoothLeAudioCodecStatus(android.bluetooth.BluetoothLeAudioCodecConfig,%20android.bluetooth.BluetoothLeAudioCodecConfig,%20java.util.List,%20java.util.List,%20java.util.List,%20java.util.List))
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<BluetoothLeAudioCodecConfig>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothLeAudioCodecConfig>,
                arg2: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
                arg3: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
                arg4: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
                arg5: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecStatus", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/bluetooth/BluetoothLeAudioCodecConfig;Landroid/bluetooth/BluetoothLeAudioCodecConfig;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                        arg5.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothLeAudioCodecStatus\0", "<init>\0", "(Landroid/bluetooth/BluetoothLeAudioCodecConfig;Landroid/bluetooth/BluetoothLeAudioCodecConfig;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [equals](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#equals(java.lang.Object))
            pub fn equals<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecStatus", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecStatus\0",
                        "equals\0",
                        "(Ljava/lang/Object;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isInputCodecConfigSelectable](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#isInputCodecConfigSelectable(android.bluetooth.BluetoothLeAudioCodecConfig))
            pub fn isInputCodecConfigSelectable<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothLeAudioCodecConfig>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecStatus", java.flags == PUBLIC, .name == "isInputCodecConfigSelectable", .descriptor == "(Landroid/bluetooth/BluetoothLeAudioCodecConfig;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecStatus\0",
                        "isInputCodecConfigSelectable\0",
                        "(Landroid/bluetooth/BluetoothLeAudioCodecConfig;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isOutputCodecConfigSelectable](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#isOutputCodecConfigSelectable(android.bluetooth.BluetoothLeAudioCodecConfig))
            pub fn isOutputCodecConfigSelectable<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothLeAudioCodecConfig>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecStatus", java.flags == PUBLIC, .name == "isOutputCodecConfigSelectable", .descriptor == "(Landroid/bluetooth/BluetoothLeAudioCodecConfig;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecStatus\0",
                        "isOutputCodecConfigSelectable\0",
                        "(Landroid/bluetooth/BluetoothLeAudioCodecConfig;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hashCode](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#hashCode())
            pub fn hashCode<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecStatus", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecStatus\0",
                        "hashCode\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toString](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#toString())
            pub fn toString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecStatus", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecStatus\0",
                        "toString\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#describeContents())
            pub fn describeContents<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecStatus", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecStatus\0",
                        "describeContents\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getInputCodecConfig](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#getInputCodecConfig())
            pub fn getInputCodecConfig<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecStatus", java.flags == PUBLIC, .name == "getInputCodecConfig", .descriptor == "()Landroid/bluetooth/BluetoothLeAudioCodecConfig;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecStatus\0",
                        "getInputCodecConfig\0",
                        "()Landroid/bluetooth/BluetoothLeAudioCodecConfig;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getOutputCodecConfig](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#getOutputCodecConfig())
            pub fn getOutputCodecConfig<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothLeAudioCodecConfig>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecStatus", java.flags == PUBLIC, .name == "getOutputCodecConfig", .descriptor == "()Landroid/bluetooth/BluetoothLeAudioCodecConfig;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecStatus\0",
                        "getOutputCodecConfig\0",
                        "()Landroid/bluetooth/BluetoothLeAudioCodecConfig;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getInputCodecLocalCapabilities](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#getInputCodecLocalCapabilities())
            pub fn getInputCodecLocalCapabilities<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecStatus", java.flags == PUBLIC, .name == "getInputCodecLocalCapabilities", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecStatus\0",
                        "getInputCodecLocalCapabilities\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getOutputCodecLocalCapabilities](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#getOutputCodecLocalCapabilities())
            pub fn getOutputCodecLocalCapabilities<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecStatus", java.flags == PUBLIC, .name == "getOutputCodecLocalCapabilities", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecStatus\0",
                        "getOutputCodecLocalCapabilities\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getInputCodecSelectableCapabilities](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#getInputCodecSelectableCapabilities())
            pub fn getInputCodecSelectableCapabilities<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecStatus", java.flags == PUBLIC, .name == "getInputCodecSelectableCapabilities", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecStatus\0",
                        "getInputCodecSelectableCapabilities\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getOutputCodecSelectableCapabilities](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#getOutputCodecSelectableCapabilities())
            pub fn getOutputCodecSelectableCapabilities<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothLeAudioCodecStatus", java.flags == PUBLIC, .name == "getOutputCodecSelectableCapabilities", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothLeAudioCodecStatus\0",
                        "getOutputCodecSelectableCapabilities\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [EXTRA_LE_AUDIO_CODEC_STATUS](https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecStatus.html#EXTRA_LE_AUDIO_CODEC_STATUS)
            pub const EXTRA_LE_AUDIO_CODEC_STATUS: &'static str = "android.bluetooth.extra.LE_AUDIO_CODEC_STATUS";
        }

        /// pub final class [BluetoothManager](https://developer.android.com/reference/android/bluetooth/BluetoothManager.html)
        #[repr(transparent)]
        pub struct BluetoothManager(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothManager {}

        unsafe impl ::java_spaghetti::JniType for BluetoothManager {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothManager\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothManager {}
        impl ::std::ops::Deref for BluetoothManager {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BluetoothManager {
            /// [getAdapter](https://developer.android.com/reference/android/bluetooth/BluetoothManager.html#getAdapter())
            pub fn getAdapter<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothAdapter>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothManager", java.flags == PUBLIC, .name == "getAdapter", .descriptor == "()Landroid/bluetooth/BluetoothAdapter;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothManager\0",
                        "getAdapter\0",
                        "()Landroid/bluetooth/BluetoothAdapter;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothManager.html#getConnectionState(android.bluetooth.BluetoothDevice,%20int))
            pub fn getConnectionState<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothManager", java.flags == PUBLIC, .name == "getConnectionState", .descriptor == "(Landroid/bluetooth/BluetoothDevice;I)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothManager\0",
                        "getConnectionState\0",
                        "(Landroid/bluetooth/BluetoothDevice;I)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothManager.html#getConnectedDevices(int))
            pub fn getConnectedDevices<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothManager", java.flags == PUBLIC, .name == "getConnectedDevices", .descriptor == "(I)Ljava/util/List;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothManager\0",
                        "getConnectedDevices\0",
                        "(I)Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothManager.html#getDevicesMatchingConnectionStates(int,%20int%5B%5D))
            pub fn getDevicesMatchingConnectionStates<'env>(
                &'env self,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothManager", java.flags == PUBLIC, .name == "getDevicesMatchingConnectionStates", .descriptor == "(I[I)Ljava/util/List;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothManager\0",
                        "getDevicesMatchingConnectionStates\0",
                        "(I[I)Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [openGattServer](https://developer.android.com/reference/android/bluetooth/BluetoothManager.html#openGattServer(android.content.Context,%20android.bluetooth.BluetoothGattServerCallback))
            pub fn openGattServer<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::content::Context>,
                arg1: impl ::java_spaghetti::AsArg<BluetoothGattServerCallback>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothGattServer>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothManager", java.flags == PUBLIC, .name == "openGattServer", .descriptor == "(Landroid/content/Context;Landroid/bluetooth/BluetoothGattServerCallback;)Landroid/bluetooth/BluetoothGattServer;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothManager\0", "openGattServer\0", "(Landroid/content/Context;Landroid/bluetooth/BluetoothGattServerCallback;)Landroid/bluetooth/BluetoothGattServer;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub interface [BluetoothProfile](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html)
        #[repr(transparent)]
        pub struct BluetoothProfile(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothProfile {}

        unsafe impl ::java_spaghetti::JniType for BluetoothProfile {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothProfile\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothProfile {}
        impl ::std::ops::Deref for BluetoothProfile {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BluetoothProfile {
            /// [getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#getConnectedDevices())
            pub fn getConnectedDevices<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothProfile", java.flags == PUBLIC | ABSTRACT, .name == "getConnectedDevices", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothProfile\0",
                        "getConnectedDevices\0",
                        "()Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDevicesMatchingConnectionStates](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#getDevicesMatchingConnectionStates(int%5B%5D))
            pub fn getDevicesMatchingConnectionStates<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::List>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothProfile", java.flags == PUBLIC | ABSTRACT, .name == "getDevicesMatchingConnectionStates", .descriptor == "([I)Ljava/util/List;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothProfile\0",
                        "getDevicesMatchingConnectionStates\0",
                        "([I)Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#getConnectionState(android.bluetooth.BluetoothDevice))
            pub fn getConnectionState<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BluetoothDevice>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothProfile", java.flags == PUBLIC | ABSTRACT, .name == "getConnectionState", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothProfile\0",
                        "getConnectionState\0",
                        "(Landroid/bluetooth/BluetoothDevice;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [A2DP](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#A2DP)
            pub const A2DP: i32 = 2;

            /// public static final [CSIP_SET_COORDINATOR](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#CSIP_SET_COORDINATOR)
            pub const CSIP_SET_COORDINATOR: i32 = 25;

            /// public static final [EXTRA_PREVIOUS_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#EXTRA_PREVIOUS_STATE)
            pub const EXTRA_PREVIOUS_STATE: &'static str = "android.bluetooth.profile.extra.PREVIOUS_STATE";

            /// public static final [EXTRA_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#EXTRA_STATE)
            pub const EXTRA_STATE: &'static str = "android.bluetooth.profile.extra.STATE";

            /// public static final [GATT](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#GATT)
            pub const GATT: i32 = 7;

            /// public static final [GATT_SERVER](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#GATT_SERVER)
            pub const GATT_SERVER: i32 = 8;

            /// public static final [HAP_CLIENT](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#HAP_CLIENT)
            pub const HAP_CLIENT: i32 = 28;

            /// public static final [HEADSET](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#HEADSET)
            pub const HEADSET: i32 = 1;

            /// public static final [HEALTH](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#HEALTH)
            #[deprecated]
            pub const HEALTH: i32 = 3;

            /// public static final [HEARING_AID](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#HEARING_AID)
            pub const HEARING_AID: i32 = 21;

            /// public static final [HID_DEVICE](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#HID_DEVICE)
            pub const HID_DEVICE: i32 = 19;

            /// public static final [LE_AUDIO](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#LE_AUDIO)
            pub const LE_AUDIO: i32 = 22;

            /// public static final [SAP](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#SAP)
            pub const SAP: i32 = 10;

            /// public static final [STATE_CONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#STATE_CONNECTED)
            pub const STATE_CONNECTED: i32 = 2;

            /// public static final [STATE_CONNECTING](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#STATE_CONNECTING)
            pub const STATE_CONNECTING: i32 = 1;

            /// public static final [STATE_DISCONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#STATE_DISCONNECTED)
            pub const STATE_DISCONNECTED: i32 = 0;

            /// public static final [STATE_DISCONNECTING](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html#STATE_DISCONNECTING)
            pub const STATE_DISCONNECTING: i32 = 3;
        }

        /// pub interface [BluetoothProfile.ServiceListener](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.ServiceListener.html)
        #[repr(transparent)]
        pub struct BluetoothProfile_ServiceListener(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothProfile_ServiceListener {}

        unsafe impl ::java_spaghetti::JniType for BluetoothProfile_ServiceListener {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothProfile$ServiceListener\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothProfile_ServiceListener {}
        impl ::std::ops::Deref for BluetoothProfile_ServiceListener {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BluetoothProfile_ServiceListener {
            /// [onServiceConnected](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.ServiceListener.html#onServiceConnected(int,%20android.bluetooth.BluetoothProfile))
            pub fn onServiceConnected<'env>(
                &'env self,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<BluetoothProfile>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothProfile$ServiceListener", java.flags == PUBLIC | ABSTRACT, .name == "onServiceConnected", .descriptor == "(ILandroid/bluetooth/BluetoothProfile;)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothProfile$ServiceListener\0",
                        "onServiceConnected\0",
                        "(ILandroid/bluetooth/BluetoothProfile;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onServiceDisconnected](https://developer.android.com/reference/android/bluetooth/BluetoothProfile.ServiceListener.html#onServiceDisconnected(int))
            pub fn onServiceDisconnected<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothProfile$ServiceListener", java.flags == PUBLIC | ABSTRACT, .name == "onServiceDisconnected", .descriptor == "(I)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothProfile$ServiceListener\0",
                        "onServiceDisconnected\0",
                        "(I)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub final class [BluetoothServerSocket](https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html)
        #[repr(transparent)]
        pub struct BluetoothServerSocket(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothServerSocket {}

        unsafe impl ::java_spaghetti::JniType for BluetoothServerSocket {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothServerSocket\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothServerSocket {}
        impl ::std::ops::Deref for BluetoothServerSocket {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BluetoothServerSocket {
            /// [accept](https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html#accept())
            pub fn accept<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothSocket>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothServerSocket", java.flags == PUBLIC, .name == "accept", .descriptor == "()Landroid/bluetooth/BluetoothSocket;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothServerSocket\0",
                        "accept\0",
                        "()Landroid/bluetooth/BluetoothSocket;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [accept](https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html#accept(int))
            pub fn accept_int<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothSocket>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothServerSocket", java.flags == PUBLIC, .name == "accept", .descriptor == "(I)Landroid/bluetooth/BluetoothSocket;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothServerSocket\0",
                        "accept\0",
                        "(I)Landroid/bluetooth/BluetoothSocket;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [close](https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html#close())
            pub fn close<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothServerSocket", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothServerSocket\0", "close\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getPsm](https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html#getPsm())
            pub fn getPsm<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothServerSocket", java.flags == PUBLIC, .name == "getPsm", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothServerSocket\0",
                        "getPsm\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toString](https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html#toString())
            pub fn toString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothServerSocket", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothServerSocket\0",
                        "toString\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub final class [BluetoothSocket](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html)
        #[repr(transparent)]
        pub struct BluetoothSocket(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothSocket {}

        unsafe impl ::java_spaghetti::JniType for BluetoothSocket {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothSocket\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothSocket {}
        impl ::std::ops::Deref for BluetoothSocket {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BluetoothSocket {
            /// [getRemoteDevice](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#getRemoteDevice())
            pub fn getRemoteDevice<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, BluetoothDevice>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothSocket", java.flags == PUBLIC, .name == "getRemoteDevice", .descriptor == "()Landroid/bluetooth/BluetoothDevice;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothSocket\0",
                        "getRemoteDevice\0",
                        "()Landroid/bluetooth/BluetoothDevice;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getInputStream](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#getInputStream())
            pub fn getInputStream<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::io::InputStream>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothSocket", java.flags == PUBLIC, .name == "getInputStream", .descriptor == "()Ljava/io/InputStream;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothSocket\0",
                        "getInputStream\0",
                        "()Ljava/io/InputStream;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getOutputStream](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#getOutputStream())
            pub fn getOutputStream<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::io::OutputStream>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/bluetooth/BluetoothSocket", java.flags == PUBLIC, .name == "getOutputStream", .descriptor == "()Ljava/io/OutputStream;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothSocket\0",
                        "getOutputStream\0",
                        "()Ljava/io/OutputStream;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isConnected](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#isConnected())
            pub fn isConnected<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothSocket", java.flags == PUBLIC, .name == "isConnected", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothSocket\0", "isConnected\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [connect](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#connect())
            pub fn connect<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothSocket", java.flags == PUBLIC, .name == "connect", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothSocket\0", "connect\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [close](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#close())
            pub fn close<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothSocket", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/bluetooth/BluetoothSocket\0", "close\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getMaxTransmitPacketSize](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#getMaxTransmitPacketSize())
            pub fn getMaxTransmitPacketSize<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothSocket", java.flags == PUBLIC, .name == "getMaxTransmitPacketSize", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothSocket\0",
                        "getMaxTransmitPacketSize\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getMaxReceivePacketSize](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#getMaxReceivePacketSize())
            pub fn getMaxReceivePacketSize<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothSocket", java.flags == PUBLIC, .name == "getMaxReceivePacketSize", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothSocket\0",
                        "getMaxReceivePacketSize\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getConnectionType](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#getConnectionType())
            pub fn getConnectionType<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/bluetooth/BluetoothSocket", java.flags == PUBLIC, .name == "getConnectionType", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/bluetooth/BluetoothSocket\0",
                        "getConnectionType\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [TYPE_L2CAP](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#TYPE_L2CAP)
            pub const TYPE_L2CAP: i32 = 3;

            /// public static final [TYPE_RFCOMM](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#TYPE_RFCOMM)
            pub const TYPE_RFCOMM: i32 = 1;

            /// public static final [TYPE_SCO](https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#TYPE_SCO)
            pub const TYPE_SCO: i32 = 2;
        }

        /// pub final class [BluetoothStatusCodes](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html)
        #[repr(transparent)]
        pub struct BluetoothStatusCodes(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BluetoothStatusCodes {}

        unsafe impl ::java_spaghetti::JniType for BluetoothStatusCodes {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/bluetooth/BluetoothStatusCodes\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BluetoothStatusCodes {}
        impl ::std::ops::Deref for BluetoothStatusCodes {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BluetoothStatusCodes {
            /// public static final [ERROR_BLUETOOTH_NOT_ALLOWED](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#ERROR_BLUETOOTH_NOT_ALLOWED)
            pub const ERROR_BLUETOOTH_NOT_ALLOWED: i32 = 2;

            /// public static final [ERROR_BLUETOOTH_NOT_ENABLED](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#ERROR_BLUETOOTH_NOT_ENABLED)
            pub const ERROR_BLUETOOTH_NOT_ENABLED: i32 = 1;

            /// public static final [ERROR_DEVICE_NOT_BONDED](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#ERROR_DEVICE_NOT_BONDED)
            pub const ERROR_DEVICE_NOT_BONDED: i32 = 3;

            /// public static final [ERROR_GATT_WRITE_NOT_ALLOWED](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#ERROR_GATT_WRITE_NOT_ALLOWED)
            pub const ERROR_GATT_WRITE_NOT_ALLOWED: i32 = 200;

            /// public static final [ERROR_GATT_WRITE_REQUEST_BUSY](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#ERROR_GATT_WRITE_REQUEST_BUSY)
            pub const ERROR_GATT_WRITE_REQUEST_BUSY: i32 = 201;

            /// public static final [ERROR_MISSING_BLUETOOTH_CONNECT_PERMISSION](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#ERROR_MISSING_BLUETOOTH_CONNECT_PERMISSION)
            pub const ERROR_MISSING_BLUETOOTH_CONNECT_PERMISSION: i32 = 6;

            /// public static final [ERROR_PROFILE_SERVICE_NOT_BOUND](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#ERROR_PROFILE_SERVICE_NOT_BOUND)
            pub const ERROR_PROFILE_SERVICE_NOT_BOUND: i32 = 9;

            /// public static final [ERROR_UNKNOWN](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#ERROR_UNKNOWN)
            pub const ERROR_UNKNOWN: i32 = 2147483647;

            /// public static final [FEATURE_NOT_SUPPORTED](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#FEATURE_NOT_SUPPORTED)
            pub const FEATURE_NOT_SUPPORTED: i32 = 11;

            /// public static final [FEATURE_SUPPORTED](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#FEATURE_SUPPORTED)
            pub const FEATURE_SUPPORTED: i32 = 10;

            /// public static final [SUCCESS](https://developer.android.com/reference/android/bluetooth/BluetoothStatusCodes.html#SUCCESS)
            pub const SUCCESS: i32 = 0;
        }
    }

    pub mod content {

        /// pub class [BroadcastReceiver](https://developer.android.com/reference/android/content/BroadcastReceiver.html)
        #[repr(transparent)]
        pub struct BroadcastReceiver(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BroadcastReceiver {}

        unsafe impl ::java_spaghetti::JniType for BroadcastReceiver {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/content/BroadcastReceiver\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BroadcastReceiver {}
        impl ::std::ops::Deref for BroadcastReceiver {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BroadcastReceiver {
            /// [BroadcastReceiver](https://developer.android.com/reference/android/content/BroadcastReceiver.html#BroadcastReceiver())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/BroadcastReceiver", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/BroadcastReceiver\0", "<init>\0", "()V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [onReceive](https://developer.android.com/reference/android/content/BroadcastReceiver.html#onReceive(android.content.Context,%20android.content.Intent))
            pub fn onReceive<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Context>,
                arg1: impl ::java_spaghetti::AsArg<Intent>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/BroadcastReceiver", java.flags == PUBLIC | ABSTRACT, .name == "onReceive", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/BroadcastReceiver\0",
                        "onReceive\0",
                        "(Landroid/content/Context;Landroid/content/Intent;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [peekService](https://developer.android.com/reference/android/content/BroadcastReceiver.html#peekService(android.content.Context,%20android.content.Intent))
            pub fn peekService<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Context>,
                arg1: impl ::java_spaghetti::AsArg<Intent>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::os::IBinder>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/BroadcastReceiver", java.flags == PUBLIC, .name == "peekService", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;)Landroid/os/IBinder;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/BroadcastReceiver\0",
                        "peekService\0",
                        "(Landroid/content/Context;Landroid/content/Intent;)Landroid/os/IBinder;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setResultCode](https://developer.android.com/reference/android/content/BroadcastReceiver.html#setResultCode(int))
            pub fn setResultCode<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/BroadcastReceiver", java.flags == PUBLIC | FINAL, .name == "setResultCode", .descriptor == "(I)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/BroadcastReceiver\0",
                        "setResultCode\0",
                        "(I)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getResultCode](https://developer.android.com/reference/android/content/BroadcastReceiver.html#getResultCode())
            pub fn getResultCode<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/BroadcastReceiver", java.flags == PUBLIC | FINAL, .name == "getResultCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/BroadcastReceiver\0",
                        "getResultCode\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setResultData](https://developer.android.com/reference/android/content/BroadcastReceiver.html#setResultData(java.lang.String))
            pub fn setResultData<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/BroadcastReceiver", java.flags == PUBLIC | FINAL, .name == "setResultData", .descriptor == "(Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/BroadcastReceiver\0",
                        "setResultData\0",
                        "(Ljava/lang/String;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getResultData](https://developer.android.com/reference/android/content/BroadcastReceiver.html#getResultData())
            pub fn getResultData<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/BroadcastReceiver", java.flags == PUBLIC | FINAL, .name == "getResultData", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/BroadcastReceiver\0",
                        "getResultData\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getAbortBroadcast](https://developer.android.com/reference/android/content/BroadcastReceiver.html#getAbortBroadcast())
            pub fn getAbortBroadcast<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/BroadcastReceiver", java.flags == PUBLIC | FINAL, .name == "getAbortBroadcast", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/BroadcastReceiver\0",
                        "getAbortBroadcast\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [abortBroadcast](https://developer.android.com/reference/android/content/BroadcastReceiver.html#abortBroadcast())
            pub fn abortBroadcast<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/BroadcastReceiver", java.flags == PUBLIC | FINAL, .name == "abortBroadcast", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/BroadcastReceiver\0",
                        "abortBroadcast\0",
                        "()V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [clearAbortBroadcast](https://developer.android.com/reference/android/content/BroadcastReceiver.html#clearAbortBroadcast())
            pub fn clearAbortBroadcast<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/BroadcastReceiver", java.flags == PUBLIC | FINAL, .name == "clearAbortBroadcast", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/BroadcastReceiver\0",
                        "clearAbortBroadcast\0",
                        "()V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isOrderedBroadcast](https://developer.android.com/reference/android/content/BroadcastReceiver.html#isOrderedBroadcast())
            pub fn isOrderedBroadcast<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/BroadcastReceiver", java.flags == PUBLIC | FINAL, .name == "isOrderedBroadcast", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/BroadcastReceiver\0",
                        "isOrderedBroadcast\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isInitialStickyBroadcast](https://developer.android.com/reference/android/content/BroadcastReceiver.html#isInitialStickyBroadcast())
            pub fn isInitialStickyBroadcast<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/BroadcastReceiver", java.flags == PUBLIC | FINAL, .name == "isInitialStickyBroadcast", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/BroadcastReceiver\0",
                        "isInitialStickyBroadcast\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setOrderedHint](https://developer.android.com/reference/android/content/BroadcastReceiver.html#setOrderedHint(boolean))
            pub fn setOrderedHint<'env>(
                &'env self,
                arg0: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/BroadcastReceiver", java.flags == PUBLIC | FINAL, .name == "setOrderedHint", .descriptor == "(Z)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/BroadcastReceiver\0",
                        "setOrderedHint\0",
                        "(Z)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setDebugUnregister](https://developer.android.com/reference/android/content/BroadcastReceiver.html#setDebugUnregister(boolean))
            pub fn setDebugUnregister<'env>(
                &'env self,
                arg0: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/BroadcastReceiver", java.flags == PUBLIC | FINAL, .name == "setDebugUnregister", .descriptor == "(Z)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/BroadcastReceiver\0",
                        "setDebugUnregister\0",
                        "(Z)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDebugUnregister](https://developer.android.com/reference/android/content/BroadcastReceiver.html#getDebugUnregister())
            pub fn getDebugUnregister<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/BroadcastReceiver", java.flags == PUBLIC | FINAL, .name == "getDebugUnregister", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/BroadcastReceiver\0",
                        "getDebugUnregister\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub class [Context](https://developer.android.com/reference/android/content/Context.html)
        #[repr(transparent)]
        pub struct Context(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for Context {}

        unsafe impl ::java_spaghetti::JniType for Context {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/content/Context\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for Context {}
        impl ::std::ops::Deref for Context {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl Context {
            /// [Context](https://developer.android.com/reference/android/content/Context.html#Context())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/Context\0", "<init>\0", "()V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getApplicationContext](https://developer.android.com/reference/android/content/Context.html#getApplicationContext())
            pub fn getApplicationContext<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getApplicationContext", .descriptor == "()Landroid/content/Context;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getApplicationContext\0",
                        "()Landroid/content/Context;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getString](https://developer.android.com/reference/android/content/Context.html#getString(int))
            pub fn getString_int<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | FINAL, .name == "getString", .descriptor == "(I)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getString\0",
                        "(I)Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getString](https://developer.android.com/reference/android/content/Context.html#getString(int,%20java.lang.Object...))
            pub fn getString_int_Object_array<'env>(
                &'env self,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<
                        super::super::java::lang::Object,
                        super::super::java::lang::Throwable,
                    >,
                >,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | FINAL | VARARGS, .name == "getString", .descriptor == "(I[Ljava/lang/Object;)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getString\0",
                        "(I[Ljava/lang/Object;)Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getColor](https://developer.android.com/reference/android/content/Context.html#getColor(int))
            pub fn getColor<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | FINAL, .name == "getColor", .descriptor == "(I)I"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/Context\0", "getColor\0", "(I)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setTheme](https://developer.android.com/reference/android/content/Context.html#setTheme(int))
            pub fn setTheme<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "setTheme", .descriptor == "(I)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/Context\0", "setTheme\0", "(I)V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getClassLoader](https://developer.android.com/reference/android/content/Context.html#getClassLoader())
            pub fn getClassLoader<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::ClassLoader>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getClassLoader", .descriptor == "()Ljava/lang/ClassLoader;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getClassLoader\0",
                        "()Ljava/lang/ClassLoader;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getPackageName](https://developer.android.com/reference/android/content/Context.html#getPackageName())
            pub fn getPackageName<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getPackageName", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getPackageName\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getOpPackageName](https://developer.android.com/reference/android/content/Context.html#getOpPackageName())
            pub fn getOpPackageName<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC, .name == "getOpPackageName", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getOpPackageName\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getAttributionTag](https://developer.android.com/reference/android/content/Context.html#getAttributionTag())
            pub fn getAttributionTag<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC, .name == "getAttributionTag", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getAttributionTag\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getPackageResourcePath](https://developer.android.com/reference/android/content/Context.html#getPackageResourcePath())
            pub fn getPackageResourcePath<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getPackageResourcePath", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getPackageResourcePath\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getPackageCodePath](https://developer.android.com/reference/android/content/Context.html#getPackageCodePath())
            pub fn getPackageCodePath<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getPackageCodePath", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getPackageCodePath\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [moveSharedPreferencesFrom](https://developer.android.com/reference/android/content/Context.html#moveSharedPreferencesFrom(android.content.Context,%20java.lang.String))
            pub fn moveSharedPreferencesFrom<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Context>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "moveSharedPreferencesFrom", .descriptor == "(Landroid/content/Context;Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "moveSharedPreferencesFrom\0",
                        "(Landroid/content/Context;Ljava/lang/String;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [deleteSharedPreferences](https://developer.android.com/reference/android/content/Context.html#deleteSharedPreferences(java.lang.String))
            pub fn deleteSharedPreferences<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "deleteSharedPreferences", .descriptor == "(Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "deleteSharedPreferences\0",
                        "(Ljava/lang/String;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [deleteFile](https://developer.android.com/reference/android/content/Context.html#deleteFile(java.lang.String))
            pub fn deleteFile<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "deleteFile", .descriptor == "(Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "deleteFile\0",
                        "(Ljava/lang/String;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getFileStreamPath](https://developer.android.com/reference/android/content/Context.html#getFileStreamPath(java.lang.String))
            pub fn getFileStreamPath<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::io::File>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getFileStreamPath", .descriptor == "(Ljava/lang/String;)Ljava/io/File;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getFileStreamPath\0",
                        "(Ljava/lang/String;)Ljava/io/File;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDataDir](https://developer.android.com/reference/android/content/Context.html#getDataDir())
            pub fn getDataDir<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::io::File>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getDataDir", .descriptor == "()Ljava/io/File;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getDataDir\0",
                        "()Ljava/io/File;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getFilesDir](https://developer.android.com/reference/android/content/Context.html#getFilesDir())
            pub fn getFilesDir<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::io::File>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getFilesDir", .descriptor == "()Ljava/io/File;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getFilesDir\0",
                        "()Ljava/io/File;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getNoBackupFilesDir](https://developer.android.com/reference/android/content/Context.html#getNoBackupFilesDir())
            pub fn getNoBackupFilesDir<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::io::File>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getNoBackupFilesDir", .descriptor == "()Ljava/io/File;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getNoBackupFilesDir\0",
                        "()Ljava/io/File;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getExternalFilesDir](https://developer.android.com/reference/android/content/Context.html#getExternalFilesDir(java.lang.String))
            pub fn getExternalFilesDir<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::io::File>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getExternalFilesDir", .descriptor == "(Ljava/lang/String;)Ljava/io/File;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getExternalFilesDir\0",
                        "(Ljava/lang/String;)Ljava/io/File;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getExternalFilesDirs](https://developer.android.com/reference/android/content/Context.html#getExternalFilesDirs(java.lang.String))
            pub fn getExternalFilesDirs<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<
                            super::super::java::io::File,
                            super::super::java::lang::Throwable,
                        >,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getExternalFilesDirs", .descriptor == "(Ljava/lang/String;)[Ljava/io/File;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getExternalFilesDirs\0",
                        "(Ljava/lang/String;)[Ljava/io/File;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getObbDir](https://developer.android.com/reference/android/content/Context.html#getObbDir())
            pub fn getObbDir<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::io::File>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getObbDir", .descriptor == "()Ljava/io/File;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getObbDir\0",
                        "()Ljava/io/File;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getObbDirs](https://developer.android.com/reference/android/content/Context.html#getObbDirs())
            pub fn getObbDirs<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<
                            super::super::java::io::File,
                            super::super::java::lang::Throwable,
                        >,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getObbDirs", .descriptor == "()[Ljava/io/File;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getObbDirs\0",
                        "()[Ljava/io/File;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCacheDir](https://developer.android.com/reference/android/content/Context.html#getCacheDir())
            pub fn getCacheDir<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::io::File>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getCacheDir", .descriptor == "()Ljava/io/File;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getCacheDir\0",
                        "()Ljava/io/File;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCodeCacheDir](https://developer.android.com/reference/android/content/Context.html#getCodeCacheDir())
            pub fn getCodeCacheDir<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::io::File>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getCodeCacheDir", .descriptor == "()Ljava/io/File;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getCodeCacheDir\0",
                        "()Ljava/io/File;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getExternalCacheDir](https://developer.android.com/reference/android/content/Context.html#getExternalCacheDir())
            pub fn getExternalCacheDir<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::io::File>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getExternalCacheDir", .descriptor == "()Ljava/io/File;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getExternalCacheDir\0",
                        "()Ljava/io/File;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getExternalCacheDirs](https://developer.android.com/reference/android/content/Context.html#getExternalCacheDirs())
            pub fn getExternalCacheDirs<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<
                            super::super::java::io::File,
                            super::super::java::lang::Throwable,
                        >,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getExternalCacheDirs", .descriptor == "()[Ljava/io/File;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getExternalCacheDirs\0",
                        "()[Ljava/io/File;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getExternalMediaDirs](https://developer.android.com/reference/android/content/Context.html#getExternalMediaDirs())
            #[deprecated]
            pub fn getExternalMediaDirs<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<
                            super::super::java::io::File,
                            super::super::java::lang::Throwable,
                        >,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getExternalMediaDirs", .descriptor == "()[Ljava/io/File;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getExternalMediaDirs\0",
                        "()[Ljava/io/File;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [fileList](https://developer.android.com/reference/android/content/Context.html#fileList())
            pub fn fileList<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<
                            super::super::java::lang::String,
                            super::super::java::lang::Throwable,
                        >,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "fileList", .descriptor == "()[Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "fileList\0",
                        "()[Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDir](https://developer.android.com/reference/android/content/Context.html#getDir(java.lang.String,%20int))
            pub fn getDir<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::io::File>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getDir", .descriptor == "(Ljava/lang/String;I)Ljava/io/File;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getDir\0",
                        "(Ljava/lang/String;I)Ljava/io/File;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [moveDatabaseFrom](https://developer.android.com/reference/android/content/Context.html#moveDatabaseFrom(android.content.Context,%20java.lang.String))
            pub fn moveDatabaseFrom<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Context>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "moveDatabaseFrom", .descriptor == "(Landroid/content/Context;Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "moveDatabaseFrom\0",
                        "(Landroid/content/Context;Ljava/lang/String;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [deleteDatabase](https://developer.android.com/reference/android/content/Context.html#deleteDatabase(java.lang.String))
            pub fn deleteDatabase<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "deleteDatabase", .descriptor == "(Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "deleteDatabase\0",
                        "(Ljava/lang/String;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDatabasePath](https://developer.android.com/reference/android/content/Context.html#getDatabasePath(java.lang.String))
            pub fn getDatabasePath<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::io::File>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getDatabasePath", .descriptor == "(Ljava/lang/String;)Ljava/io/File;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getDatabasePath\0",
                        "(Ljava/lang/String;)Ljava/io/File;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [databaseList](https://developer.android.com/reference/android/content/Context.html#databaseList())
            pub fn databaseList<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<
                            super::super::java::lang::String,
                            super::super::java::lang::Throwable,
                        >,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "databaseList", .descriptor == "()[Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "databaseList\0",
                        "()[Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getWallpaperDesiredMinimumWidth](https://developer.android.com/reference/android/content/Context.html#getWallpaperDesiredMinimumWidth())
            #[deprecated]
            pub fn getWallpaperDesiredMinimumWidth<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getWallpaperDesiredMinimumWidth", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getWallpaperDesiredMinimumWidth\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getWallpaperDesiredMinimumHeight](https://developer.android.com/reference/android/content/Context.html#getWallpaperDesiredMinimumHeight())
            #[deprecated]
            pub fn getWallpaperDesiredMinimumHeight<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getWallpaperDesiredMinimumHeight", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getWallpaperDesiredMinimumHeight\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setWallpaper](https://developer.android.com/reference/android/content/Context.html#setWallpaper(java.io.InputStream))
            #[deprecated]
            pub fn setWallpaper_InputStream<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::io::InputStream>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "setWallpaper", .descriptor == "(Ljava/io/InputStream;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "setWallpaper\0",
                        "(Ljava/io/InputStream;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [clearWallpaper](https://developer.android.com/reference/android/content/Context.html#clearWallpaper())
            #[deprecated]
            pub fn clearWallpaper<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "clearWallpaper", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/Context\0", "clearWallpaper\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [startActivity](https://developer.android.com/reference/android/content/Context.html#startActivity(android.content.Intent))
            pub fn startActivity_Intent<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Intent>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "startActivity", .descriptor == "(Landroid/content/Intent;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "startActivity\0",
                        "(Landroid/content/Intent;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [startActivities](https://developer.android.com/reference/android/content/Context.html#startActivities(android.content.Intent%5B%5D))
            pub fn startActivities_Intent_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<Intent, super::super::java::lang::Throwable>,
                >,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "startActivities", .descriptor == "([Landroid/content/Intent;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "startActivities\0",
                        "([Landroid/content/Intent;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [sendBroadcast](https://developer.android.com/reference/android/content/Context.html#sendBroadcast(android.content.Intent))
            pub fn sendBroadcast_Intent<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Intent>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "sendBroadcast", .descriptor == "(Landroid/content/Intent;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "sendBroadcast\0",
                        "(Landroid/content/Intent;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [sendBroadcast](https://developer.android.com/reference/android/content/Context.html#sendBroadcast(android.content.Intent,%20java.lang.String))
            pub fn sendBroadcast_Intent_String<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Intent>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "sendBroadcast", .descriptor == "(Landroid/content/Intent;Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "sendBroadcast\0",
                        "(Landroid/content/Intent;Ljava/lang/String;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [sendBroadcastWithMultiplePermissions](https://developer.android.com/reference/android/content/Context.html#sendBroadcastWithMultiplePermissions(android.content.Intent,%20java.lang.String%5B%5D))
            pub fn sendBroadcastWithMultiplePermissions<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Intent>,
                arg1: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<
                        super::super::java::lang::String,
                        super::super::java::lang::Throwable,
                    >,
                >,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC, .name == "sendBroadcastWithMultiplePermissions", .descriptor == "(Landroid/content/Intent;[Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "sendBroadcastWithMultiplePermissions\0",
                        "(Landroid/content/Intent;[Ljava/lang/String;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [sendOrderedBroadcast](https://developer.android.com/reference/android/content/Context.html#sendOrderedBroadcast(android.content.Intent,%20java.lang.String))
            pub fn sendOrderedBroadcast_Intent_String<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Intent>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "sendOrderedBroadcast", .descriptor == "(Landroid/content/Intent;Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "sendOrderedBroadcast\0",
                        "(Landroid/content/Intent;Ljava/lang/String;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [sendStickyBroadcast](https://developer.android.com/reference/android/content/Context.html#sendStickyBroadcast(android.content.Intent))
            #[deprecated]
            pub fn sendStickyBroadcast_Intent<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Intent>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "sendStickyBroadcast", .descriptor == "(Landroid/content/Intent;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "sendStickyBroadcast\0",
                        "(Landroid/content/Intent;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [removeStickyBroadcast](https://developer.android.com/reference/android/content/Context.html#removeStickyBroadcast(android.content.Intent))
            #[deprecated]
            pub fn removeStickyBroadcast<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Intent>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "removeStickyBroadcast", .descriptor == "(Landroid/content/Intent;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "removeStickyBroadcast\0",
                        "(Landroid/content/Intent;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [registerReceiver](https://developer.android.com/reference/android/content/Context.html#registerReceiver(android.content.BroadcastReceiver,%20android.content.IntentFilter))
            pub fn registerReceiver_BroadcastReceiver_IntentFilter<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BroadcastReceiver>,
                arg1: impl ::java_spaghetti::AsArg<IntentFilter>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "registerReceiver", .descriptor == "(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "registerReceiver\0",
                        "(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [registerReceiver](https://developer.android.com/reference/android/content/Context.html#registerReceiver(android.content.BroadcastReceiver,%20android.content.IntentFilter,%20int))
            pub fn registerReceiver_BroadcastReceiver_IntentFilter_int<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BroadcastReceiver>,
                arg1: impl ::java_spaghetti::AsArg<IntentFilter>,
                arg2: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "registerReceiver", .descriptor == "(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "registerReceiver\0", "(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [unregisterReceiver](https://developer.android.com/reference/android/content/Context.html#unregisterReceiver(android.content.BroadcastReceiver))
            pub fn unregisterReceiver<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<BroadcastReceiver>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "unregisterReceiver", .descriptor == "(Landroid/content/BroadcastReceiver;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "unregisterReceiver\0",
                        "(Landroid/content/BroadcastReceiver;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [stopService](https://developer.android.com/reference/android/content/Context.html#stopService(android.content.Intent))
            pub fn stopService<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Intent>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "stopService", .descriptor == "(Landroid/content/Intent;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "stopService\0",
                        "(Landroid/content/Intent;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getSystemService](https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String))
            pub fn getSystemService_String<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::Object>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getSystemService", .descriptor == "(Ljava/lang/String;)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getSystemService\0",
                        "(Ljava/lang/String;)Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getSystemService](https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.Class))
            pub fn getSystemService_Class<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Class>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::Object>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | FINAL, .name == "getSystemService", .descriptor == "(Ljava/lang/Class;)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getSystemService\0",
                        "(Ljava/lang/Class;)Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getSystemServiceName](https://developer.android.com/reference/android/content/Context.html#getSystemServiceName(java.lang.Class))
            pub fn getSystemServiceName<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Class>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getSystemServiceName", .descriptor == "(Ljava/lang/Class;)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "getSystemServiceName\0",
                        "(Ljava/lang/Class;)Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [checkPermission](https://developer.android.com/reference/android/content/Context.html#checkPermission(java.lang.String,%20int,%20int))
            pub fn checkPermission<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "checkPermission", .descriptor == "(Ljava/lang/String;II)I"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "checkPermission\0",
                        "(Ljava/lang/String;II)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [checkCallingPermission](https://developer.android.com/reference/android/content/Context.html#checkCallingPermission(java.lang.String))
            pub fn checkCallingPermission<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "checkCallingPermission", .descriptor == "(Ljava/lang/String;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "checkCallingPermission\0",
                        "(Ljava/lang/String;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [checkCallingOrSelfPermission](https://developer.android.com/reference/android/content/Context.html#checkCallingOrSelfPermission(java.lang.String))
            pub fn checkCallingOrSelfPermission<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "checkCallingOrSelfPermission", .descriptor == "(Ljava/lang/String;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "checkCallingOrSelfPermission\0",
                        "(Ljava/lang/String;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [checkSelfPermission](https://developer.android.com/reference/android/content/Context.html#checkSelfPermission(java.lang.String))
            pub fn checkSelfPermission<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "checkSelfPermission", .descriptor == "(Ljava/lang/String;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "checkSelfPermission\0",
                        "(Ljava/lang/String;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [enforcePermission](https://developer.android.com/reference/android/content/Context.html#enforcePermission(java.lang.String,%20int,%20int,%20java.lang.String))
            pub fn enforcePermission<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
                arg2: i32,
                arg3: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "enforcePermission", .descriptor == "(Ljava/lang/String;IILjava/lang/String;)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        arg3.as_arg_jvalue(),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "enforcePermission\0",
                        "(Ljava/lang/String;IILjava/lang/String;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [enforceCallingPermission](https://developer.android.com/reference/android/content/Context.html#enforceCallingPermission(java.lang.String,%20java.lang.String))
            pub fn enforceCallingPermission<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "enforceCallingPermission", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "enforceCallingPermission\0",
                        "(Ljava/lang/String;Ljava/lang/String;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [enforceCallingOrSelfPermission](https://developer.android.com/reference/android/content/Context.html#enforceCallingOrSelfPermission(java.lang.String,%20java.lang.String))
            pub fn enforceCallingOrSelfPermission<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "enforceCallingOrSelfPermission", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "enforceCallingOrSelfPermission\0",
                        "(Ljava/lang/String;Ljava/lang/String;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [checkUriPermissions](https://developer.android.com/reference/android/content/Context.html#checkUriPermissions(java.util.List,%20int,%20int,%20int))
            pub fn checkUriPermissions<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
                arg1: i32,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::IntArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC, .name == "checkUriPermissions", .descriptor == "(Ljava/util/List;III)[I"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "checkUriPermissions\0",
                        "(Ljava/util/List;III)[I\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [checkCallingUriPermissions](https://developer.android.com/reference/android/content/Context.html#checkCallingUriPermissions(java.util.List,%20int))
            pub fn checkCallingUriPermissions<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::IntArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC, .name == "checkCallingUriPermissions", .descriptor == "(Ljava/util/List;I)[I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "checkCallingUriPermissions\0",
                        "(Ljava/util/List;I)[I\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [checkCallingOrSelfUriPermissions](https://developer.android.com/reference/android/content/Context.html#checkCallingOrSelfUriPermissions(java.util.List,%20int))
            pub fn checkCallingOrSelfUriPermissions<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::List>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::IntArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC, .name == "checkCallingOrSelfUriPermissions", .descriptor == "(Ljava/util/List;I)[I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "checkCallingOrSelfUriPermissions\0",
                        "(Ljava/util/List;I)[I\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [revokeSelfPermissionOnKill](https://developer.android.com/reference/android/content/Context.html#revokeSelfPermissionOnKill(java.lang.String))
            pub fn revokeSelfPermissionOnKill<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC, .name == "revokeSelfPermissionOnKill", .descriptor == "(Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "revokeSelfPermissionOnKill\0",
                        "(Ljava/lang/String;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [createPackageContext](https://developer.android.com/reference/android/content/Context.html#createPackageContext(java.lang.String,%20int))
            pub fn createPackageContext<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "createPackageContext", .descriptor == "(Ljava/lang/String;I)Landroid/content/Context;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "createPackageContext\0",
                        "(Ljava/lang/String;I)Landroid/content/Context;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [createContextForSplit](https://developer.android.com/reference/android/content/Context.html#createContextForSplit(java.lang.String))
            pub fn createContextForSplit<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "createContextForSplit", .descriptor == "(Ljava/lang/String;)Landroid/content/Context;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "createContextForSplit\0",
                        "(Ljava/lang/String;)Landroid/content/Context;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [createAttributionContext](https://developer.android.com/reference/android/content/Context.html#createAttributionContext(java.lang.String))
            pub fn createAttributionContext<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC, .name == "createAttributionContext", .descriptor == "(Ljava/lang/String;)Landroid/content/Context;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "createAttributionContext\0",
                        "(Ljava/lang/String;)Landroid/content/Context;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [createDeviceProtectedStorageContext](https://developer.android.com/reference/android/content/Context.html#createDeviceProtectedStorageContext())
            pub fn createDeviceProtectedStorageContext<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "createDeviceProtectedStorageContext", .descriptor == "()Landroid/content/Context;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "createDeviceProtectedStorageContext\0",
                        "()Landroid/content/Context;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isRestricted](https://developer.android.com/reference/android/content/Context.html#isRestricted())
            pub fn isRestricted<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC, .name == "isRestricted", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/Context\0", "isRestricted\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isDeviceProtectedStorage](https://developer.android.com/reference/android/content/Context.html#isDeviceProtectedStorage())
            pub fn isDeviceProtectedStorage<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "isDeviceProtectedStorage", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Context\0",
                        "isDeviceProtectedStorage\0",
                        "()Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isUiContext](https://developer.android.com/reference/android/content/Context.html#isUiContext())
            pub fn isUiContext<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Context", java.flags == PUBLIC, .name == "isUiContext", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/Context\0", "isUiContext\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [ACCESSIBILITY_SERVICE](https://developer.android.com/reference/android/content/Context.html#ACCESSIBILITY_SERVICE)
            pub const ACCESSIBILITY_SERVICE: &'static str = "accessibility";

            /// public static final [ACCOUNT_SERVICE](https://developer.android.com/reference/android/content/Context.html#ACCOUNT_SERVICE)
            pub const ACCOUNT_SERVICE: &'static str = "account";

            /// public static final [ACTIVITY_SERVICE](https://developer.android.com/reference/android/content/Context.html#ACTIVITY_SERVICE)
            pub const ACTIVITY_SERVICE: &'static str = "activity";

            /// public static final [ALARM_SERVICE](https://developer.android.com/reference/android/content/Context.html#ALARM_SERVICE)
            pub const ALARM_SERVICE: &'static str = "alarm";

            /// public static final [APPWIDGET_SERVICE](https://developer.android.com/reference/android/content/Context.html#APPWIDGET_SERVICE)
            pub const APPWIDGET_SERVICE: &'static str = "appwidget";

            /// public static final [APP_OPS_SERVICE](https://developer.android.com/reference/android/content/Context.html#APP_OPS_SERVICE)
            pub const APP_OPS_SERVICE: &'static str = "appops";

            /// public static final [APP_SEARCH_SERVICE](https://developer.android.com/reference/android/content/Context.html#APP_SEARCH_SERVICE)
            pub const APP_SEARCH_SERVICE: &'static str = "app_search";

            /// public static final [AUDIO_SERVICE](https://developer.android.com/reference/android/content/Context.html#AUDIO_SERVICE)
            pub const AUDIO_SERVICE: &'static str = "audio";

            /// public static final [BATTERY_SERVICE](https://developer.android.com/reference/android/content/Context.html#BATTERY_SERVICE)
            pub const BATTERY_SERVICE: &'static str = "batterymanager";

            /// public static final [BIND_ABOVE_CLIENT](https://developer.android.com/reference/android/content/Context.html#BIND_ABOVE_CLIENT)
            pub const BIND_ABOVE_CLIENT: i32 = 8;

            /// public static final [BIND_ADJUST_WITH_ACTIVITY](https://developer.android.com/reference/android/content/Context.html#BIND_ADJUST_WITH_ACTIVITY)
            pub const BIND_ADJUST_WITH_ACTIVITY: i32 = 128;

            /// public static final [BIND_ALLOW_OOM_MANAGEMENT](https://developer.android.com/reference/android/content/Context.html#BIND_ALLOW_OOM_MANAGEMENT)
            pub const BIND_ALLOW_OOM_MANAGEMENT: i32 = 16;

            /// public static final [BIND_AUTO_CREATE](https://developer.android.com/reference/android/content/Context.html#BIND_AUTO_CREATE)
            pub const BIND_AUTO_CREATE: i32 = 1;

            /// public static final [BIND_DEBUG_UNBIND](https://developer.android.com/reference/android/content/Context.html#BIND_DEBUG_UNBIND)
            pub const BIND_DEBUG_UNBIND: i32 = 2;

            /// public static final [BIND_EXTERNAL_SERVICE](https://developer.android.com/reference/android/content/Context.html#BIND_EXTERNAL_SERVICE)
            pub const BIND_EXTERNAL_SERVICE: i32 = -2147483648;

            /// public static final [BIND_IMPORTANT](https://developer.android.com/reference/android/content/Context.html#BIND_IMPORTANT)
            pub const BIND_IMPORTANT: i32 = 64;

            /// public static final [BIND_INCLUDE_CAPABILITIES](https://developer.android.com/reference/android/content/Context.html#BIND_INCLUDE_CAPABILITIES)
            pub const BIND_INCLUDE_CAPABILITIES: i32 = 4096;

            /// public static final [BIND_NOT_FOREGROUND](https://developer.android.com/reference/android/content/Context.html#BIND_NOT_FOREGROUND)
            pub const BIND_NOT_FOREGROUND: i32 = 4;

            /// public static final [BIND_NOT_PERCEPTIBLE](https://developer.android.com/reference/android/content/Context.html#BIND_NOT_PERCEPTIBLE)
            pub const BIND_NOT_PERCEPTIBLE: i32 = 256;

            /// public static final [BIND_WAIVE_PRIORITY](https://developer.android.com/reference/android/content/Context.html#BIND_WAIVE_PRIORITY)
            pub const BIND_WAIVE_PRIORITY: i32 = 32;

            /// public static final [BIOMETRIC_SERVICE](https://developer.android.com/reference/android/content/Context.html#BIOMETRIC_SERVICE)
            pub const BIOMETRIC_SERVICE: &'static str = "biometric";

            /// public static final [BLOB_STORE_SERVICE](https://developer.android.com/reference/android/content/Context.html#BLOB_STORE_SERVICE)
            pub const BLOB_STORE_SERVICE: &'static str = "blob_store";

            /// public static final [BLUETOOTH_SERVICE](https://developer.android.com/reference/android/content/Context.html#BLUETOOTH_SERVICE)
            pub const BLUETOOTH_SERVICE: &'static str = "bluetooth";

            /// public static final [BUGREPORT_SERVICE](https://developer.android.com/reference/android/content/Context.html#BUGREPORT_SERVICE)
            pub const BUGREPORT_SERVICE: &'static str = "bugreport";

            /// public static final [CAMERA_SERVICE](https://developer.android.com/reference/android/content/Context.html#CAMERA_SERVICE)
            pub const CAMERA_SERVICE: &'static str = "camera";

            /// public static final [CAPTIONING_SERVICE](https://developer.android.com/reference/android/content/Context.html#CAPTIONING_SERVICE)
            pub const CAPTIONING_SERVICE: &'static str = "captioning";

            /// public static final [CARRIER_CONFIG_SERVICE](https://developer.android.com/reference/android/content/Context.html#CARRIER_CONFIG_SERVICE)
            pub const CARRIER_CONFIG_SERVICE: &'static str = "carrier_config";

            /// public static final [CLIPBOARD_SERVICE](https://developer.android.com/reference/android/content/Context.html#CLIPBOARD_SERVICE)
            pub const CLIPBOARD_SERVICE: &'static str = "clipboard";

            /// public static final [COMPANION_DEVICE_SERVICE](https://developer.android.com/reference/android/content/Context.html#COMPANION_DEVICE_SERVICE)
            pub const COMPANION_DEVICE_SERVICE: &'static str = "companiondevice";

            /// public static final [CONNECTIVITY_DIAGNOSTICS_SERVICE](https://developer.android.com/reference/android/content/Context.html#CONNECTIVITY_DIAGNOSTICS_SERVICE)
            pub const CONNECTIVITY_DIAGNOSTICS_SERVICE: &'static str = "connectivity_diagnostics";

            /// public static final [CONNECTIVITY_SERVICE](https://developer.android.com/reference/android/content/Context.html#CONNECTIVITY_SERVICE)
            pub const CONNECTIVITY_SERVICE: &'static str = "connectivity";

            /// public static final [CONSUMER_IR_SERVICE](https://developer.android.com/reference/android/content/Context.html#CONSUMER_IR_SERVICE)
            pub const CONSUMER_IR_SERVICE: &'static str = "consumer_ir";

            /// public static final [CONTEXT_IGNORE_SECURITY](https://developer.android.com/reference/android/content/Context.html#CONTEXT_IGNORE_SECURITY)
            pub const CONTEXT_IGNORE_SECURITY: i32 = 2;

            /// public static final [CONTEXT_INCLUDE_CODE](https://developer.android.com/reference/android/content/Context.html#CONTEXT_INCLUDE_CODE)
            pub const CONTEXT_INCLUDE_CODE: i32 = 1;

            /// public static final [CONTEXT_RESTRICTED](https://developer.android.com/reference/android/content/Context.html#CONTEXT_RESTRICTED)
            pub const CONTEXT_RESTRICTED: i32 = 4;

            /// public static final [CROSS_PROFILE_APPS_SERVICE](https://developer.android.com/reference/android/content/Context.html#CROSS_PROFILE_APPS_SERVICE)
            pub const CROSS_PROFILE_APPS_SERVICE: &'static str = "crossprofileapps";

            /// public static final [DEVICE_POLICY_SERVICE](https://developer.android.com/reference/android/content/Context.html#DEVICE_POLICY_SERVICE)
            pub const DEVICE_POLICY_SERVICE: &'static str = "device_policy";

            /// public static final [DISPLAY_HASH_SERVICE](https://developer.android.com/reference/android/content/Context.html#DISPLAY_HASH_SERVICE)
            pub const DISPLAY_HASH_SERVICE: &'static str = "display_hash";

            /// public static final [DISPLAY_SERVICE](https://developer.android.com/reference/android/content/Context.html#DISPLAY_SERVICE)
            pub const DISPLAY_SERVICE: &'static str = "display";

            /// public static final [DOMAIN_VERIFICATION_SERVICE](https://developer.android.com/reference/android/content/Context.html#DOMAIN_VERIFICATION_SERVICE)
            pub const DOMAIN_VERIFICATION_SERVICE: &'static str = "domain_verification";

            /// public static final [DOWNLOAD_SERVICE](https://developer.android.com/reference/android/content/Context.html#DOWNLOAD_SERVICE)
            pub const DOWNLOAD_SERVICE: &'static str = "download";

            /// public static final [DROPBOX_SERVICE](https://developer.android.com/reference/android/content/Context.html#DROPBOX_SERVICE)
            pub const DROPBOX_SERVICE: &'static str = "dropbox";

            /// public static final [EUICC_SERVICE](https://developer.android.com/reference/android/content/Context.html#EUICC_SERVICE)
            pub const EUICC_SERVICE: &'static str = "euicc";

            /// public static final [FILE_INTEGRITY_SERVICE](https://developer.android.com/reference/android/content/Context.html#FILE_INTEGRITY_SERVICE)
            pub const FILE_INTEGRITY_SERVICE: &'static str = "file_integrity";

            /// public static final [FINGERPRINT_SERVICE](https://developer.android.com/reference/android/content/Context.html#FINGERPRINT_SERVICE)
            pub const FINGERPRINT_SERVICE: &'static str = "fingerprint";

            /// public static final [GAME_SERVICE](https://developer.android.com/reference/android/content/Context.html#GAME_SERVICE)
            pub const GAME_SERVICE: &'static str = "game";

            /// public static final [HARDWARE_PROPERTIES_SERVICE](https://developer.android.com/reference/android/content/Context.html#HARDWARE_PROPERTIES_SERVICE)
            pub const HARDWARE_PROPERTIES_SERVICE: &'static str = "hardware_properties";

            /// public static final [INPUT_METHOD_SERVICE](https://developer.android.com/reference/android/content/Context.html#INPUT_METHOD_SERVICE)
            pub const INPUT_METHOD_SERVICE: &'static str = "input_method";

            /// public static final [INPUT_SERVICE](https://developer.android.com/reference/android/content/Context.html#INPUT_SERVICE)
            pub const INPUT_SERVICE: &'static str = "input";

            /// public static final [IPSEC_SERVICE](https://developer.android.com/reference/android/content/Context.html#IPSEC_SERVICE)
            pub const IPSEC_SERVICE: &'static str = "ipsec";

            /// public static final [JOB_SCHEDULER_SERVICE](https://developer.android.com/reference/android/content/Context.html#JOB_SCHEDULER_SERVICE)
            pub const JOB_SCHEDULER_SERVICE: &'static str = "jobscheduler";

            /// public static final [KEYGUARD_SERVICE](https://developer.android.com/reference/android/content/Context.html#KEYGUARD_SERVICE)
            pub const KEYGUARD_SERVICE: &'static str = "keyguard";

            /// public static final [LAUNCHER_APPS_SERVICE](https://developer.android.com/reference/android/content/Context.html#LAUNCHER_APPS_SERVICE)
            pub const LAUNCHER_APPS_SERVICE: &'static str = "launcherapps";

            /// public static final [LAYOUT_INFLATER_SERVICE](https://developer.android.com/reference/android/content/Context.html#LAYOUT_INFLATER_SERVICE)
            pub const LAYOUT_INFLATER_SERVICE: &'static str = "layout_inflater";

            /// public static final [LOCALE_SERVICE](https://developer.android.com/reference/android/content/Context.html#LOCALE_SERVICE)
            pub const LOCALE_SERVICE: &'static str = "locale";

            /// public static final [LOCATION_SERVICE](https://developer.android.com/reference/android/content/Context.html#LOCATION_SERVICE)
            pub const LOCATION_SERVICE: &'static str = "location";

            /// public static final [MEDIA_COMMUNICATION_SERVICE](https://developer.android.com/reference/android/content/Context.html#MEDIA_COMMUNICATION_SERVICE)
            pub const MEDIA_COMMUNICATION_SERVICE: &'static str = "media_communication";

            /// public static final [MEDIA_METRICS_SERVICE](https://developer.android.com/reference/android/content/Context.html#MEDIA_METRICS_SERVICE)
            pub const MEDIA_METRICS_SERVICE: &'static str = "media_metrics";

            /// public static final [MEDIA_PROJECTION_SERVICE](https://developer.android.com/reference/android/content/Context.html#MEDIA_PROJECTION_SERVICE)
            pub const MEDIA_PROJECTION_SERVICE: &'static str = "media_projection";

            /// public static final [MEDIA_ROUTER_SERVICE](https://developer.android.com/reference/android/content/Context.html#MEDIA_ROUTER_SERVICE)
            pub const MEDIA_ROUTER_SERVICE: &'static str = "media_router";

            /// public static final [MEDIA_SESSION_SERVICE](https://developer.android.com/reference/android/content/Context.html#MEDIA_SESSION_SERVICE)
            pub const MEDIA_SESSION_SERVICE: &'static str = "media_session";

            /// public static final [MIDI_SERVICE](https://developer.android.com/reference/android/content/Context.html#MIDI_SERVICE)
            pub const MIDI_SERVICE: &'static str = "midi";

            /// public static final [MODE_APPEND](https://developer.android.com/reference/android/content/Context.html#MODE_APPEND)
            pub const MODE_APPEND: i32 = 32768;

            /// public static final [MODE_ENABLE_WRITE_AHEAD_LOGGING](https://developer.android.com/reference/android/content/Context.html#MODE_ENABLE_WRITE_AHEAD_LOGGING)
            pub const MODE_ENABLE_WRITE_AHEAD_LOGGING: i32 = 8;

            /// public static final [MODE_MULTI_PROCESS](https://developer.android.com/reference/android/content/Context.html#MODE_MULTI_PROCESS)
            #[deprecated]
            pub const MODE_MULTI_PROCESS: i32 = 4;

            /// public static final [MODE_NO_LOCALIZED_COLLATORS](https://developer.android.com/reference/android/content/Context.html#MODE_NO_LOCALIZED_COLLATORS)
            pub const MODE_NO_LOCALIZED_COLLATORS: i32 = 16;

            /// public static final [MODE_PRIVATE](https://developer.android.com/reference/android/content/Context.html#MODE_PRIVATE)
            pub const MODE_PRIVATE: i32 = 0;

            /// public static final [MODE_WORLD_READABLE](https://developer.android.com/reference/android/content/Context.html#MODE_WORLD_READABLE)
            #[deprecated]
            pub const MODE_WORLD_READABLE: i32 = 1;

            /// public static final [MODE_WORLD_WRITEABLE](https://developer.android.com/reference/android/content/Context.html#MODE_WORLD_WRITEABLE)
            #[deprecated]
            pub const MODE_WORLD_WRITEABLE: i32 = 2;

            /// public static final [NETWORK_STATS_SERVICE](https://developer.android.com/reference/android/content/Context.html#NETWORK_STATS_SERVICE)
            pub const NETWORK_STATS_SERVICE: &'static str = "netstats";

            /// public static final [NFC_SERVICE](https://developer.android.com/reference/android/content/Context.html#NFC_SERVICE)
            pub const NFC_SERVICE: &'static str = "nfc";

            /// public static final [NOTIFICATION_SERVICE](https://developer.android.com/reference/android/content/Context.html#NOTIFICATION_SERVICE)
            pub const NOTIFICATION_SERVICE: &'static str = "notification";

            /// public static final [NSD_SERVICE](https://developer.android.com/reference/android/content/Context.html#NSD_SERVICE)
            pub const NSD_SERVICE: &'static str = "servicediscovery";

            /// public static final [PEOPLE_SERVICE](https://developer.android.com/reference/android/content/Context.html#PEOPLE_SERVICE)
            pub const PEOPLE_SERVICE: &'static str = "people";

            /// public static final [PERFORMANCE_HINT_SERVICE](https://developer.android.com/reference/android/content/Context.html#PERFORMANCE_HINT_SERVICE)
            pub const PERFORMANCE_HINT_SERVICE: &'static str = "performance_hint";

            /// public static final [POWER_SERVICE](https://developer.android.com/reference/android/content/Context.html#POWER_SERVICE)
            pub const POWER_SERVICE: &'static str = "power";

            /// public static final [PRINT_SERVICE](https://developer.android.com/reference/android/content/Context.html#PRINT_SERVICE)
            pub const PRINT_SERVICE: &'static str = "print";

            /// public static final [RECEIVER_EXPORTED](https://developer.android.com/reference/android/content/Context.html#RECEIVER_EXPORTED)
            pub const RECEIVER_EXPORTED: i32 = 2;

            /// public static final [RECEIVER_NOT_EXPORTED](https://developer.android.com/reference/android/content/Context.html#RECEIVER_NOT_EXPORTED)
            pub const RECEIVER_NOT_EXPORTED: i32 = 4;

            /// public static final [RECEIVER_VISIBLE_TO_INSTANT_APPS](https://developer.android.com/reference/android/content/Context.html#RECEIVER_VISIBLE_TO_INSTANT_APPS)
            pub const RECEIVER_VISIBLE_TO_INSTANT_APPS: i32 = 1;

            /// public static final [RESTRICTIONS_SERVICE](https://developer.android.com/reference/android/content/Context.html#RESTRICTIONS_SERVICE)
            pub const RESTRICTIONS_SERVICE: &'static str = "restrictions";

            /// public static final [ROLE_SERVICE](https://developer.android.com/reference/android/content/Context.html#ROLE_SERVICE)
            pub const ROLE_SERVICE: &'static str = "role";

            /// public static final [SEARCH_SERVICE](https://developer.android.com/reference/android/content/Context.html#SEARCH_SERVICE)
            pub const SEARCH_SERVICE: &'static str = "search";

            /// public static final [SENSOR_SERVICE](https://developer.android.com/reference/android/content/Context.html#SENSOR_SERVICE)
            pub const SENSOR_SERVICE: &'static str = "sensor";

            /// public static final [SHORTCUT_SERVICE](https://developer.android.com/reference/android/content/Context.html#SHORTCUT_SERVICE)
            pub const SHORTCUT_SERVICE: &'static str = "shortcut";

            /// public static final [STATUS_BAR_SERVICE](https://developer.android.com/reference/android/content/Context.html#STATUS_BAR_SERVICE)
            pub const STATUS_BAR_SERVICE: &'static str = "statusbar";

            /// public static final [STORAGE_SERVICE](https://developer.android.com/reference/android/content/Context.html#STORAGE_SERVICE)
            pub const STORAGE_SERVICE: &'static str = "storage";

            /// public static final [STORAGE_STATS_SERVICE](https://developer.android.com/reference/android/content/Context.html#STORAGE_STATS_SERVICE)
            pub const STORAGE_STATS_SERVICE: &'static str = "storagestats";

            /// public static final [SYSTEM_HEALTH_SERVICE](https://developer.android.com/reference/android/content/Context.html#SYSTEM_HEALTH_SERVICE)
            pub const SYSTEM_HEALTH_SERVICE: &'static str = "systemhealth";

            /// public static final [TELECOM_SERVICE](https://developer.android.com/reference/android/content/Context.html#TELECOM_SERVICE)
            pub const TELECOM_SERVICE: &'static str = "telecom";

            /// public static final [TELEPHONY_IMS_SERVICE](https://developer.android.com/reference/android/content/Context.html#TELEPHONY_IMS_SERVICE)
            pub const TELEPHONY_IMS_SERVICE: &'static str = "telephony_ims";

            /// public static final [TELEPHONY_SERVICE](https://developer.android.com/reference/android/content/Context.html#TELEPHONY_SERVICE)
            pub const TELEPHONY_SERVICE: &'static str = "phone";

            /// public static final [TELEPHONY_SUBSCRIPTION_SERVICE](https://developer.android.com/reference/android/content/Context.html#TELEPHONY_SUBSCRIPTION_SERVICE)
            pub const TELEPHONY_SUBSCRIPTION_SERVICE: &'static str = "telephony_subscription_service";

            /// public static final [TEXT_CLASSIFICATION_SERVICE](https://developer.android.com/reference/android/content/Context.html#TEXT_CLASSIFICATION_SERVICE)
            pub const TEXT_CLASSIFICATION_SERVICE: &'static str = "textclassification";

            /// public static final [TEXT_SERVICES_MANAGER_SERVICE](https://developer.android.com/reference/android/content/Context.html#TEXT_SERVICES_MANAGER_SERVICE)
            pub const TEXT_SERVICES_MANAGER_SERVICE: &'static str = "textservices";

            /// public static final [TV_INPUT_SERVICE](https://developer.android.com/reference/android/content/Context.html#TV_INPUT_SERVICE)
            pub const TV_INPUT_SERVICE: &'static str = "tv_input";

            /// public static final [TV_INTERACTIVE_APP_SERVICE](https://developer.android.com/reference/android/content/Context.html#TV_INTERACTIVE_APP_SERVICE)
            pub const TV_INTERACTIVE_APP_SERVICE: &'static str = "tv_interactive_app";

            /// public static final [UI_MODE_SERVICE](https://developer.android.com/reference/android/content/Context.html#UI_MODE_SERVICE)
            pub const UI_MODE_SERVICE: &'static str = "uimode";

            /// public static final [USAGE_STATS_SERVICE](https://developer.android.com/reference/android/content/Context.html#USAGE_STATS_SERVICE)
            pub const USAGE_STATS_SERVICE: &'static str = "usagestats";

            /// public static final [USB_SERVICE](https://developer.android.com/reference/android/content/Context.html#USB_SERVICE)
            pub const USB_SERVICE: &'static str = "usb";

            /// public static final [USER_SERVICE](https://developer.android.com/reference/android/content/Context.html#USER_SERVICE)
            pub const USER_SERVICE: &'static str = "user";

            /// public static final [VIBRATOR_MANAGER_SERVICE](https://developer.android.com/reference/android/content/Context.html#VIBRATOR_MANAGER_SERVICE)
            pub const VIBRATOR_MANAGER_SERVICE: &'static str = "vibrator_manager";

            /// public static final [VIBRATOR_SERVICE](https://developer.android.com/reference/android/content/Context.html#VIBRATOR_SERVICE)
            #[deprecated]
            pub const VIBRATOR_SERVICE: &'static str = "vibrator";

            /// public static final [VPN_MANAGEMENT_SERVICE](https://developer.android.com/reference/android/content/Context.html#VPN_MANAGEMENT_SERVICE)
            pub const VPN_MANAGEMENT_SERVICE: &'static str = "vpn_management";

            /// public static final [WALLPAPER_SERVICE](https://developer.android.com/reference/android/content/Context.html#WALLPAPER_SERVICE)
            pub const WALLPAPER_SERVICE: &'static str = "wallpaper";

            /// public static final [WIFI_AWARE_SERVICE](https://developer.android.com/reference/android/content/Context.html#WIFI_AWARE_SERVICE)
            pub const WIFI_AWARE_SERVICE: &'static str = "wifiaware";

            /// public static final [WIFI_P2P_SERVICE](https://developer.android.com/reference/android/content/Context.html#WIFI_P2P_SERVICE)
            pub const WIFI_P2P_SERVICE: &'static str = "wifip2p";

            /// public static final [WIFI_RTT_RANGING_SERVICE](https://developer.android.com/reference/android/content/Context.html#WIFI_RTT_RANGING_SERVICE)
            pub const WIFI_RTT_RANGING_SERVICE: &'static str = "wifirtt";

            /// public static final [WIFI_SERVICE](https://developer.android.com/reference/android/content/Context.html#WIFI_SERVICE)
            pub const WIFI_SERVICE: &'static str = "wifi";

            /// public static final [WINDOW_SERVICE](https://developer.android.com/reference/android/content/Context.html#WINDOW_SERVICE)
            pub const WINDOW_SERVICE: &'static str = "window";
        }

        /// pub class [Intent](https://developer.android.com/reference/android/content/Intent.html)
        #[repr(transparent)]
        pub struct Intent(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for Intent {}

        unsafe impl ::java_spaghetti::JniType for Intent {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/content/Intent\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for Intent {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for Intent {}
        impl ::std::ops::Deref for Intent {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<super::os::Parcelable> for Intent {
            fn as_ref(&self) -> &super::os::Parcelable {
                unsafe { &*(self as *const Self as *const super::os::Parcelable) }
            }
        }
        impl Intent {
            /// [Intent](https://developer.android.com/reference/android/content/Intent.html#Intent())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/Intent\0", "<init>\0", "()V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [Intent](https://developer.android.com/reference/android/content/Intent.html#Intent(android.content.Intent))
            pub fn new_Intent<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<Intent>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Intent;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "<init>\0",
                        "(Landroid/content/Intent;)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [Intent](https://developer.android.com/reference/android/content/Intent.html#Intent(java.lang.String))
            pub fn new_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "<init>\0",
                        "(Ljava/lang/String;)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [Intent](https://developer.android.com/reference/android/content/Intent.html#Intent(android.content.Context,%20java.lang.Class))
            pub fn new_Context_Class<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<Context>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::Class>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Ljava/lang/Class;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "<init>\0",
                        "(Landroid/content/Context;Ljava/lang/Class;)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [clone](https://developer.android.com/reference/android/content/Intent.html#clone())
            pub fn clone<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::Object>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "clone", .descriptor == "()Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/Intent\0", "clone\0", "()Ljava/lang/Object;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [cloneFilter](https://developer.android.com/reference/android/content/Intent.html#cloneFilter())
            pub fn cloneFilter<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "cloneFilter", .descriptor == "()Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "cloneFilter\0",
                        "()Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [makeMainSelectorActivity](https://developer.android.com/reference/android/content/Intent.html#makeMainSelectorActivity(java.lang.String,%20java.lang.String))
            pub fn makeMainSelectorActivity<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC | STATIC, .name == "makeMainSelectorActivity", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "android/content/Intent\0",
                        "makeMainSelectorActivity\0",
                        "(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getIntent](https://developer.android.com/reference/android/content/Intent.html#getIntent(java.lang.String))
            #[deprecated]
            pub fn getIntent<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC | STATIC, .name == "getIntent", .descriptor == "(Ljava/lang/String;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "android/content/Intent\0",
                        "getIntent\0",
                        "(Ljava/lang/String;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [parseUri](https://developer.android.com/reference/android/content/Intent.html#parseUri(java.lang.String,%20int))
            pub fn parseUri<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC | STATIC, .name == "parseUri", .descriptor == "(Ljava/lang/String;I)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "android/content/Intent\0",
                        "parseUri\0",
                        "(Ljava/lang/String;I)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getIntentOld](https://developer.android.com/reference/android/content/Intent.html#getIntentOld(java.lang.String))
            pub fn getIntentOld<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC | STATIC, .name == "getIntentOld", .descriptor == "(Ljava/lang/String;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "android/content/Intent\0",
                        "getIntentOld\0",
                        "(Ljava/lang/String;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getAction](https://developer.android.com/reference/android/content/Intent.html#getAction())
            pub fn getAction<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getAction", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getAction\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDataString](https://developer.android.com/reference/android/content/Intent.html#getDataString())
            pub fn getDataString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getDataString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getDataString\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getScheme](https://developer.android.com/reference/android/content/Intent.html#getScheme())
            pub fn getScheme<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getScheme", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getScheme\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getType](https://developer.android.com/reference/android/content/Intent.html#getType())
            pub fn getType<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getType", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getType\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [resolveType](https://developer.android.com/reference/android/content/Intent.html#resolveType(android.content.Context))
            pub fn resolveType_Context<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Context>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "resolveType", .descriptor == "(Landroid/content/Context;)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "resolveType\0",
                        "(Landroid/content/Context;)Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getIdentifier](https://developer.android.com/reference/android/content/Intent.html#getIdentifier())
            pub fn getIdentifier<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getIdentifier", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getIdentifier\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hasCategory](https://developer.android.com/reference/android/content/Intent.html#hasCategory(java.lang.String))
            pub fn hasCategory<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "hasCategory", .descriptor == "(Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "hasCategory\0",
                        "(Ljava/lang/String;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCategories](https://developer.android.com/reference/android/content/Intent.html#getCategories())
            pub fn getCategories<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::Set>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getCategories", .descriptor == "()Ljava/util/Set;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getCategories\0",
                        "()Ljava/util/Set;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getSelector](https://developer.android.com/reference/android/content/Intent.html#getSelector())
            pub fn getSelector<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getSelector", .descriptor == "()Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getSelector\0",
                        "()Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setExtrasClassLoader](https://developer.android.com/reference/android/content/Intent.html#setExtrasClassLoader(java.lang.ClassLoader))
            pub fn setExtrasClassLoader<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::ClassLoader>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "setExtrasClassLoader", .descriptor == "(Ljava/lang/ClassLoader;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "setExtrasClassLoader\0",
                        "(Ljava/lang/ClassLoader;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hasExtra](https://developer.android.com/reference/android/content/Intent.html#hasExtra(java.lang.String))
            pub fn hasExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "hasExtra", .descriptor == "(Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "hasExtra\0",
                        "(Ljava/lang/String;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hasFileDescriptors](https://developer.android.com/reference/android/content/Intent.html#hasFileDescriptors())
            pub fn hasFileDescriptors<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "hasFileDescriptors", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/Intent\0", "hasFileDescriptors\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getBooleanExtra](https://developer.android.com/reference/android/content/Intent.html#getBooleanExtra(java.lang.String,%20boolean))
            pub fn getBooleanExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: bool,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getBooleanExtra", .descriptor == "(Ljava/lang/String;Z)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getBooleanExtra\0",
                        "(Ljava/lang/String;Z)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getByteExtra](https://developer.android.com/reference/android/content/Intent.html#getByteExtra(java.lang.String,%20byte))
            pub fn getByteExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i8,
            ) -> ::std::result::Result<i8, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getByteExtra", .descriptor == "(Ljava/lang/String;B)B"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getByteExtra\0",
                        "(Ljava/lang/String;B)B\0",
                    );
                    __jni_env.call_byte_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getShortExtra](https://developer.android.com/reference/android/content/Intent.html#getShortExtra(java.lang.String,%20short))
            pub fn getShortExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i16,
            ) -> ::std::result::Result<i16, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getShortExtra", .descriptor == "(Ljava/lang/String;S)S"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getShortExtra\0",
                        "(Ljava/lang/String;S)S\0",
                    );
                    __jni_env.call_short_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCharExtra](https://developer.android.com/reference/android/content/Intent.html#getCharExtra(java.lang.String,%20char))
            pub fn getCharExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: u16,
            ) -> ::std::result::Result<u16, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getCharExtra", .descriptor == "(Ljava/lang/String;C)C"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getCharExtra\0",
                        "(Ljava/lang/String;C)C\0",
                    );
                    __jni_env.call_char_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getIntExtra](https://developer.android.com/reference/android/content/Intent.html#getIntExtra(java.lang.String,%20int))
            pub fn getIntExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getIntExtra", .descriptor == "(Ljava/lang/String;I)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getIntExtra\0",
                        "(Ljava/lang/String;I)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getLongExtra](https://developer.android.com/reference/android/content/Intent.html#getLongExtra(java.lang.String,%20long))
            pub fn getLongExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i64,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getLongExtra", .descriptor == "(Ljava/lang/String;J)J"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getLongExtra\0",
                        "(Ljava/lang/String;J)J\0",
                    );
                    __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getFloatExtra](https://developer.android.com/reference/android/content/Intent.html#getFloatExtra(java.lang.String,%20float))
            pub fn getFloatExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: f32,
            ) -> ::std::result::Result<f32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getFloatExtra", .descriptor == "(Ljava/lang/String;F)F"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getFloatExtra\0",
                        "(Ljava/lang/String;F)F\0",
                    );
                    __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDoubleExtra](https://developer.android.com/reference/android/content/Intent.html#getDoubleExtra(java.lang.String,%20double))
            pub fn getDoubleExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: f64,
            ) -> ::std::result::Result<f64, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getDoubleExtra", .descriptor == "(Ljava/lang/String;D)D"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getDoubleExtra\0",
                        "(Ljava/lang/String;D)D\0",
                    );
                    __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getStringExtra](https://developer.android.com/reference/android/content/Intent.html#getStringExtra(java.lang.String))
            pub fn getStringExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getStringExtra", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getStringExtra\0",
                        "(Ljava/lang/String;)Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getParcelableExtra](https://developer.android.com/reference/android/content/Intent.html#getParcelableExtra(java.lang.String))
            #[deprecated]
            pub fn getParcelableExtra_String<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::os::Parcelable>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getParcelableExtra", .descriptor == "(Ljava/lang/String;)Landroid/os/Parcelable;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getParcelableExtra\0",
                        "(Ljava/lang/String;)Landroid/os/Parcelable;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getParcelableExtra](https://developer.android.com/reference/android/content/Intent.html#getParcelableExtra(java.lang.String,%20java.lang.Class))
            pub fn getParcelableExtra_String_Class<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::Class>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::Object>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getParcelableExtra", .descriptor == "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getParcelableExtra\0",
                        "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getParcelableArrayExtra](https://developer.android.com/reference/android/content/Intent.html#getParcelableArrayExtra(java.lang.String))
            #[deprecated]
            pub fn getParcelableArrayExtra_String<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::os::Parcelable, super::super::java::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getParcelableArrayExtra", .descriptor == "(Ljava/lang/String;)[Landroid/os/Parcelable;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getParcelableArrayExtra\0",
                        "(Ljava/lang/String;)[Landroid/os/Parcelable;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getParcelableArrayExtra](https://developer.android.com/reference/android/content/Intent.html#getParcelableArrayExtra(java.lang.String,%20java.lang.Class))
            pub fn getParcelableArrayExtra_String_Class<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::Class>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<
                            super::super::java::lang::Object,
                            super::super::java::lang::Throwable,
                        >,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getParcelableArrayExtra", .descriptor == "(Ljava/lang/String;Ljava/lang/Class;)[Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getParcelableArrayExtra\0",
                        "(Ljava/lang/String;Ljava/lang/Class;)[Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getParcelableArrayListExtra](https://developer.android.com/reference/android/content/Intent.html#getParcelableArrayListExtra(java.lang.String))
            #[deprecated]
            pub fn getParcelableArrayListExtra_String<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::ArrayList>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getParcelableArrayListExtra", .descriptor == "(Ljava/lang/String;)Ljava/util/ArrayList;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getParcelableArrayListExtra\0",
                        "(Ljava/lang/String;)Ljava/util/ArrayList;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getParcelableArrayListExtra](https://developer.android.com/reference/android/content/Intent.html#getParcelableArrayListExtra(java.lang.String,%20java.lang.Class))
            pub fn getParcelableArrayListExtra_String_Class<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::Class>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::ArrayList>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getParcelableArrayListExtra", .descriptor == "(Ljava/lang/String;Ljava/lang/Class;)Ljava/util/ArrayList;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getParcelableArrayListExtra\0",
                        "(Ljava/lang/String;Ljava/lang/Class;)Ljava/util/ArrayList;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getIntegerArrayListExtra](https://developer.android.com/reference/android/content/Intent.html#getIntegerArrayListExtra(java.lang.String))
            pub fn getIntegerArrayListExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::ArrayList>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getIntegerArrayListExtra", .descriptor == "(Ljava/lang/String;)Ljava/util/ArrayList;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getIntegerArrayListExtra\0",
                        "(Ljava/lang/String;)Ljava/util/ArrayList;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getStringArrayListExtra](https://developer.android.com/reference/android/content/Intent.html#getStringArrayListExtra(java.lang.String))
            pub fn getStringArrayListExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::ArrayList>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getStringArrayListExtra", .descriptor == "(Ljava/lang/String;)Ljava/util/ArrayList;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getStringArrayListExtra\0",
                        "(Ljava/lang/String;)Ljava/util/ArrayList;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCharSequenceArrayListExtra](https://developer.android.com/reference/android/content/Intent.html#getCharSequenceArrayListExtra(java.lang.String))
            pub fn getCharSequenceArrayListExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::ArrayList>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getCharSequenceArrayListExtra", .descriptor == "(Ljava/lang/String;)Ljava/util/ArrayList;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getCharSequenceArrayListExtra\0",
                        "(Ljava/lang/String;)Ljava/util/ArrayList;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getBooleanArrayExtra](https://developer.android.com/reference/android/content/Intent.html#getBooleanArrayExtra(java.lang.String))
            pub fn getBooleanArrayExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::BooleanArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getBooleanArrayExtra", .descriptor == "(Ljava/lang/String;)[Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getBooleanArrayExtra\0",
                        "(Ljava/lang/String;)[Z\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getByteArrayExtra](https://developer.android.com/reference/android/content/Intent.html#getByteArrayExtra(java.lang.String))
            pub fn getByteArrayExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getByteArrayExtra", .descriptor == "(Ljava/lang/String;)[B"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getByteArrayExtra\0",
                        "(Ljava/lang/String;)[B\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getShortArrayExtra](https://developer.android.com/reference/android/content/Intent.html#getShortArrayExtra(java.lang.String))
            pub fn getShortArrayExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ShortArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getShortArrayExtra", .descriptor == "(Ljava/lang/String;)[S"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getShortArrayExtra\0",
                        "(Ljava/lang/String;)[S\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCharArrayExtra](https://developer.android.com/reference/android/content/Intent.html#getCharArrayExtra(java.lang.String))
            pub fn getCharArrayExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::CharArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getCharArrayExtra", .descriptor == "(Ljava/lang/String;)[C"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getCharArrayExtra\0",
                        "(Ljava/lang/String;)[C\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getIntArrayExtra](https://developer.android.com/reference/android/content/Intent.html#getIntArrayExtra(java.lang.String))
            pub fn getIntArrayExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::IntArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getIntArrayExtra", .descriptor == "(Ljava/lang/String;)[I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getIntArrayExtra\0",
                        "(Ljava/lang/String;)[I\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getLongArrayExtra](https://developer.android.com/reference/android/content/Intent.html#getLongArrayExtra(java.lang.String))
            pub fn getLongArrayExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::LongArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getLongArrayExtra", .descriptor == "(Ljava/lang/String;)[J"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getLongArrayExtra\0",
                        "(Ljava/lang/String;)[J\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getFloatArrayExtra](https://developer.android.com/reference/android/content/Intent.html#getFloatArrayExtra(java.lang.String))
            pub fn getFloatArrayExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::FloatArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getFloatArrayExtra", .descriptor == "(Ljava/lang/String;)[F"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getFloatArrayExtra\0",
                        "(Ljava/lang/String;)[F\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDoubleArrayExtra](https://developer.android.com/reference/android/content/Intent.html#getDoubleArrayExtra(java.lang.String))
            pub fn getDoubleArrayExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::DoubleArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getDoubleArrayExtra", .descriptor == "(Ljava/lang/String;)[D"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getDoubleArrayExtra\0",
                        "(Ljava/lang/String;)[D\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getStringArrayExtra](https://developer.android.com/reference/android/content/Intent.html#getStringArrayExtra(java.lang.String))
            pub fn getStringArrayExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<
                            super::super::java::lang::String,
                            super::super::java::lang::Throwable,
                        >,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getStringArrayExtra", .descriptor == "(Ljava/lang/String;)[Ljava/lang/String;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getStringArrayExtra\0",
                        "(Ljava/lang/String;)[Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getFlags](https://developer.android.com/reference/android/content/Intent.html#getFlags())
            pub fn getFlags<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getFlags", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/Intent\0", "getFlags\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getPackage](https://developer.android.com/reference/android/content/Intent.html#getPackage())
            pub fn getPackage<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "getPackage", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "getPackage\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setAction](https://developer.android.com/reference/android/content/Intent.html#setAction(java.lang.String))
            pub fn setAction<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "setAction", .descriptor == "(Ljava/lang/String;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "setAction\0",
                        "(Ljava/lang/String;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setType](https://developer.android.com/reference/android/content/Intent.html#setType(java.lang.String))
            pub fn setType<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "setType", .descriptor == "(Ljava/lang/String;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "setType\0",
                        "(Ljava/lang/String;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setTypeAndNormalize](https://developer.android.com/reference/android/content/Intent.html#setTypeAndNormalize(java.lang.String))
            pub fn setTypeAndNormalize<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "setTypeAndNormalize", .descriptor == "(Ljava/lang/String;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "setTypeAndNormalize\0",
                        "(Ljava/lang/String;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setIdentifier](https://developer.android.com/reference/android/content/Intent.html#setIdentifier(java.lang.String))
            pub fn setIdentifier<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "setIdentifier", .descriptor == "(Ljava/lang/String;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "setIdentifier\0",
                        "(Ljava/lang/String;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [addCategory](https://developer.android.com/reference/android/content/Intent.html#addCategory(java.lang.String))
            pub fn addCategory<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "addCategory", .descriptor == "(Ljava/lang/String;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "addCategory\0",
                        "(Ljava/lang/String;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [removeCategory](https://developer.android.com/reference/android/content/Intent.html#removeCategory(java.lang.String))
            pub fn removeCategory<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "removeCategory", .descriptor == "(Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "removeCategory\0",
                        "(Ljava/lang/String;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setSelector](https://developer.android.com/reference/android/content/Intent.html#setSelector(android.content.Intent))
            pub fn setSelector<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Intent>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "setSelector", .descriptor == "(Landroid/content/Intent;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "setSelector\0",
                        "(Landroid/content/Intent;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtra](https://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20boolean))
            pub fn putExtra_String_boolean<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: bool,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtra", .descriptor == "(Ljava/lang/String;Z)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtra\0",
                        "(Ljava/lang/String;Z)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtra](https://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20byte))
            pub fn putExtra_String_byte<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i8,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtra", .descriptor == "(Ljava/lang/String;B)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtra\0",
                        "(Ljava/lang/String;B)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtra](https://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20char))
            pub fn putExtra_String_char<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: u16,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtra", .descriptor == "(Ljava/lang/String;C)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtra\0",
                        "(Ljava/lang/String;C)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtra](https://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20short))
            pub fn putExtra_String_short<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i16,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtra", .descriptor == "(Ljava/lang/String;S)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtra\0",
                        "(Ljava/lang/String;S)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtra](https://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20int))
            pub fn putExtra_String_int<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtra", .descriptor == "(Ljava/lang/String;I)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtra\0",
                        "(Ljava/lang/String;I)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtra](https://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20long))
            pub fn putExtra_String_long<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i64,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtra", .descriptor == "(Ljava/lang/String;J)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtra\0",
                        "(Ljava/lang/String;J)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtra](https://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20float))
            pub fn putExtra_String_float<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: f32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtra", .descriptor == "(Ljava/lang/String;F)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtra\0",
                        "(Ljava/lang/String;F)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtra](https://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20double))
            pub fn putExtra_String_double<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: f64,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtra", .descriptor == "(Ljava/lang/String;D)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtra\0",
                        "(Ljava/lang/String;D)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtra](https://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20java.lang.String))
            pub fn putExtra_String_String<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtra", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtra\0",
                        "(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtra](https://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20android.os.Parcelable))
            pub fn putExtra_String_Parcelable<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::os::Parcelable>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtra", .descriptor == "(Ljava/lang/String;Landroid/os/Parcelable;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtra\0",
                        "(Ljava/lang/String;Landroid/os/Parcelable;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtra](https://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20android.os.Parcelable%5B%5D))
            pub fn putExtra_String_Parcelable_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<super::os::Parcelable, super::super::java::lang::Throwable>,
                >,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtra", .descriptor == "(Ljava/lang/String;[Landroid/os/Parcelable;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtra\0",
                        "(Ljava/lang/String;[Landroid/os/Parcelable;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putParcelableArrayListExtra](https://developer.android.com/reference/android/content/Intent.html#putParcelableArrayListExtra(java.lang.String,%20java.util.ArrayList))
            pub fn putParcelableArrayListExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::util::ArrayList>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putParcelableArrayListExtra", .descriptor == "(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putParcelableArrayListExtra\0",
                        "(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putIntegerArrayListExtra](https://developer.android.com/reference/android/content/Intent.html#putIntegerArrayListExtra(java.lang.String,%20java.util.ArrayList))
            pub fn putIntegerArrayListExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::util::ArrayList>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putIntegerArrayListExtra", .descriptor == "(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putIntegerArrayListExtra\0",
                        "(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putStringArrayListExtra](https://developer.android.com/reference/android/content/Intent.html#putStringArrayListExtra(java.lang.String,%20java.util.ArrayList))
            pub fn putStringArrayListExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::util::ArrayList>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putStringArrayListExtra", .descriptor == "(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putStringArrayListExtra\0",
                        "(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putCharSequenceArrayListExtra](https://developer.android.com/reference/android/content/Intent.html#putCharSequenceArrayListExtra(java.lang.String,%20java.util.ArrayList))
            pub fn putCharSequenceArrayListExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::util::ArrayList>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putCharSequenceArrayListExtra", .descriptor == "(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putCharSequenceArrayListExtra\0",
                        "(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtra](https://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20bool%5B%5D))
            pub fn putExtra_String_boolean_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::BooleanArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtra", .descriptor == "(Ljava/lang/String;[Z)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtra\0",
                        "(Ljava/lang/String;[Z)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtra](https://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20byte%5B%5D))
            pub fn putExtra_String_byte_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtra", .descriptor == "(Ljava/lang/String;[B)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtra\0",
                        "(Ljava/lang/String;[B)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtra](https://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20short%5B%5D))
            pub fn putExtra_String_short_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ShortArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtra", .descriptor == "(Ljava/lang/String;[S)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtra\0",
                        "(Ljava/lang/String;[S)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtra](https://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20char%5B%5D))
            pub fn putExtra_String_char_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtra", .descriptor == "(Ljava/lang/String;[C)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtra\0",
                        "(Ljava/lang/String;[C)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtra](https://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20int%5B%5D))
            pub fn putExtra_String_int_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtra", .descriptor == "(Ljava/lang/String;[I)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtra\0",
                        "(Ljava/lang/String;[I)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtra](https://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20long%5B%5D))
            pub fn putExtra_String_long_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::LongArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtra", .descriptor == "(Ljava/lang/String;[J)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtra\0",
                        "(Ljava/lang/String;[J)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtra](https://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20float%5B%5D))
            pub fn putExtra_String_float_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::FloatArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtra", .descriptor == "(Ljava/lang/String;[F)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtra\0",
                        "(Ljava/lang/String;[F)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtra](https://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20double%5B%5D))
            pub fn putExtra_String_double_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::DoubleArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtra", .descriptor == "(Ljava/lang/String;[D)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtra\0",
                        "(Ljava/lang/String;[D)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtra](https://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20java.lang.String%5B%5D))
            pub fn putExtra_String_String_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<
                        super::super::java::lang::String,
                        super::super::java::lang::Throwable,
                    >,
                >,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtra", .descriptor == "(Ljava/lang/String;[Ljava/lang/String;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtra\0",
                        "(Ljava/lang/String;[Ljava/lang/String;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putExtras](https://developer.android.com/reference/android/content/Intent.html#putExtras(android.content.Intent))
            pub fn putExtras_Intent<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Intent>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "putExtras", .descriptor == "(Landroid/content/Intent;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "putExtras\0",
                        "(Landroid/content/Intent;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [replaceExtras](https://developer.android.com/reference/android/content/Intent.html#replaceExtras(android.content.Intent))
            pub fn replaceExtras_Intent<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Intent>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "replaceExtras", .descriptor == "(Landroid/content/Intent;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "replaceExtras\0",
                        "(Landroid/content/Intent;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [removeExtra](https://developer.android.com/reference/android/content/Intent.html#removeExtra(java.lang.String))
            pub fn removeExtra<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "removeExtra", .descriptor == "(Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "removeExtra\0",
                        "(Ljava/lang/String;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setFlags](https://developer.android.com/reference/android/content/Intent.html#setFlags(int))
            pub fn setFlags<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "setFlags", .descriptor == "(I)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "setFlags\0",
                        "(I)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [addFlags](https://developer.android.com/reference/android/content/Intent.html#addFlags(int))
            pub fn addFlags<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "addFlags", .descriptor == "(I)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "addFlags\0",
                        "(I)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [removeFlags](https://developer.android.com/reference/android/content/Intent.html#removeFlags(int))
            pub fn removeFlags<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "removeFlags", .descriptor == "(I)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/Intent\0", "removeFlags\0", "(I)V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setPackage](https://developer.android.com/reference/android/content/Intent.html#setPackage(java.lang.String))
            pub fn setPackage<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "setPackage", .descriptor == "(Ljava/lang/String;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "setPackage\0",
                        "(Ljava/lang/String;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setClassName](https://developer.android.com/reference/android/content/Intent.html#setClassName(android.content.Context,%20java.lang.String))
            pub fn setClassName_Context_String<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Context>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "setClassName", .descriptor == "(Landroid/content/Context;Ljava/lang/String;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "setClassName\0",
                        "(Landroid/content/Context;Ljava/lang/String;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setClassName](https://developer.android.com/reference/android/content/Intent.html#setClassName(java.lang.String,%20java.lang.String))
            pub fn setClassName_String_String<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "setClassName", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "setClassName\0",
                        "(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setClass](https://developer.android.com/reference/android/content/Intent.html#setClass(android.content.Context,%20java.lang.Class))
            pub fn setClass<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Context>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::Class>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Intent>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "setClass", .descriptor == "(Landroid/content/Context;Ljava/lang/Class;)Landroid/content/Intent;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "setClass\0",
                        "(Landroid/content/Context;Ljava/lang/Class;)Landroid/content/Intent;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [fillIn](https://developer.android.com/reference/android/content/Intent.html#fillIn(android.content.Intent,%20int))
            pub fn fillIn<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Intent>,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "fillIn", .descriptor == "(Landroid/content/Intent;I)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "fillIn\0",
                        "(Landroid/content/Intent;I)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [filterEquals](https://developer.android.com/reference/android/content/Intent.html#filterEquals(android.content.Intent))
            pub fn filterEquals<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Intent>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "filterEquals", .descriptor == "(Landroid/content/Intent;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "filterEquals\0",
                        "(Landroid/content/Intent;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [filterHashCode](https://developer.android.com/reference/android/content/Intent.html#filterHashCode())
            pub fn filterHashCode<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "filterHashCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/Intent\0", "filterHashCode\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toString](https://developer.android.com/reference/android/content/Intent.html#toString())
            pub fn toString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "toString\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toURI](https://developer.android.com/reference/android/content/Intent.html#toURI())
            #[deprecated]
            pub fn toURI<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "toURI", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/Intent\0", "toURI\0", "()Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toUri](https://developer.android.com/reference/android/content/Intent.html#toUri(int))
            pub fn toUri<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "toUri", .descriptor == "(I)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/Intent\0",
                        "toUri\0",
                        "(I)Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [describeContents](https://developer.android.com/reference/android/content/Intent.html#describeContents())
            pub fn describeContents<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/Intent", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/Intent\0", "describeContents\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [normalizeMimeType](https://developer.android.com/reference/android/content/Intent.html#normalizeMimeType(java.lang.String))
            pub fn normalizeMimeType<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/Intent", java.flags == PUBLIC | STATIC, .name == "normalizeMimeType", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "android/content/Intent\0",
                        "normalizeMimeType\0",
                        "(Ljava/lang/String;)Ljava/lang/String;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [ACTION_AIRPLANE_MODE_CHANGED](https://developer.android.com/reference/android/content/Intent.html#ACTION_AIRPLANE_MODE_CHANGED)
            pub const ACTION_AIRPLANE_MODE_CHANGED: &'static str = "android.intent.action.AIRPLANE_MODE";

            /// public static final [ACTION_ALL_APPS](https://developer.android.com/reference/android/content/Intent.html#ACTION_ALL_APPS)
            pub const ACTION_ALL_APPS: &'static str = "android.intent.action.ALL_APPS";

            /// public static final [ACTION_ANSWER](https://developer.android.com/reference/android/content/Intent.html#ACTION_ANSWER)
            pub const ACTION_ANSWER: &'static str = "android.intent.action.ANSWER";

            /// public static final [ACTION_APPLICATION_LOCALE_CHANGED](https://developer.android.com/reference/android/content/Intent.html#ACTION_APPLICATION_LOCALE_CHANGED)
            pub const ACTION_APPLICATION_LOCALE_CHANGED: &'static str =
                "android.intent.action.APPLICATION_LOCALE_CHANGED";

            /// public static final [ACTION_APPLICATION_PREFERENCES](https://developer.android.com/reference/android/content/Intent.html#ACTION_APPLICATION_PREFERENCES)
            pub const ACTION_APPLICATION_PREFERENCES: &'static str = "android.intent.action.APPLICATION_PREFERENCES";

            /// public static final [ACTION_APPLICATION_RESTRICTIONS_CHANGED](https://developer.android.com/reference/android/content/Intent.html#ACTION_APPLICATION_RESTRICTIONS_CHANGED)
            pub const ACTION_APPLICATION_RESTRICTIONS_CHANGED: &'static str =
                "android.intent.action.APPLICATION_RESTRICTIONS_CHANGED";

            /// public static final [ACTION_APP_ERROR](https://developer.android.com/reference/android/content/Intent.html#ACTION_APP_ERROR)
            pub const ACTION_APP_ERROR: &'static str = "android.intent.action.APP_ERROR";

            /// public static final [ACTION_ASSIST](https://developer.android.com/reference/android/content/Intent.html#ACTION_ASSIST)
            pub const ACTION_ASSIST: &'static str = "android.intent.action.ASSIST";

            /// public static final [ACTION_ATTACH_DATA](https://developer.android.com/reference/android/content/Intent.html#ACTION_ATTACH_DATA)
            pub const ACTION_ATTACH_DATA: &'static str = "android.intent.action.ATTACH_DATA";

            /// public static final [ACTION_AUTO_REVOKE_PERMISSIONS](https://developer.android.com/reference/android/content/Intent.html#ACTION_AUTO_REVOKE_PERMISSIONS)
            pub const ACTION_AUTO_REVOKE_PERMISSIONS: &'static str = "android.intent.action.AUTO_REVOKE_PERMISSIONS";

            /// public static final [ACTION_BATTERY_CHANGED](https://developer.android.com/reference/android/content/Intent.html#ACTION_BATTERY_CHANGED)
            pub const ACTION_BATTERY_CHANGED: &'static str = "android.intent.action.BATTERY_CHANGED";

            /// public static final [ACTION_BATTERY_LOW](https://developer.android.com/reference/android/content/Intent.html#ACTION_BATTERY_LOW)
            pub const ACTION_BATTERY_LOW: &'static str = "android.intent.action.BATTERY_LOW";

            /// public static final [ACTION_BATTERY_OKAY](https://developer.android.com/reference/android/content/Intent.html#ACTION_BATTERY_OKAY)
            pub const ACTION_BATTERY_OKAY: &'static str = "android.intent.action.BATTERY_OKAY";

            /// public static final [ACTION_BOOT_COMPLETED](https://developer.android.com/reference/android/content/Intent.html#ACTION_BOOT_COMPLETED)
            pub const ACTION_BOOT_COMPLETED: &'static str = "android.intent.action.BOOT_COMPLETED";

            /// public static final [ACTION_BUG_REPORT](https://developer.android.com/reference/android/content/Intent.html#ACTION_BUG_REPORT)
            pub const ACTION_BUG_REPORT: &'static str = "android.intent.action.BUG_REPORT";

            /// public static final [ACTION_CALL](https://developer.android.com/reference/android/content/Intent.html#ACTION_CALL)
            pub const ACTION_CALL: &'static str = "android.intent.action.CALL";

            /// public static final [ACTION_CALL_BUTTON](https://developer.android.com/reference/android/content/Intent.html#ACTION_CALL_BUTTON)
            pub const ACTION_CALL_BUTTON: &'static str = "android.intent.action.CALL_BUTTON";

            /// public static final [ACTION_CAMERA_BUTTON](https://developer.android.com/reference/android/content/Intent.html#ACTION_CAMERA_BUTTON)
            pub const ACTION_CAMERA_BUTTON: &'static str = "android.intent.action.CAMERA_BUTTON";

            /// public static final [ACTION_CARRIER_SETUP](https://developer.android.com/reference/android/content/Intent.html#ACTION_CARRIER_SETUP)
            pub const ACTION_CARRIER_SETUP: &'static str = "android.intent.action.CARRIER_SETUP";

            /// public static final [ACTION_CHOOSER](https://developer.android.com/reference/android/content/Intent.html#ACTION_CHOOSER)
            pub const ACTION_CHOOSER: &'static str = "android.intent.action.CHOOSER";

            /// public static final [ACTION_CLOSE_SYSTEM_DIALOGS](https://developer.android.com/reference/android/content/Intent.html#ACTION_CLOSE_SYSTEM_DIALOGS)
            #[deprecated]
            pub const ACTION_CLOSE_SYSTEM_DIALOGS: &'static str = "android.intent.action.CLOSE_SYSTEM_DIALOGS";

            /// public static final [ACTION_CONFIGURATION_CHANGED](https://developer.android.com/reference/android/content/Intent.html#ACTION_CONFIGURATION_CHANGED)
            pub const ACTION_CONFIGURATION_CHANGED: &'static str = "android.intent.action.CONFIGURATION_CHANGED";

            /// public static final [ACTION_CREATE_DOCUMENT](https://developer.android.com/reference/android/content/Intent.html#ACTION_CREATE_DOCUMENT)
            pub const ACTION_CREATE_DOCUMENT: &'static str = "android.intent.action.CREATE_DOCUMENT";

            /// public static final [ACTION_CREATE_REMINDER](https://developer.android.com/reference/android/content/Intent.html#ACTION_CREATE_REMINDER)
            pub const ACTION_CREATE_REMINDER: &'static str = "android.intent.action.CREATE_REMINDER";

            /// public static final [ACTION_CREATE_SHORTCUT](https://developer.android.com/reference/android/content/Intent.html#ACTION_CREATE_SHORTCUT)
            pub const ACTION_CREATE_SHORTCUT: &'static str = "android.intent.action.CREATE_SHORTCUT";

            /// public static final [ACTION_DATE_CHANGED](https://developer.android.com/reference/android/content/Intent.html#ACTION_DATE_CHANGED)
            pub const ACTION_DATE_CHANGED: &'static str = "android.intent.action.DATE_CHANGED";

            /// public static final [ACTION_DEFAULT](https://developer.android.com/reference/android/content/Intent.html#ACTION_DEFAULT)
            pub const ACTION_DEFAULT: &'static str = "android.intent.action.VIEW";

            /// public static final [ACTION_DEFINE](https://developer.android.com/reference/android/content/Intent.html#ACTION_DEFINE)
            pub const ACTION_DEFINE: &'static str = "android.intent.action.DEFINE";

            /// public static final [ACTION_DELETE](https://developer.android.com/reference/android/content/Intent.html#ACTION_DELETE)
            pub const ACTION_DELETE: &'static str = "android.intent.action.DELETE";

            /// public static final [ACTION_DEVICE_STORAGE_LOW](https://developer.android.com/reference/android/content/Intent.html#ACTION_DEVICE_STORAGE_LOW)
            #[deprecated]
            pub const ACTION_DEVICE_STORAGE_LOW: &'static str = "android.intent.action.DEVICE_STORAGE_LOW";

            /// public static final [ACTION_DEVICE_STORAGE_OK](https://developer.android.com/reference/android/content/Intent.html#ACTION_DEVICE_STORAGE_OK)
            #[deprecated]
            pub const ACTION_DEVICE_STORAGE_OK: &'static str = "android.intent.action.DEVICE_STORAGE_OK";

            /// public static final [ACTION_DIAL](https://developer.android.com/reference/android/content/Intent.html#ACTION_DIAL)
            pub const ACTION_DIAL: &'static str = "android.intent.action.DIAL";

            /// public static final [ACTION_DOCK_EVENT](https://developer.android.com/reference/android/content/Intent.html#ACTION_DOCK_EVENT)
            pub const ACTION_DOCK_EVENT: &'static str = "android.intent.action.DOCK_EVENT";

            /// public static final [ACTION_DREAMING_STARTED](https://developer.android.com/reference/android/content/Intent.html#ACTION_DREAMING_STARTED)
            pub const ACTION_DREAMING_STARTED: &'static str = "android.intent.action.DREAMING_STARTED";

            /// public static final [ACTION_DREAMING_STOPPED](https://developer.android.com/reference/android/content/Intent.html#ACTION_DREAMING_STOPPED)
            pub const ACTION_DREAMING_STOPPED: &'static str = "android.intent.action.DREAMING_STOPPED";

            /// public static final [ACTION_EDIT](https://developer.android.com/reference/android/content/Intent.html#ACTION_EDIT)
            pub const ACTION_EDIT: &'static str = "android.intent.action.EDIT";

            /// public static final [ACTION_EXTERNAL_APPLICATIONS_AVAILABLE](https://developer.android.com/reference/android/content/Intent.html#ACTION_EXTERNAL_APPLICATIONS_AVAILABLE)
            pub const ACTION_EXTERNAL_APPLICATIONS_AVAILABLE: &'static str =
                "android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE";

            /// public static final [ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE](https://developer.android.com/reference/android/content/Intent.html#ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE)
            pub const ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE: &'static str =
                "android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE";

            /// public static final [ACTION_FACTORY_TEST](https://developer.android.com/reference/android/content/Intent.html#ACTION_FACTORY_TEST)
            pub const ACTION_FACTORY_TEST: &'static str = "android.intent.action.FACTORY_TEST";

            /// public static final [ACTION_GET_CONTENT](https://developer.android.com/reference/android/content/Intent.html#ACTION_GET_CONTENT)
            pub const ACTION_GET_CONTENT: &'static str = "android.intent.action.GET_CONTENT";

            /// public static final [ACTION_GET_RESTRICTION_ENTRIES](https://developer.android.com/reference/android/content/Intent.html#ACTION_GET_RESTRICTION_ENTRIES)
            pub const ACTION_GET_RESTRICTION_ENTRIES: &'static str = "android.intent.action.GET_RESTRICTION_ENTRIES";

            /// public static final [ACTION_GTALK_SERVICE_CONNECTED](https://developer.android.com/reference/android/content/Intent.html#ACTION_GTALK_SERVICE_CONNECTED)
            pub const ACTION_GTALK_SERVICE_CONNECTED: &'static str = "android.intent.action.GTALK_CONNECTED";

            /// public static final [ACTION_GTALK_SERVICE_DISCONNECTED](https://developer.android.com/reference/android/content/Intent.html#ACTION_GTALK_SERVICE_DISCONNECTED)
            pub const ACTION_GTALK_SERVICE_DISCONNECTED: &'static str = "android.intent.action.GTALK_DISCONNECTED";

            /// public static final [ACTION_HEADSET_PLUG](https://developer.android.com/reference/android/content/Intent.html#ACTION_HEADSET_PLUG)
            pub const ACTION_HEADSET_PLUG: &'static str = "android.intent.action.HEADSET_PLUG";

            /// public static final [ACTION_INPUT_METHOD_CHANGED](https://developer.android.com/reference/android/content/Intent.html#ACTION_INPUT_METHOD_CHANGED)
            pub const ACTION_INPUT_METHOD_CHANGED: &'static str = "android.intent.action.INPUT_METHOD_CHANGED";

            /// public static final [ACTION_INSERT](https://developer.android.com/reference/android/content/Intent.html#ACTION_INSERT)
            pub const ACTION_INSERT: &'static str = "android.intent.action.INSERT";

            /// public static final [ACTION_INSERT_OR_EDIT](https://developer.android.com/reference/android/content/Intent.html#ACTION_INSERT_OR_EDIT)
            pub const ACTION_INSERT_OR_EDIT: &'static str = "android.intent.action.INSERT_OR_EDIT";

            /// public static final [ACTION_INSTALL_FAILURE](https://developer.android.com/reference/android/content/Intent.html#ACTION_INSTALL_FAILURE)
            pub const ACTION_INSTALL_FAILURE: &'static str = "android.intent.action.INSTALL_FAILURE";

            /// public static final [ACTION_INSTALL_PACKAGE](https://developer.android.com/reference/android/content/Intent.html#ACTION_INSTALL_PACKAGE)
            #[deprecated]
            pub const ACTION_INSTALL_PACKAGE: &'static str = "android.intent.action.INSTALL_PACKAGE";

            /// public static final [ACTION_LOCALE_CHANGED](https://developer.android.com/reference/android/content/Intent.html#ACTION_LOCALE_CHANGED)
            pub const ACTION_LOCALE_CHANGED: &'static str = "android.intent.action.LOCALE_CHANGED";

            /// public static final [ACTION_LOCKED_BOOT_COMPLETED](https://developer.android.com/reference/android/content/Intent.html#ACTION_LOCKED_BOOT_COMPLETED)
            pub const ACTION_LOCKED_BOOT_COMPLETED: &'static str = "android.intent.action.LOCKED_BOOT_COMPLETED";

            /// public static final [ACTION_MAIN](https://developer.android.com/reference/android/content/Intent.html#ACTION_MAIN)
            pub const ACTION_MAIN: &'static str = "android.intent.action.MAIN";

            /// public static final [ACTION_MANAGED_PROFILE_ADDED](https://developer.android.com/reference/android/content/Intent.html#ACTION_MANAGED_PROFILE_ADDED)
            pub const ACTION_MANAGED_PROFILE_ADDED: &'static str = "android.intent.action.MANAGED_PROFILE_ADDED";

            /// public static final [ACTION_MANAGED_PROFILE_AVAILABLE](https://developer.android.com/reference/android/content/Intent.html#ACTION_MANAGED_PROFILE_AVAILABLE)
            pub const ACTION_MANAGED_PROFILE_AVAILABLE: &'static str =
                "android.intent.action.MANAGED_PROFILE_AVAILABLE";

            /// public static final [ACTION_MANAGED_PROFILE_REMOVED](https://developer.android.com/reference/android/content/Intent.html#ACTION_MANAGED_PROFILE_REMOVED)
            pub const ACTION_MANAGED_PROFILE_REMOVED: &'static str = "android.intent.action.MANAGED_PROFILE_REMOVED";

            /// public static final [ACTION_MANAGED_PROFILE_UNAVAILABLE](https://developer.android.com/reference/android/content/Intent.html#ACTION_MANAGED_PROFILE_UNAVAILABLE)
            pub const ACTION_MANAGED_PROFILE_UNAVAILABLE: &'static str =
                "android.intent.action.MANAGED_PROFILE_UNAVAILABLE";

            /// public static final [ACTION_MANAGED_PROFILE_UNLOCKED](https://developer.android.com/reference/android/content/Intent.html#ACTION_MANAGED_PROFILE_UNLOCKED)
            pub const ACTION_MANAGED_PROFILE_UNLOCKED: &'static str = "android.intent.action.MANAGED_PROFILE_UNLOCKED";

            /// public static final [ACTION_MANAGE_NETWORK_USAGE](https://developer.android.com/reference/android/content/Intent.html#ACTION_MANAGE_NETWORK_USAGE)
            pub const ACTION_MANAGE_NETWORK_USAGE: &'static str = "android.intent.action.MANAGE_NETWORK_USAGE";

            /// public static final [ACTION_MANAGE_PACKAGE_STORAGE](https://developer.android.com/reference/android/content/Intent.html#ACTION_MANAGE_PACKAGE_STORAGE)
            pub const ACTION_MANAGE_PACKAGE_STORAGE: &'static str = "android.intent.action.MANAGE_PACKAGE_STORAGE";

            /// public static final [ACTION_MANAGE_UNUSED_APPS](https://developer.android.com/reference/android/content/Intent.html#ACTION_MANAGE_UNUSED_APPS)
            pub const ACTION_MANAGE_UNUSED_APPS: &'static str = "android.intent.action.MANAGE_UNUSED_APPS";

            /// public static final [ACTION_MEDIA_BAD_REMOVAL](https://developer.android.com/reference/android/content/Intent.html#ACTION_MEDIA_BAD_REMOVAL)
            pub const ACTION_MEDIA_BAD_REMOVAL: &'static str = "android.intent.action.MEDIA_BAD_REMOVAL";

            /// public static final [ACTION_MEDIA_BUTTON](https://developer.android.com/reference/android/content/Intent.html#ACTION_MEDIA_BUTTON)
            pub const ACTION_MEDIA_BUTTON: &'static str = "android.intent.action.MEDIA_BUTTON";

            /// public static final [ACTION_MEDIA_CHECKING](https://developer.android.com/reference/android/content/Intent.html#ACTION_MEDIA_CHECKING)
            pub const ACTION_MEDIA_CHECKING: &'static str = "android.intent.action.MEDIA_CHECKING";

            /// public static final [ACTION_MEDIA_EJECT](https://developer.android.com/reference/android/content/Intent.html#ACTION_MEDIA_EJECT)
            pub const ACTION_MEDIA_EJECT: &'static str = "android.intent.action.MEDIA_EJECT";

            /// public static final [ACTION_MEDIA_MOUNTED](https://developer.android.com/reference/android/content/Intent.html#ACTION_MEDIA_MOUNTED)
            pub const ACTION_MEDIA_MOUNTED: &'static str = "android.intent.action.MEDIA_MOUNTED";

            /// public static final [ACTION_MEDIA_NOFS](https://developer.android.com/reference/android/content/Intent.html#ACTION_MEDIA_NOFS)
            pub const ACTION_MEDIA_NOFS: &'static str = "android.intent.action.MEDIA_NOFS";

            /// public static final [ACTION_MEDIA_REMOVED](https://developer.android.com/reference/android/content/Intent.html#ACTION_MEDIA_REMOVED)
            pub const ACTION_MEDIA_REMOVED: &'static str = "android.intent.action.MEDIA_REMOVED";

            /// public static final [ACTION_MEDIA_SCANNER_FINISHED](https://developer.android.com/reference/android/content/Intent.html#ACTION_MEDIA_SCANNER_FINISHED)
            pub const ACTION_MEDIA_SCANNER_FINISHED: &'static str = "android.intent.action.MEDIA_SCANNER_FINISHED";

            /// public static final [ACTION_MEDIA_SCANNER_SCAN_FILE](https://developer.android.com/reference/android/content/Intent.html#ACTION_MEDIA_SCANNER_SCAN_FILE)
            #[deprecated]
            pub const ACTION_MEDIA_SCANNER_SCAN_FILE: &'static str = "android.intent.action.MEDIA_SCANNER_SCAN_FILE";

            /// public static final [ACTION_MEDIA_SCANNER_STARTED](https://developer.android.com/reference/android/content/Intent.html#ACTION_MEDIA_SCANNER_STARTED)
            pub const ACTION_MEDIA_SCANNER_STARTED: &'static str = "android.intent.action.MEDIA_SCANNER_STARTED";

            /// public static final [ACTION_MEDIA_SHARED](https://developer.android.com/reference/android/content/Intent.html#ACTION_MEDIA_SHARED)
            pub const ACTION_MEDIA_SHARED: &'static str = "android.intent.action.MEDIA_SHARED";

            /// public static final [ACTION_MEDIA_UNMOUNTABLE](https://developer.android.com/reference/android/content/Intent.html#ACTION_MEDIA_UNMOUNTABLE)
            pub const ACTION_MEDIA_UNMOUNTABLE: &'static str = "android.intent.action.MEDIA_UNMOUNTABLE";

            /// public static final [ACTION_MEDIA_UNMOUNTED](https://developer.android.com/reference/android/content/Intent.html#ACTION_MEDIA_UNMOUNTED)
            pub const ACTION_MEDIA_UNMOUNTED: &'static str = "android.intent.action.MEDIA_UNMOUNTED";

            /// public static final [ACTION_MY_PACKAGE_REPLACED](https://developer.android.com/reference/android/content/Intent.html#ACTION_MY_PACKAGE_REPLACED)
            pub const ACTION_MY_PACKAGE_REPLACED: &'static str = "android.intent.action.MY_PACKAGE_REPLACED";

            /// public static final [ACTION_MY_PACKAGE_SUSPENDED](https://developer.android.com/reference/android/content/Intent.html#ACTION_MY_PACKAGE_SUSPENDED)
            pub const ACTION_MY_PACKAGE_SUSPENDED: &'static str = "android.intent.action.MY_PACKAGE_SUSPENDED";

            /// public static final [ACTION_MY_PACKAGE_UNSUSPENDED](https://developer.android.com/reference/android/content/Intent.html#ACTION_MY_PACKAGE_UNSUSPENDED)
            pub const ACTION_MY_PACKAGE_UNSUSPENDED: &'static str = "android.intent.action.MY_PACKAGE_UNSUSPENDED";

            /// public static final [ACTION_NEW_OUTGOING_CALL](https://developer.android.com/reference/android/content/Intent.html#ACTION_NEW_OUTGOING_CALL)
            #[deprecated]
            pub const ACTION_NEW_OUTGOING_CALL: &'static str = "android.intent.action.NEW_OUTGOING_CALL";

            /// public static final [ACTION_OPEN_DOCUMENT](https://developer.android.com/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT)
            pub const ACTION_OPEN_DOCUMENT: &'static str = "android.intent.action.OPEN_DOCUMENT";

            /// public static final [ACTION_OPEN_DOCUMENT_TREE](https://developer.android.com/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT_TREE)
            pub const ACTION_OPEN_DOCUMENT_TREE: &'static str = "android.intent.action.OPEN_DOCUMENT_TREE";

            /// public static final [ACTION_PACKAGES_SUSPENDED](https://developer.android.com/reference/android/content/Intent.html#ACTION_PACKAGES_SUSPENDED)
            pub const ACTION_PACKAGES_SUSPENDED: &'static str = "android.intent.action.PACKAGES_SUSPENDED";

            /// public static final [ACTION_PACKAGES_UNSUSPENDED](https://developer.android.com/reference/android/content/Intent.html#ACTION_PACKAGES_UNSUSPENDED)
            pub const ACTION_PACKAGES_UNSUSPENDED: &'static str = "android.intent.action.PACKAGES_UNSUSPENDED";

            /// public static final [ACTION_PACKAGE_ADDED](https://developer.android.com/reference/android/content/Intent.html#ACTION_PACKAGE_ADDED)
            pub const ACTION_PACKAGE_ADDED: &'static str = "android.intent.action.PACKAGE_ADDED";

            /// public static final [ACTION_PACKAGE_CHANGED](https://developer.android.com/reference/android/content/Intent.html#ACTION_PACKAGE_CHANGED)
            pub const ACTION_PACKAGE_CHANGED: &'static str = "android.intent.action.PACKAGE_CHANGED";

            /// public static final [ACTION_PACKAGE_DATA_CLEARED](https://developer.android.com/reference/android/content/Intent.html#ACTION_PACKAGE_DATA_CLEARED)
            pub const ACTION_PACKAGE_DATA_CLEARED: &'static str = "android.intent.action.PACKAGE_DATA_CLEARED";

            /// public static final [ACTION_PACKAGE_FIRST_LAUNCH](https://developer.android.com/reference/android/content/Intent.html#ACTION_PACKAGE_FIRST_LAUNCH)
            pub const ACTION_PACKAGE_FIRST_LAUNCH: &'static str = "android.intent.action.PACKAGE_FIRST_LAUNCH";

            /// public static final [ACTION_PACKAGE_FULLY_REMOVED](https://developer.android.com/reference/android/content/Intent.html#ACTION_PACKAGE_FULLY_REMOVED)
            pub const ACTION_PACKAGE_FULLY_REMOVED: &'static str = "android.intent.action.PACKAGE_FULLY_REMOVED";

            /// public static final [ACTION_PACKAGE_INSTALL](https://developer.android.com/reference/android/content/Intent.html#ACTION_PACKAGE_INSTALL)
            #[deprecated]
            pub const ACTION_PACKAGE_INSTALL: &'static str = "android.intent.action.PACKAGE_INSTALL";

            /// public static final [ACTION_PACKAGE_NEEDS_VERIFICATION](https://developer.android.com/reference/android/content/Intent.html#ACTION_PACKAGE_NEEDS_VERIFICATION)
            pub const ACTION_PACKAGE_NEEDS_VERIFICATION: &'static str =
                "android.intent.action.PACKAGE_NEEDS_VERIFICATION";

            /// public static final [ACTION_PACKAGE_REMOVED](https://developer.android.com/reference/android/content/Intent.html#ACTION_PACKAGE_REMOVED)
            pub const ACTION_PACKAGE_REMOVED: &'static str = "android.intent.action.PACKAGE_REMOVED";

            /// public static final [ACTION_PACKAGE_REPLACED](https://developer.android.com/reference/android/content/Intent.html#ACTION_PACKAGE_REPLACED)
            pub const ACTION_PACKAGE_REPLACED: &'static str = "android.intent.action.PACKAGE_REPLACED";

            /// public static final [ACTION_PACKAGE_RESTARTED](https://developer.android.com/reference/android/content/Intent.html#ACTION_PACKAGE_RESTARTED)
            pub const ACTION_PACKAGE_RESTARTED: &'static str = "android.intent.action.PACKAGE_RESTARTED";

            /// public static final [ACTION_PACKAGE_VERIFIED](https://developer.android.com/reference/android/content/Intent.html#ACTION_PACKAGE_VERIFIED)
            pub const ACTION_PACKAGE_VERIFIED: &'static str = "android.intent.action.PACKAGE_VERIFIED";

            /// public static final [ACTION_PASTE](https://developer.android.com/reference/android/content/Intent.html#ACTION_PASTE)
            pub const ACTION_PASTE: &'static str = "android.intent.action.PASTE";

            /// public static final [ACTION_PICK](https://developer.android.com/reference/android/content/Intent.html#ACTION_PICK)
            pub const ACTION_PICK: &'static str = "android.intent.action.PICK";

            /// public static final [ACTION_PICK_ACTIVITY](https://developer.android.com/reference/android/content/Intent.html#ACTION_PICK_ACTIVITY)
            pub const ACTION_PICK_ACTIVITY: &'static str = "android.intent.action.PICK_ACTIVITY";

            /// public static final [ACTION_POWER_CONNECTED](https://developer.android.com/reference/android/content/Intent.html#ACTION_POWER_CONNECTED)
            pub const ACTION_POWER_CONNECTED: &'static str = "android.intent.action.ACTION_POWER_CONNECTED";

            /// public static final [ACTION_POWER_DISCONNECTED](https://developer.android.com/reference/android/content/Intent.html#ACTION_POWER_DISCONNECTED)
            pub const ACTION_POWER_DISCONNECTED: &'static str = "android.intent.action.ACTION_POWER_DISCONNECTED";

            /// public static final [ACTION_POWER_USAGE_SUMMARY](https://developer.android.com/reference/android/content/Intent.html#ACTION_POWER_USAGE_SUMMARY)
            pub const ACTION_POWER_USAGE_SUMMARY: &'static str = "android.intent.action.POWER_USAGE_SUMMARY";

            /// public static final [ACTION_PROCESS_TEXT](https://developer.android.com/reference/android/content/Intent.html#ACTION_PROCESS_TEXT)
            pub const ACTION_PROCESS_TEXT: &'static str = "android.intent.action.PROCESS_TEXT";

            /// public static final [ACTION_PROFILE_ACCESSIBLE](https://developer.android.com/reference/android/content/Intent.html#ACTION_PROFILE_ACCESSIBLE)
            pub const ACTION_PROFILE_ACCESSIBLE: &'static str = "android.intent.action.PROFILE_ACCESSIBLE";

            /// public static final [ACTION_PROFILE_INACCESSIBLE](https://developer.android.com/reference/android/content/Intent.html#ACTION_PROFILE_INACCESSIBLE)
            pub const ACTION_PROFILE_INACCESSIBLE: &'static str = "android.intent.action.PROFILE_INACCESSIBLE";

            /// public static final [ACTION_PROVIDER_CHANGED](https://developer.android.com/reference/android/content/Intent.html#ACTION_PROVIDER_CHANGED)
            pub const ACTION_PROVIDER_CHANGED: &'static str = "android.intent.action.PROVIDER_CHANGED";

            /// public static final [ACTION_QUICK_CLOCK](https://developer.android.com/reference/android/content/Intent.html#ACTION_QUICK_CLOCK)
            pub const ACTION_QUICK_CLOCK: &'static str = "android.intent.action.QUICK_CLOCK";

            /// public static final [ACTION_QUICK_VIEW](https://developer.android.com/reference/android/content/Intent.html#ACTION_QUICK_VIEW)
            pub const ACTION_QUICK_VIEW: &'static str = "android.intent.action.QUICK_VIEW";

            /// public static final [ACTION_REBOOT](https://developer.android.com/reference/android/content/Intent.html#ACTION_REBOOT)
            pub const ACTION_REBOOT: &'static str = "android.intent.action.REBOOT";

            /// public static final [ACTION_RUN](https://developer.android.com/reference/android/content/Intent.html#ACTION_RUN)
            pub const ACTION_RUN: &'static str = "android.intent.action.RUN";

            /// public static final [ACTION_SAFETY_CENTER](https://developer.android.com/reference/android/content/Intent.html#ACTION_SAFETY_CENTER)
            pub const ACTION_SAFETY_CENTER: &'static str = "android.intent.action.SAFETY_CENTER";

            /// public static final [ACTION_SCREEN_OFF](https://developer.android.com/reference/android/content/Intent.html#ACTION_SCREEN_OFF)
            pub const ACTION_SCREEN_OFF: &'static str = "android.intent.action.SCREEN_OFF";

            /// public static final [ACTION_SCREEN_ON](https://developer.android.com/reference/android/content/Intent.html#ACTION_SCREEN_ON)
            pub const ACTION_SCREEN_ON: &'static str = "android.intent.action.SCREEN_ON";

            /// public static final [ACTION_SEARCH](https://developer.android.com/reference/android/content/Intent.html#ACTION_SEARCH)
            pub const ACTION_SEARCH: &'static str = "android.intent.action.SEARCH";

            /// public static final [ACTION_SEARCH_LONG_PRESS](https://developer.android.com/reference/android/content/Intent.html#ACTION_SEARCH_LONG_PRESS)
            pub const ACTION_SEARCH_LONG_PRESS: &'static str = "android.intent.action.SEARCH_LONG_PRESS";

            /// public static final [ACTION_SEND](https://developer.android.com/reference/android/content/Intent.html#ACTION_SEND)
            pub const ACTION_SEND: &'static str = "android.intent.action.SEND";

            /// public static final [ACTION_SENDTO](https://developer.android.com/reference/android/content/Intent.html#ACTION_SENDTO)
            pub const ACTION_SENDTO: &'static str = "android.intent.action.SENDTO";

            /// public static final [ACTION_SEND_MULTIPLE](https://developer.android.com/reference/android/content/Intent.html#ACTION_SEND_MULTIPLE)
            pub const ACTION_SEND_MULTIPLE: &'static str = "android.intent.action.SEND_MULTIPLE";

            /// public static final [ACTION_SET_WALLPAPER](https://developer.android.com/reference/android/content/Intent.html#ACTION_SET_WALLPAPER)
            pub const ACTION_SET_WALLPAPER: &'static str = "android.intent.action.SET_WALLPAPER";

            /// public static final [ACTION_SHOW_APP_INFO](https://developer.android.com/reference/android/content/Intent.html#ACTION_SHOW_APP_INFO)
            pub const ACTION_SHOW_APP_INFO: &'static str = "android.intent.action.SHOW_APP_INFO";

            /// public static final [ACTION_SHOW_WORK_APPS](https://developer.android.com/reference/android/content/Intent.html#ACTION_SHOW_WORK_APPS)
            pub const ACTION_SHOW_WORK_APPS: &'static str = "android.intent.action.SHOW_WORK_APPS";

            /// public static final [ACTION_SHUTDOWN](https://developer.android.com/reference/android/content/Intent.html#ACTION_SHUTDOWN)
            pub const ACTION_SHUTDOWN: &'static str = "android.intent.action.ACTION_SHUTDOWN";

            /// public static final [ACTION_SYNC](https://developer.android.com/reference/android/content/Intent.html#ACTION_SYNC)
            pub const ACTION_SYNC: &'static str = "android.intent.action.SYNC";

            /// public static final [ACTION_SYSTEM_TUTORIAL](https://developer.android.com/reference/android/content/Intent.html#ACTION_SYSTEM_TUTORIAL)
            pub const ACTION_SYSTEM_TUTORIAL: &'static str = "android.intent.action.SYSTEM_TUTORIAL";

            /// public static final [ACTION_TIMEZONE_CHANGED](https://developer.android.com/reference/android/content/Intent.html#ACTION_TIMEZONE_CHANGED)
            pub const ACTION_TIMEZONE_CHANGED: &'static str = "android.intent.action.TIMEZONE_CHANGED";

            /// public static final [ACTION_TIME_CHANGED](https://developer.android.com/reference/android/content/Intent.html#ACTION_TIME_CHANGED)
            pub const ACTION_TIME_CHANGED: &'static str = "android.intent.action.TIME_SET";

            /// public static final [ACTION_TIME_TICK](https://developer.android.com/reference/android/content/Intent.html#ACTION_TIME_TICK)
            pub const ACTION_TIME_TICK: &'static str = "android.intent.action.TIME_TICK";

            /// public static final [ACTION_TRANSLATE](https://developer.android.com/reference/android/content/Intent.html#ACTION_TRANSLATE)
            pub const ACTION_TRANSLATE: &'static str = "android.intent.action.TRANSLATE";

            /// public static final [ACTION_UID_REMOVED](https://developer.android.com/reference/android/content/Intent.html#ACTION_UID_REMOVED)
            pub const ACTION_UID_REMOVED: &'static str = "android.intent.action.UID_REMOVED";

            /// public static final [ACTION_UMS_CONNECTED](https://developer.android.com/reference/android/content/Intent.html#ACTION_UMS_CONNECTED)
            #[deprecated]
            pub const ACTION_UMS_CONNECTED: &'static str = "android.intent.action.UMS_CONNECTED";

            /// public static final [ACTION_UMS_DISCONNECTED](https://developer.android.com/reference/android/content/Intent.html#ACTION_UMS_DISCONNECTED)
            #[deprecated]
            pub const ACTION_UMS_DISCONNECTED: &'static str = "android.intent.action.UMS_DISCONNECTED";

            /// public static final [ACTION_UNINSTALL_PACKAGE](https://developer.android.com/reference/android/content/Intent.html#ACTION_UNINSTALL_PACKAGE)
            #[deprecated]
            pub const ACTION_UNINSTALL_PACKAGE: &'static str = "android.intent.action.UNINSTALL_PACKAGE";

            /// public static final [ACTION_USER_BACKGROUND](https://developer.android.com/reference/android/content/Intent.html#ACTION_USER_BACKGROUND)
            pub const ACTION_USER_BACKGROUND: &'static str = "android.intent.action.USER_BACKGROUND";

            /// public static final [ACTION_USER_FOREGROUND](https://developer.android.com/reference/android/content/Intent.html#ACTION_USER_FOREGROUND)
            pub const ACTION_USER_FOREGROUND: &'static str = "android.intent.action.USER_FOREGROUND";

            /// public static final [ACTION_USER_INITIALIZE](https://developer.android.com/reference/android/content/Intent.html#ACTION_USER_INITIALIZE)
            pub const ACTION_USER_INITIALIZE: &'static str = "android.intent.action.USER_INITIALIZE";

            /// public static final [ACTION_USER_PRESENT](https://developer.android.com/reference/android/content/Intent.html#ACTION_USER_PRESENT)
            pub const ACTION_USER_PRESENT: &'static str = "android.intent.action.USER_PRESENT";

            /// public static final [ACTION_USER_UNLOCKED](https://developer.android.com/reference/android/content/Intent.html#ACTION_USER_UNLOCKED)
            pub const ACTION_USER_UNLOCKED: &'static str = "android.intent.action.USER_UNLOCKED";

            /// public static final [ACTION_VIEW](https://developer.android.com/reference/android/content/Intent.html#ACTION_VIEW)
            pub const ACTION_VIEW: &'static str = "android.intent.action.VIEW";

            /// public static final [ACTION_VIEW_LOCUS](https://developer.android.com/reference/android/content/Intent.html#ACTION_VIEW_LOCUS)
            pub const ACTION_VIEW_LOCUS: &'static str = "android.intent.action.VIEW_LOCUS";

            /// public static final [ACTION_VIEW_PERMISSION_USAGE](https://developer.android.com/reference/android/content/Intent.html#ACTION_VIEW_PERMISSION_USAGE)
            pub const ACTION_VIEW_PERMISSION_USAGE: &'static str = "android.intent.action.VIEW_PERMISSION_USAGE";

            /// public static final [ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD](https://developer.android.com/reference/android/content/Intent.html#ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD)
            pub const ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD: &'static str =
                "android.intent.action.VIEW_PERMISSION_USAGE_FOR_PERIOD";

            /// public static final [ACTION_VOICE_COMMAND](https://developer.android.com/reference/android/content/Intent.html#ACTION_VOICE_COMMAND)
            pub const ACTION_VOICE_COMMAND: &'static str = "android.intent.action.VOICE_COMMAND";

            /// public static final [ACTION_WALLPAPER_CHANGED](https://developer.android.com/reference/android/content/Intent.html#ACTION_WALLPAPER_CHANGED)
            #[deprecated]
            pub const ACTION_WALLPAPER_CHANGED: &'static str = "android.intent.action.WALLPAPER_CHANGED";

            /// public static final [ACTION_WEB_SEARCH](https://developer.android.com/reference/android/content/Intent.html#ACTION_WEB_SEARCH)
            pub const ACTION_WEB_SEARCH: &'static str = "android.intent.action.WEB_SEARCH";

            /// public static final [CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET)
            pub const CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET: &'static str =
                "android.intent.category.ACCESSIBILITY_SHORTCUT_TARGET";

            /// public static final [CATEGORY_ALTERNATIVE](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_ALTERNATIVE)
            pub const CATEGORY_ALTERNATIVE: &'static str = "android.intent.category.ALTERNATIVE";

            /// public static final [CATEGORY_APP_BROWSER](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_APP_BROWSER)
            pub const CATEGORY_APP_BROWSER: &'static str = "android.intent.category.APP_BROWSER";

            /// public static final [CATEGORY_APP_CALCULATOR](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_APP_CALCULATOR)
            pub const CATEGORY_APP_CALCULATOR: &'static str = "android.intent.category.APP_CALCULATOR";

            /// public static final [CATEGORY_APP_CALENDAR](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_APP_CALENDAR)
            pub const CATEGORY_APP_CALENDAR: &'static str = "android.intent.category.APP_CALENDAR";

            /// public static final [CATEGORY_APP_CONTACTS](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_APP_CONTACTS)
            pub const CATEGORY_APP_CONTACTS: &'static str = "android.intent.category.APP_CONTACTS";

            /// public static final [CATEGORY_APP_EMAIL](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_APP_EMAIL)
            pub const CATEGORY_APP_EMAIL: &'static str = "android.intent.category.APP_EMAIL";

            /// public static final [CATEGORY_APP_FILES](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_APP_FILES)
            pub const CATEGORY_APP_FILES: &'static str = "android.intent.category.APP_FILES";

            /// public static final [CATEGORY_APP_FITNESS](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_APP_FITNESS)
            pub const CATEGORY_APP_FITNESS: &'static str = "android.intent.category.APP_FITNESS";

            /// public static final [CATEGORY_APP_GALLERY](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_APP_GALLERY)
            pub const CATEGORY_APP_GALLERY: &'static str = "android.intent.category.APP_GALLERY";

            /// public static final [CATEGORY_APP_MAPS](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_APP_MAPS)
            pub const CATEGORY_APP_MAPS: &'static str = "android.intent.category.APP_MAPS";

            /// public static final [CATEGORY_APP_MARKET](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_APP_MARKET)
            pub const CATEGORY_APP_MARKET: &'static str = "android.intent.category.APP_MARKET";

            /// public static final [CATEGORY_APP_MESSAGING](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_APP_MESSAGING)
            pub const CATEGORY_APP_MESSAGING: &'static str = "android.intent.category.APP_MESSAGING";

            /// public static final [CATEGORY_APP_MUSIC](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_APP_MUSIC)
            pub const CATEGORY_APP_MUSIC: &'static str = "android.intent.category.APP_MUSIC";

            /// public static final [CATEGORY_APP_WEATHER](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_APP_WEATHER)
            pub const CATEGORY_APP_WEATHER: &'static str = "android.intent.category.APP_WEATHER";

            /// public static final [CATEGORY_BROWSABLE](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_BROWSABLE)
            pub const CATEGORY_BROWSABLE: &'static str = "android.intent.category.BROWSABLE";

            /// public static final [CATEGORY_CAR_DOCK](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_CAR_DOCK)
            pub const CATEGORY_CAR_DOCK: &'static str = "android.intent.category.CAR_DOCK";

            /// public static final [CATEGORY_CAR_MODE](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_CAR_MODE)
            pub const CATEGORY_CAR_MODE: &'static str = "android.intent.category.CAR_MODE";

            /// public static final [CATEGORY_DEFAULT](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_DEFAULT)
            pub const CATEGORY_DEFAULT: &'static str = "android.intent.category.DEFAULT";

            /// public static final [CATEGORY_DESK_DOCK](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_DESK_DOCK)
            pub const CATEGORY_DESK_DOCK: &'static str = "android.intent.category.DESK_DOCK";

            /// public static final [CATEGORY_DEVELOPMENT_PREFERENCE](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_DEVELOPMENT_PREFERENCE)
            pub const CATEGORY_DEVELOPMENT_PREFERENCE: &'static str = "android.intent.category.DEVELOPMENT_PREFERENCE";

            /// public static final [CATEGORY_EMBED](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_EMBED)
            pub const CATEGORY_EMBED: &'static str = "android.intent.category.EMBED";

            /// public static final [CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST)
            pub const CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST: &'static str =
                "android.intent.category.FRAMEWORK_INSTRUMENTATION_TEST";

            /// public static final [CATEGORY_HE_DESK_DOCK](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_HE_DESK_DOCK)
            pub const CATEGORY_HE_DESK_DOCK: &'static str = "android.intent.category.HE_DESK_DOCK";

            /// public static final [CATEGORY_HOME](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_HOME)
            pub const CATEGORY_HOME: &'static str = "android.intent.category.HOME";

            /// public static final [CATEGORY_INFO](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_INFO)
            pub const CATEGORY_INFO: &'static str = "android.intent.category.INFO";

            /// public static final [CATEGORY_LAUNCHER](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_LAUNCHER)
            pub const CATEGORY_LAUNCHER: &'static str = "android.intent.category.LAUNCHER";

            /// public static final [CATEGORY_LEANBACK_LAUNCHER](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_LEANBACK_LAUNCHER)
            pub const CATEGORY_LEANBACK_LAUNCHER: &'static str = "android.intent.category.LEANBACK_LAUNCHER";

            /// public static final [CATEGORY_LE_DESK_DOCK](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_LE_DESK_DOCK)
            pub const CATEGORY_LE_DESK_DOCK: &'static str = "android.intent.category.LE_DESK_DOCK";

            /// public static final [CATEGORY_MONKEY](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_MONKEY)
            pub const CATEGORY_MONKEY: &'static str = "android.intent.category.MONKEY";

            /// public static final [CATEGORY_OPENABLE](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_OPENABLE)
            pub const CATEGORY_OPENABLE: &'static str = "android.intent.category.OPENABLE";

            /// public static final [CATEGORY_PREFERENCE](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_PREFERENCE)
            pub const CATEGORY_PREFERENCE: &'static str = "android.intent.category.PREFERENCE";

            /// public static final [CATEGORY_SAMPLE_CODE](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_SAMPLE_CODE)
            pub const CATEGORY_SAMPLE_CODE: &'static str = "android.intent.category.SAMPLE_CODE";

            /// public static final [CATEGORY_SECONDARY_HOME](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_SECONDARY_HOME)
            pub const CATEGORY_SECONDARY_HOME: &'static str = "android.intent.category.SECONDARY_HOME";

            /// public static final [CATEGORY_SELECTED_ALTERNATIVE](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_SELECTED_ALTERNATIVE)
            pub const CATEGORY_SELECTED_ALTERNATIVE: &'static str = "android.intent.category.SELECTED_ALTERNATIVE";

            /// public static final [CATEGORY_TAB](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_TAB)
            pub const CATEGORY_TAB: &'static str = "android.intent.category.TAB";

            /// public static final [CATEGORY_TEST](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_TEST)
            pub const CATEGORY_TEST: &'static str = "android.intent.category.TEST";

            /// public static final [CATEGORY_TYPED_OPENABLE](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_TYPED_OPENABLE)
            pub const CATEGORY_TYPED_OPENABLE: &'static str = "android.intent.category.TYPED_OPENABLE";

            /// public static final [CATEGORY_UNIT_TEST](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_UNIT_TEST)
            pub const CATEGORY_UNIT_TEST: &'static str = "android.intent.category.UNIT_TEST";

            /// public static final [CATEGORY_VOICE](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_VOICE)
            pub const CATEGORY_VOICE: &'static str = "android.intent.category.VOICE";

            /// public static final [CATEGORY_VR_HOME](https://developer.android.com/reference/android/content/Intent.html#CATEGORY_VR_HOME)
            pub const CATEGORY_VR_HOME: &'static str = "android.intent.category.VR_HOME";

            /// public static final [EXTRA_ALARM_COUNT](https://developer.android.com/reference/android/content/Intent.html#EXTRA_ALARM_COUNT)
            pub const EXTRA_ALARM_COUNT: &'static str = "android.intent.extra.ALARM_COUNT";

            /// public static final [EXTRA_ALLOW_MULTIPLE](https://developer.android.com/reference/android/content/Intent.html#EXTRA_ALLOW_MULTIPLE)
            pub const EXTRA_ALLOW_MULTIPLE: &'static str = "android.intent.extra.ALLOW_MULTIPLE";

            /// public static final [EXTRA_ALLOW_REPLACE](https://developer.android.com/reference/android/content/Intent.html#EXTRA_ALLOW_REPLACE)
            #[deprecated]
            pub const EXTRA_ALLOW_REPLACE: &'static str = "android.intent.extra.ALLOW_REPLACE";

            /// public static final [EXTRA_ALTERNATE_INTENTS](https://developer.android.com/reference/android/content/Intent.html#EXTRA_ALTERNATE_INTENTS)
            pub const EXTRA_ALTERNATE_INTENTS: &'static str = "android.intent.extra.ALTERNATE_INTENTS";

            /// public static final [EXTRA_ASSIST_CONTEXT](https://developer.android.com/reference/android/content/Intent.html#EXTRA_ASSIST_CONTEXT)
            pub const EXTRA_ASSIST_CONTEXT: &'static str = "android.intent.extra.ASSIST_CONTEXT";

            /// public static final [EXTRA_ASSIST_INPUT_DEVICE_ID](https://developer.android.com/reference/android/content/Intent.html#EXTRA_ASSIST_INPUT_DEVICE_ID)
            pub const EXTRA_ASSIST_INPUT_DEVICE_ID: &'static str = "android.intent.extra.ASSIST_INPUT_DEVICE_ID";

            /// public static final [EXTRA_ASSIST_INPUT_HINT_KEYBOARD](https://developer.android.com/reference/android/content/Intent.html#EXTRA_ASSIST_INPUT_HINT_KEYBOARD)
            pub const EXTRA_ASSIST_INPUT_HINT_KEYBOARD: &'static str =
                "android.intent.extra.ASSIST_INPUT_HINT_KEYBOARD";

            /// public static final [EXTRA_ASSIST_PACKAGE](https://developer.android.com/reference/android/content/Intent.html#EXTRA_ASSIST_PACKAGE)
            pub const EXTRA_ASSIST_PACKAGE: &'static str = "android.intent.extra.ASSIST_PACKAGE";

            /// public static final [EXTRA_ASSIST_UID](https://developer.android.com/reference/android/content/Intent.html#EXTRA_ASSIST_UID)
            pub const EXTRA_ASSIST_UID: &'static str = "android.intent.extra.ASSIST_UID";

            /// public static final [EXTRA_ATTRIBUTION_TAGS](https://developer.android.com/reference/android/content/Intent.html#EXTRA_ATTRIBUTION_TAGS)
            pub const EXTRA_ATTRIBUTION_TAGS: &'static str = "android.intent.extra.ATTRIBUTION_TAGS";

            /// public static final [EXTRA_AUTO_LAUNCH_SINGLE_CHOICE](https://developer.android.com/reference/android/content/Intent.html#EXTRA_AUTO_LAUNCH_SINGLE_CHOICE)
            pub const EXTRA_AUTO_LAUNCH_SINGLE_CHOICE: &'static str = "android.intent.extra.AUTO_LAUNCH_SINGLE_CHOICE";

            /// public static final [EXTRA_BCC](https://developer.android.com/reference/android/content/Intent.html#EXTRA_BCC)
            pub const EXTRA_BCC: &'static str = "android.intent.extra.BCC";

            /// public static final [EXTRA_BUG_REPORT](https://developer.android.com/reference/android/content/Intent.html#EXTRA_BUG_REPORT)
            pub const EXTRA_BUG_REPORT: &'static str = "android.intent.extra.BUG_REPORT";

            /// public static final [EXTRA_CC](https://developer.android.com/reference/android/content/Intent.html#EXTRA_CC)
            pub const EXTRA_CC: &'static str = "android.intent.extra.CC";

            /// public static final [EXTRA_CHANGED_COMPONENT_NAME](https://developer.android.com/reference/android/content/Intent.html#EXTRA_CHANGED_COMPONENT_NAME)
            #[deprecated]
            pub const EXTRA_CHANGED_COMPONENT_NAME: &'static str = "android.intent.extra.changed_component_name";

            /// public static final [EXTRA_CHANGED_COMPONENT_NAME_LIST](https://developer.android.com/reference/android/content/Intent.html#EXTRA_CHANGED_COMPONENT_NAME_LIST)
            pub const EXTRA_CHANGED_COMPONENT_NAME_LIST: &'static str =
                "android.intent.extra.changed_component_name_list";

            /// public static final [EXTRA_CHANGED_PACKAGE_LIST](https://developer.android.com/reference/android/content/Intent.html#EXTRA_CHANGED_PACKAGE_LIST)
            pub const EXTRA_CHANGED_PACKAGE_LIST: &'static str = "android.intent.extra.changed_package_list";

            /// public static final [EXTRA_CHANGED_UID_LIST](https://developer.android.com/reference/android/content/Intent.html#EXTRA_CHANGED_UID_LIST)
            pub const EXTRA_CHANGED_UID_LIST: &'static str = "android.intent.extra.changed_uid_list";

            /// public static final [EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER](https://developer.android.com/reference/android/content/Intent.html#EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER)
            pub const EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER: &'static str =
                "android.intent.extra.CHOOSER_REFINEMENT_INTENT_SENDER";

            /// public static final [EXTRA_CHOOSER_TARGETS](https://developer.android.com/reference/android/content/Intent.html#EXTRA_CHOOSER_TARGETS)
            pub const EXTRA_CHOOSER_TARGETS: &'static str = "android.intent.extra.CHOOSER_TARGETS";

            /// public static final [EXTRA_CHOSEN_COMPONENT](https://developer.android.com/reference/android/content/Intent.html#EXTRA_CHOSEN_COMPONENT)
            pub const EXTRA_CHOSEN_COMPONENT: &'static str = "android.intent.extra.CHOSEN_COMPONENT";

            /// public static final [EXTRA_CHOSEN_COMPONENT_INTENT_SENDER](https://developer.android.com/reference/android/content/Intent.html#EXTRA_CHOSEN_COMPONENT_INTENT_SENDER)
            pub const EXTRA_CHOSEN_COMPONENT_INTENT_SENDER: &'static str =
                "android.intent.extra.CHOSEN_COMPONENT_INTENT_SENDER";

            /// public static final [EXTRA_COMPONENT_NAME](https://developer.android.com/reference/android/content/Intent.html#EXTRA_COMPONENT_NAME)
            pub const EXTRA_COMPONENT_NAME: &'static str = "android.intent.extra.COMPONENT_NAME";

            /// public static final [EXTRA_CONTENT_ANNOTATIONS](https://developer.android.com/reference/android/content/Intent.html#EXTRA_CONTENT_ANNOTATIONS)
            pub const EXTRA_CONTENT_ANNOTATIONS: &'static str = "android.intent.extra.CONTENT_ANNOTATIONS";

            /// public static final [EXTRA_CONTENT_QUERY](https://developer.android.com/reference/android/content/Intent.html#EXTRA_CONTENT_QUERY)
            pub const EXTRA_CONTENT_QUERY: &'static str = "android.intent.extra.CONTENT_QUERY";

            /// public static final [EXTRA_DATA_REMOVED](https://developer.android.com/reference/android/content/Intent.html#EXTRA_DATA_REMOVED)
            pub const EXTRA_DATA_REMOVED: &'static str = "android.intent.extra.DATA_REMOVED";

            /// public static final [EXTRA_DOCK_STATE](https://developer.android.com/reference/android/content/Intent.html#EXTRA_DOCK_STATE)
            pub const EXTRA_DOCK_STATE: &'static str = "android.intent.extra.DOCK_STATE";

            /// public static final [EXTRA_DOCK_STATE_CAR](https://developer.android.com/reference/android/content/Intent.html#EXTRA_DOCK_STATE_CAR)
            pub const EXTRA_DOCK_STATE_CAR: i32 = 2;

            /// public static final [EXTRA_DOCK_STATE_DESK](https://developer.android.com/reference/android/content/Intent.html#EXTRA_DOCK_STATE_DESK)
            pub const EXTRA_DOCK_STATE_DESK: i32 = 1;

            /// public static final [EXTRA_DOCK_STATE_HE_DESK](https://developer.android.com/reference/android/content/Intent.html#EXTRA_DOCK_STATE_HE_DESK)
            pub const EXTRA_DOCK_STATE_HE_DESK: i32 = 4;

            /// public static final [EXTRA_DOCK_STATE_LE_DESK](https://developer.android.com/reference/android/content/Intent.html#EXTRA_DOCK_STATE_LE_DESK)
            pub const EXTRA_DOCK_STATE_LE_DESK: i32 = 3;

            /// public static final [EXTRA_DOCK_STATE_UNDOCKED](https://developer.android.com/reference/android/content/Intent.html#EXTRA_DOCK_STATE_UNDOCKED)
            pub const EXTRA_DOCK_STATE_UNDOCKED: i32 = 0;

            /// public static final [EXTRA_DONT_KILL_APP](https://developer.android.com/reference/android/content/Intent.html#EXTRA_DONT_KILL_APP)
            pub const EXTRA_DONT_KILL_APP: &'static str = "android.intent.extra.DONT_KILL_APP";

            /// public static final [EXTRA_DURATION_MILLIS](https://developer.android.com/reference/android/content/Intent.html#EXTRA_DURATION_MILLIS)
            pub const EXTRA_DURATION_MILLIS: &'static str = "android.intent.extra.DURATION_MILLIS";

            /// public static final [EXTRA_EMAIL](https://developer.android.com/reference/android/content/Intent.html#EXTRA_EMAIL)
            pub const EXTRA_EMAIL: &'static str = "android.intent.extra.EMAIL";

            /// public static final [EXTRA_END_TIME](https://developer.android.com/reference/android/content/Intent.html#EXTRA_END_TIME)
            pub const EXTRA_END_TIME: &'static str = "android.intent.extra.END_TIME";

            /// public static final [EXTRA_EXCLUDE_COMPONENTS](https://developer.android.com/reference/android/content/Intent.html#EXTRA_EXCLUDE_COMPONENTS)
            pub const EXTRA_EXCLUDE_COMPONENTS: &'static str = "android.intent.extra.EXCLUDE_COMPONENTS";

            /// public static final [EXTRA_FROM_STORAGE](https://developer.android.com/reference/android/content/Intent.html#EXTRA_FROM_STORAGE)
            pub const EXTRA_FROM_STORAGE: &'static str = "android.intent.extra.FROM_STORAGE";

            /// public static final [EXTRA_HTML_TEXT](https://developer.android.com/reference/android/content/Intent.html#EXTRA_HTML_TEXT)
            pub const EXTRA_HTML_TEXT: &'static str = "android.intent.extra.HTML_TEXT";

            /// public static final [EXTRA_INDEX](https://developer.android.com/reference/android/content/Intent.html#EXTRA_INDEX)
            pub const EXTRA_INDEX: &'static str = "android.intent.extra.INDEX";

            /// public static final [EXTRA_INITIAL_INTENTS](https://developer.android.com/reference/android/content/Intent.html#EXTRA_INITIAL_INTENTS)
            pub const EXTRA_INITIAL_INTENTS: &'static str = "android.intent.extra.INITIAL_INTENTS";

            /// public static final [EXTRA_INSTALLER_PACKAGE_NAME](https://developer.android.com/reference/android/content/Intent.html#EXTRA_INSTALLER_PACKAGE_NAME)
            pub const EXTRA_INSTALLER_PACKAGE_NAME: &'static str = "android.intent.extra.INSTALLER_PACKAGE_NAME";

            /// public static final [EXTRA_INTENT](https://developer.android.com/reference/android/content/Intent.html#EXTRA_INTENT)
            pub const EXTRA_INTENT: &'static str = "android.intent.extra.INTENT";

            /// public static final [EXTRA_KEY_EVENT](https://developer.android.com/reference/android/content/Intent.html#EXTRA_KEY_EVENT)
            pub const EXTRA_KEY_EVENT: &'static str = "android.intent.extra.KEY_EVENT";

            /// public static final [EXTRA_LOCALE_LIST](https://developer.android.com/reference/android/content/Intent.html#EXTRA_LOCALE_LIST)
            pub const EXTRA_LOCALE_LIST: &'static str = "android.intent.extra.LOCALE_LIST";

            /// public static final [EXTRA_LOCAL_ONLY](https://developer.android.com/reference/android/content/Intent.html#EXTRA_LOCAL_ONLY)
            pub const EXTRA_LOCAL_ONLY: &'static str = "android.intent.extra.LOCAL_ONLY";

            /// public static final [EXTRA_LOCUS_ID](https://developer.android.com/reference/android/content/Intent.html#EXTRA_LOCUS_ID)
            pub const EXTRA_LOCUS_ID: &'static str = "android.intent.extra.LOCUS_ID";

            /// public static final [EXTRA_MIME_TYPES](https://developer.android.com/reference/android/content/Intent.html#EXTRA_MIME_TYPES)
            pub const EXTRA_MIME_TYPES: &'static str = "android.intent.extra.MIME_TYPES";

            /// public static final [EXTRA_NOT_UNKNOWN_SOURCE](https://developer.android.com/reference/android/content/Intent.html#EXTRA_NOT_UNKNOWN_SOURCE)
            pub const EXTRA_NOT_UNKNOWN_SOURCE: &'static str = "android.intent.extra.NOT_UNKNOWN_SOURCE";

            /// public static final [EXTRA_ORIGINATING_URI](https://developer.android.com/reference/android/content/Intent.html#EXTRA_ORIGINATING_URI)
            pub const EXTRA_ORIGINATING_URI: &'static str = "android.intent.extra.ORIGINATING_URI";

            /// public static final [EXTRA_PACKAGE_NAME](https://developer.android.com/reference/android/content/Intent.html#EXTRA_PACKAGE_NAME)
            pub const EXTRA_PACKAGE_NAME: &'static str = "android.intent.extra.PACKAGE_NAME";

            /// public static final [EXTRA_PERMISSION_GROUP_NAME](https://developer.android.com/reference/android/content/Intent.html#EXTRA_PERMISSION_GROUP_NAME)
            pub const EXTRA_PERMISSION_GROUP_NAME: &'static str = "android.intent.extra.PERMISSION_GROUP_NAME";

            /// public static final [EXTRA_PHONE_NUMBER](https://developer.android.com/reference/android/content/Intent.html#EXTRA_PHONE_NUMBER)
            pub const EXTRA_PHONE_NUMBER: &'static str = "android.intent.extra.PHONE_NUMBER";

            /// public static final [EXTRA_PROCESS_TEXT](https://developer.android.com/reference/android/content/Intent.html#EXTRA_PROCESS_TEXT)
            pub const EXTRA_PROCESS_TEXT: &'static str = "android.intent.extra.PROCESS_TEXT";

            /// public static final [EXTRA_PROCESS_TEXT_READONLY](https://developer.android.com/reference/android/content/Intent.html#EXTRA_PROCESS_TEXT_READONLY)
            pub const EXTRA_PROCESS_TEXT_READONLY: &'static str = "android.intent.extra.PROCESS_TEXT_READONLY";

            /// public static final [EXTRA_QUICK_VIEW_FEATURES](https://developer.android.com/reference/android/content/Intent.html#EXTRA_QUICK_VIEW_FEATURES)
            pub const EXTRA_QUICK_VIEW_FEATURES: &'static str = "android.intent.extra.QUICK_VIEW_FEATURES";

            /// public static final [EXTRA_QUIET_MODE](https://developer.android.com/reference/android/content/Intent.html#EXTRA_QUIET_MODE)
            pub const EXTRA_QUIET_MODE: &'static str = "android.intent.extra.QUIET_MODE";

            /// public static final [EXTRA_REFERRER](https://developer.android.com/reference/android/content/Intent.html#EXTRA_REFERRER)
            pub const EXTRA_REFERRER: &'static str = "android.intent.extra.REFERRER";

            /// public static final [EXTRA_REFERRER_NAME](https://developer.android.com/reference/android/content/Intent.html#EXTRA_REFERRER_NAME)
            pub const EXTRA_REFERRER_NAME: &'static str = "android.intent.extra.REFERRER_NAME";

            /// public static final [EXTRA_REMOTE_INTENT_TOKEN](https://developer.android.com/reference/android/content/Intent.html#EXTRA_REMOTE_INTENT_TOKEN)
            pub const EXTRA_REMOTE_INTENT_TOKEN: &'static str = "android.intent.extra.remote_intent_token";

            /// public static final [EXTRA_REPLACEMENT_EXTRAS](https://developer.android.com/reference/android/content/Intent.html#EXTRA_REPLACEMENT_EXTRAS)
            pub const EXTRA_REPLACEMENT_EXTRAS: &'static str = "android.intent.extra.REPLACEMENT_EXTRAS";

            /// public static final [EXTRA_REPLACING](https://developer.android.com/reference/android/content/Intent.html#EXTRA_REPLACING)
            pub const EXTRA_REPLACING: &'static str = "android.intent.extra.REPLACING";

            /// public static final [EXTRA_RESTRICTIONS_BUNDLE](https://developer.android.com/reference/android/content/Intent.html#EXTRA_RESTRICTIONS_BUNDLE)
            pub const EXTRA_RESTRICTIONS_BUNDLE: &'static str = "android.intent.extra.restrictions_bundle";

            /// public static final [EXTRA_RESTRICTIONS_INTENT](https://developer.android.com/reference/android/content/Intent.html#EXTRA_RESTRICTIONS_INTENT)
            pub const EXTRA_RESTRICTIONS_INTENT: &'static str = "android.intent.extra.restrictions_intent";

            /// public static final [EXTRA_RESTRICTIONS_LIST](https://developer.android.com/reference/android/content/Intent.html#EXTRA_RESTRICTIONS_LIST)
            pub const EXTRA_RESTRICTIONS_LIST: &'static str = "android.intent.extra.restrictions_list";

            /// public static final [EXTRA_RESULT_RECEIVER](https://developer.android.com/reference/android/content/Intent.html#EXTRA_RESULT_RECEIVER)
            pub const EXTRA_RESULT_RECEIVER: &'static str = "android.intent.extra.RESULT_RECEIVER";

            /// public static final [EXTRA_RETURN_RESULT](https://developer.android.com/reference/android/content/Intent.html#EXTRA_RETURN_RESULT)
            pub const EXTRA_RETURN_RESULT: &'static str = "android.intent.extra.RETURN_RESULT";

            /// public static final [EXTRA_SHORTCUT_ICON](https://developer.android.com/reference/android/content/Intent.html#EXTRA_SHORTCUT_ICON)
            #[deprecated]
            pub const EXTRA_SHORTCUT_ICON: &'static str = "android.intent.extra.shortcut.ICON";

            /// public static final [EXTRA_SHORTCUT_ICON_RESOURCE](https://developer.android.com/reference/android/content/Intent.html#EXTRA_SHORTCUT_ICON_RESOURCE)
            #[deprecated]
            pub const EXTRA_SHORTCUT_ICON_RESOURCE: &'static str = "android.intent.extra.shortcut.ICON_RESOURCE";

            /// public static final [EXTRA_SHORTCUT_ID](https://developer.android.com/reference/android/content/Intent.html#EXTRA_SHORTCUT_ID)
            pub const EXTRA_SHORTCUT_ID: &'static str = "android.intent.extra.shortcut.ID";

            /// public static final [EXTRA_SHORTCUT_INTENT](https://developer.android.com/reference/android/content/Intent.html#EXTRA_SHORTCUT_INTENT)
            #[deprecated]
            pub const EXTRA_SHORTCUT_INTENT: &'static str = "android.intent.extra.shortcut.INTENT";

            /// public static final [EXTRA_SHORTCUT_NAME](https://developer.android.com/reference/android/content/Intent.html#EXTRA_SHORTCUT_NAME)
            #[deprecated]
            pub const EXTRA_SHORTCUT_NAME: &'static str = "android.intent.extra.shortcut.NAME";

            /// public static final [EXTRA_SHUTDOWN_USERSPACE_ONLY](https://developer.android.com/reference/android/content/Intent.html#EXTRA_SHUTDOWN_USERSPACE_ONLY)
            pub const EXTRA_SHUTDOWN_USERSPACE_ONLY: &'static str = "android.intent.extra.SHUTDOWN_USERSPACE_ONLY";

            /// public static final [EXTRA_SPLIT_NAME](https://developer.android.com/reference/android/content/Intent.html#EXTRA_SPLIT_NAME)
            pub const EXTRA_SPLIT_NAME: &'static str = "android.intent.extra.SPLIT_NAME";

            /// public static final [EXTRA_START_TIME](https://developer.android.com/reference/android/content/Intent.html#EXTRA_START_TIME)
            pub const EXTRA_START_TIME: &'static str = "android.intent.extra.START_TIME";

            /// public static final [EXTRA_STREAM](https://developer.android.com/reference/android/content/Intent.html#EXTRA_STREAM)
            pub const EXTRA_STREAM: &'static str = "android.intent.extra.STREAM";

            /// public static final [EXTRA_SUBJECT](https://developer.android.com/reference/android/content/Intent.html#EXTRA_SUBJECT)
            pub const EXTRA_SUBJECT: &'static str = "android.intent.extra.SUBJECT";

            /// public static final [EXTRA_SUSPENDED_PACKAGE_EXTRAS](https://developer.android.com/reference/android/content/Intent.html#EXTRA_SUSPENDED_PACKAGE_EXTRAS)
            pub const EXTRA_SUSPENDED_PACKAGE_EXTRAS: &'static str = "android.intent.extra.SUSPENDED_PACKAGE_EXTRAS";

            /// public static final [EXTRA_TEMPLATE](https://developer.android.com/reference/android/content/Intent.html#EXTRA_TEMPLATE)
            pub const EXTRA_TEMPLATE: &'static str = "android.intent.extra.TEMPLATE";

            /// public static final [EXTRA_TEXT](https://developer.android.com/reference/android/content/Intent.html#EXTRA_TEXT)
            pub const EXTRA_TEXT: &'static str = "android.intent.extra.TEXT";

            /// public static final [EXTRA_TIME](https://developer.android.com/reference/android/content/Intent.html#EXTRA_TIME)
            pub const EXTRA_TIME: &'static str = "android.intent.extra.TIME";

            /// public static final [EXTRA_TIMEZONE](https://developer.android.com/reference/android/content/Intent.html#EXTRA_TIMEZONE)
            pub const EXTRA_TIMEZONE: &'static str = "time-zone";

            /// public static final [EXTRA_TITLE](https://developer.android.com/reference/android/content/Intent.html#EXTRA_TITLE)
            pub const EXTRA_TITLE: &'static str = "android.intent.extra.TITLE";

            /// public static final [EXTRA_UID](https://developer.android.com/reference/android/content/Intent.html#EXTRA_UID)
            pub const EXTRA_UID: &'static str = "android.intent.extra.UID";

            /// public static final [EXTRA_USER](https://developer.android.com/reference/android/content/Intent.html#EXTRA_USER)
            pub const EXTRA_USER: &'static str = "android.intent.extra.USER";

            /// public static final [EXTRA_USER_INITIATED](https://developer.android.com/reference/android/content/Intent.html#EXTRA_USER_INITIATED)
            pub const EXTRA_USER_INITIATED: &'static str = "android.intent.extra.USER_INITIATED";

            /// public static final [FILL_IN_ACTION](https://developer.android.com/reference/android/content/Intent.html#FILL_IN_ACTION)
            pub const FILL_IN_ACTION: i32 = 1;

            /// public static final [FILL_IN_CATEGORIES](https://developer.android.com/reference/android/content/Intent.html#FILL_IN_CATEGORIES)
            pub const FILL_IN_CATEGORIES: i32 = 4;

            /// public static final [FILL_IN_CLIP_DATA](https://developer.android.com/reference/android/content/Intent.html#FILL_IN_CLIP_DATA)
            pub const FILL_IN_CLIP_DATA: i32 = 128;

            /// public static final [FILL_IN_COMPONENT](https://developer.android.com/reference/android/content/Intent.html#FILL_IN_COMPONENT)
            pub const FILL_IN_COMPONENT: i32 = 8;

            /// public static final [FILL_IN_DATA](https://developer.android.com/reference/android/content/Intent.html#FILL_IN_DATA)
            pub const FILL_IN_DATA: i32 = 2;

            /// public static final [FILL_IN_IDENTIFIER](https://developer.android.com/reference/android/content/Intent.html#FILL_IN_IDENTIFIER)
            pub const FILL_IN_IDENTIFIER: i32 = 256;

            /// public static final [FILL_IN_PACKAGE](https://developer.android.com/reference/android/content/Intent.html#FILL_IN_PACKAGE)
            pub const FILL_IN_PACKAGE: i32 = 16;

            /// public static final [FILL_IN_SELECTOR](https://developer.android.com/reference/android/content/Intent.html#FILL_IN_SELECTOR)
            pub const FILL_IN_SELECTOR: i32 = 64;

            /// public static final [FILL_IN_SOURCE_BOUNDS](https://developer.android.com/reference/android/content/Intent.html#FILL_IN_SOURCE_BOUNDS)
            pub const FILL_IN_SOURCE_BOUNDS: i32 = 32;

            /// public static final [FLAG_ACTIVITY_BROUGHT_TO_FRONT](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_BROUGHT_TO_FRONT)
            pub const FLAG_ACTIVITY_BROUGHT_TO_FRONT: i32 = 4194304;

            /// public static final [FLAG_ACTIVITY_CLEAR_TASK](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_CLEAR_TASK)
            pub const FLAG_ACTIVITY_CLEAR_TASK: i32 = 32768;

            /// public static final [FLAG_ACTIVITY_CLEAR_TOP](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_CLEAR_TOP)
            pub const FLAG_ACTIVITY_CLEAR_TOP: i32 = 67108864;

            /// public static final [FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET)
            #[deprecated]
            pub const FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET: i32 = 524288;

            /// public static final [FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)
            pub const FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS: i32 = 8388608;

            /// public static final [FLAG_ACTIVITY_FORWARD_RESULT](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_FORWARD_RESULT)
            pub const FLAG_ACTIVITY_FORWARD_RESULT: i32 = 33554432;

            /// public static final [FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY)
            pub const FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY: i32 = 1048576;

            /// public static final [FLAG_ACTIVITY_LAUNCH_ADJACENT](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_LAUNCH_ADJACENT)
            pub const FLAG_ACTIVITY_LAUNCH_ADJACENT: i32 = 4096;

            /// public static final [FLAG_ACTIVITY_MATCH_EXTERNAL](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_MATCH_EXTERNAL)
            pub const FLAG_ACTIVITY_MATCH_EXTERNAL: i32 = 2048;

            /// public static final [FLAG_ACTIVITY_MULTIPLE_TASK](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_MULTIPLE_TASK)
            pub const FLAG_ACTIVITY_MULTIPLE_TASK: i32 = 134217728;

            /// public static final [FLAG_ACTIVITY_NEW_DOCUMENT](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_DOCUMENT)
            pub const FLAG_ACTIVITY_NEW_DOCUMENT: i32 = 524288;

            /// public static final [FLAG_ACTIVITY_NEW_TASK](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_TASK)
            pub const FLAG_ACTIVITY_NEW_TASK: i32 = 268435456;

            /// public static final [FLAG_ACTIVITY_NO_ANIMATION](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NO_ANIMATION)
            pub const FLAG_ACTIVITY_NO_ANIMATION: i32 = 65536;

            /// public static final [FLAG_ACTIVITY_NO_HISTORY](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NO_HISTORY)
            pub const FLAG_ACTIVITY_NO_HISTORY: i32 = 1073741824;

            /// public static final [FLAG_ACTIVITY_NO_USER_ACTION](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NO_USER_ACTION)
            pub const FLAG_ACTIVITY_NO_USER_ACTION: i32 = 262144;

            /// public static final [FLAG_ACTIVITY_PREVIOUS_IS_TOP](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_PREVIOUS_IS_TOP)
            pub const FLAG_ACTIVITY_PREVIOUS_IS_TOP: i32 = 16777216;

            /// public static final [FLAG_ACTIVITY_REORDER_TO_FRONT](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_REORDER_TO_FRONT)
            pub const FLAG_ACTIVITY_REORDER_TO_FRONT: i32 = 131072;

            /// public static final [FLAG_ACTIVITY_REQUIRE_DEFAULT](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_REQUIRE_DEFAULT)
            pub const FLAG_ACTIVITY_REQUIRE_DEFAULT: i32 = 512;

            /// public static final [FLAG_ACTIVITY_REQUIRE_NON_BROWSER](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_REQUIRE_NON_BROWSER)
            pub const FLAG_ACTIVITY_REQUIRE_NON_BROWSER: i32 = 1024;

            /// public static final [FLAG_ACTIVITY_RESET_TASK_IF_NEEDED](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_RESET_TASK_IF_NEEDED)
            pub const FLAG_ACTIVITY_RESET_TASK_IF_NEEDED: i32 = 2097152;

            /// public static final [FLAG_ACTIVITY_RETAIN_IN_RECENTS](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_RETAIN_IN_RECENTS)
            pub const FLAG_ACTIVITY_RETAIN_IN_RECENTS: i32 = 8192;

            /// public static final [FLAG_ACTIVITY_SINGLE_TOP](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_SINGLE_TOP)
            pub const FLAG_ACTIVITY_SINGLE_TOP: i32 = 536870912;

            /// public static final [FLAG_ACTIVITY_TASK_ON_HOME](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_TASK_ON_HOME)
            pub const FLAG_ACTIVITY_TASK_ON_HOME: i32 = 16384;

            /// public static final [FLAG_DEBUG_LOG_RESOLUTION](https://developer.android.com/reference/android/content/Intent.html#FLAG_DEBUG_LOG_RESOLUTION)
            pub const FLAG_DEBUG_LOG_RESOLUTION: i32 = 8;

            /// public static final [FLAG_DIRECT_BOOT_AUTO](https://developer.android.com/reference/android/content/Intent.html#FLAG_DIRECT_BOOT_AUTO)
            pub const FLAG_DIRECT_BOOT_AUTO: i32 = 256;

            /// public static final [FLAG_EXCLUDE_STOPPED_PACKAGES](https://developer.android.com/reference/android/content/Intent.html#FLAG_EXCLUDE_STOPPED_PACKAGES)
            pub const FLAG_EXCLUDE_STOPPED_PACKAGES: i32 = 16;

            /// public static final [FLAG_FROM_BACKGROUND](https://developer.android.com/reference/android/content/Intent.html#FLAG_FROM_BACKGROUND)
            pub const FLAG_FROM_BACKGROUND: i32 = 4;

            /// public static final [FLAG_GRANT_PERSISTABLE_URI_PERMISSION](https://developer.android.com/reference/android/content/Intent.html#FLAG_GRANT_PERSISTABLE_URI_PERMISSION)
            pub const FLAG_GRANT_PERSISTABLE_URI_PERMISSION: i32 = 64;

            /// public static final [FLAG_GRANT_PREFIX_URI_PERMISSION](https://developer.android.com/reference/android/content/Intent.html#FLAG_GRANT_PREFIX_URI_PERMISSION)
            pub const FLAG_GRANT_PREFIX_URI_PERMISSION: i32 = 128;

            /// public static final [FLAG_GRANT_READ_URI_PERMISSION](https://developer.android.com/reference/android/content/Intent.html#FLAG_GRANT_READ_URI_PERMISSION)
            pub const FLAG_GRANT_READ_URI_PERMISSION: i32 = 1;

            /// public static final [FLAG_GRANT_WRITE_URI_PERMISSION](https://developer.android.com/reference/android/content/Intent.html#FLAG_GRANT_WRITE_URI_PERMISSION)
            pub const FLAG_GRANT_WRITE_URI_PERMISSION: i32 = 2;

            /// public static final [FLAG_INCLUDE_STOPPED_PACKAGES](https://developer.android.com/reference/android/content/Intent.html#FLAG_INCLUDE_STOPPED_PACKAGES)
            pub const FLAG_INCLUDE_STOPPED_PACKAGES: i32 = 32;

            /// public static final [FLAG_RECEIVER_FOREGROUND](https://developer.android.com/reference/android/content/Intent.html#FLAG_RECEIVER_FOREGROUND)
            pub const FLAG_RECEIVER_FOREGROUND: i32 = 268435456;

            /// public static final [FLAG_RECEIVER_NO_ABORT](https://developer.android.com/reference/android/content/Intent.html#FLAG_RECEIVER_NO_ABORT)
            pub const FLAG_RECEIVER_NO_ABORT: i32 = 134217728;

            /// public static final [FLAG_RECEIVER_REGISTERED_ONLY](https://developer.android.com/reference/android/content/Intent.html#FLAG_RECEIVER_REGISTERED_ONLY)
            pub const FLAG_RECEIVER_REGISTERED_ONLY: i32 = 1073741824;

            /// public static final [FLAG_RECEIVER_REPLACE_PENDING](https://developer.android.com/reference/android/content/Intent.html#FLAG_RECEIVER_REPLACE_PENDING)
            pub const FLAG_RECEIVER_REPLACE_PENDING: i32 = 536870912;

            /// public static final [FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS](https://developer.android.com/reference/android/content/Intent.html#FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS)
            pub const FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS: i32 = 2097152;

            /// public static final [METADATA_DOCK_HOME](https://developer.android.com/reference/android/content/Intent.html#METADATA_DOCK_HOME)
            pub const METADATA_DOCK_HOME: &'static str = "android.dock_home";

            /// public static final [URI_ALLOW_UNSAFE](https://developer.android.com/reference/android/content/Intent.html#URI_ALLOW_UNSAFE)
            pub const URI_ALLOW_UNSAFE: i32 = 4;

            /// public static final [URI_ANDROID_APP_SCHEME](https://developer.android.com/reference/android/content/Intent.html#URI_ANDROID_APP_SCHEME)
            pub const URI_ANDROID_APP_SCHEME: i32 = 2;

            /// public static final [URI_INTENT_SCHEME](https://developer.android.com/reference/android/content/Intent.html#URI_INTENT_SCHEME)
            pub const URI_INTENT_SCHEME: i32 = 1;
        }

        /// pub class [IntentFilter](https://developer.android.com/reference/android/content/IntentFilter.html)
        #[repr(transparent)]
        pub struct IntentFilter(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for IntentFilter {}

        unsafe impl ::java_spaghetti::JniType for IntentFilter {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/content/IntentFilter\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::os::Parcelable> for IntentFilter {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for IntentFilter {}
        impl ::std::ops::Deref for IntentFilter {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<super::os::Parcelable> for IntentFilter {
            fn as_ref(&self) -> &super::os::Parcelable {
                unsafe { &*(self as *const Self as *const super::os::Parcelable) }
            }
        }
        impl IntentFilter {
            /// [IntentFilter](https://developer.android.com/reference/android/content/IntentFilter.html#IntentFilter())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/IntentFilter\0", "<init>\0", "()V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [IntentFilter](https://developer.android.com/reference/android/content/IntentFilter.html#IntentFilter(java.lang.String))
            pub fn new_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "<init>\0",
                        "(Ljava/lang/String;)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [IntentFilter](https://developer.android.com/reference/android/content/IntentFilter.html#IntentFilter(java.lang.String,%20java.lang.String))
            pub fn new_String_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "<init>\0",
                        "(Ljava/lang/String;Ljava/lang/String;)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [IntentFilter](https://developer.android.com/reference/android/content/IntentFilter.html#IntentFilter(android.content.IntentFilter))
            pub fn new_IntentFilter<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<IntentFilter>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/IntentFilter;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "<init>\0",
                        "(Landroid/content/IntentFilter;)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [create](https://developer.android.com/reference/android/content/IntentFilter.html#create(java.lang.String,%20java.lang.String))
            pub fn create<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, IntentFilter>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | STATIC, .name == "create", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Landroid/content/IntentFilter;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "android/content/IntentFilter\0",
                        "create\0",
                        "(Ljava/lang/String;Ljava/lang/String;)Landroid/content/IntentFilter;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setPriority](https://developer.android.com/reference/android/content/IntentFilter.html#setPriority(int))
            pub fn setPriority<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "setPriority", .descriptor == "(I)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/IntentFilter\0", "setPriority\0", "(I)V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getPriority](https://developer.android.com/reference/android/content/IntentFilter.html#getPriority())
            pub fn getPriority<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "getPriority", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/IntentFilter\0", "getPriority\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [addAction](https://developer.android.com/reference/android/content/IntentFilter.html#addAction(java.lang.String))
            pub fn addAction<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "addAction", .descriptor == "(Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "addAction\0",
                        "(Ljava/lang/String;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [countActions](https://developer.android.com/reference/android/content/IntentFilter.html#countActions())
            pub fn countActions<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "countActions", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/IntentFilter\0", "countActions\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getAction](https://developer.android.com/reference/android/content/IntentFilter.html#getAction(int))
            pub fn getAction<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "getAction", .descriptor == "(I)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "getAction\0",
                        "(I)Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hasAction](https://developer.android.com/reference/android/content/IntentFilter.html#hasAction(java.lang.String))
            pub fn hasAction<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "hasAction", .descriptor == "(Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "hasAction\0",
                        "(Ljava/lang/String;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [matchAction](https://developer.android.com/reference/android/content/IntentFilter.html#matchAction(java.lang.String))
            pub fn matchAction<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "matchAction", .descriptor == "(Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "matchAction\0",
                        "(Ljava/lang/String;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [actionsIterator](https://developer.android.com/reference/android/content/IntentFilter.html#actionsIterator())
            pub fn actionsIterator<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::Iterator>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "actionsIterator", .descriptor == "()Ljava/util/Iterator;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "actionsIterator\0",
                        "()Ljava/util/Iterator;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [addDataType](https://developer.android.com/reference/android/content/IntentFilter.html#addDataType(java.lang.String))
            pub fn addDataType<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "addDataType", .descriptor == "(Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "addDataType\0",
                        "(Ljava/lang/String;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hasDataType](https://developer.android.com/reference/android/content/IntentFilter.html#hasDataType(java.lang.String))
            pub fn hasDataType<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "hasDataType", .descriptor == "(Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "hasDataType\0",
                        "(Ljava/lang/String;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [countDataTypes](https://developer.android.com/reference/android/content/IntentFilter.html#countDataTypes())
            pub fn countDataTypes<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "countDataTypes", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/IntentFilter\0", "countDataTypes\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDataType](https://developer.android.com/reference/android/content/IntentFilter.html#getDataType(int))
            pub fn getDataType<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "getDataType", .descriptor == "(I)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "getDataType\0",
                        "(I)Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [typesIterator](https://developer.android.com/reference/android/content/IntentFilter.html#typesIterator())
            pub fn typesIterator<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::Iterator>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "typesIterator", .descriptor == "()Ljava/util/Iterator;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "typesIterator\0",
                        "()Ljava/util/Iterator;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [addDataScheme](https://developer.android.com/reference/android/content/IntentFilter.html#addDataScheme(java.lang.String))
            pub fn addDataScheme<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "addDataScheme", .descriptor == "(Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "addDataScheme\0",
                        "(Ljava/lang/String;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [countDataSchemes](https://developer.android.com/reference/android/content/IntentFilter.html#countDataSchemes())
            pub fn countDataSchemes<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "countDataSchemes", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/IntentFilter\0", "countDataSchemes\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDataScheme](https://developer.android.com/reference/android/content/IntentFilter.html#getDataScheme(int))
            pub fn getDataScheme<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "getDataScheme", .descriptor == "(I)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "getDataScheme\0",
                        "(I)Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hasDataScheme](https://developer.android.com/reference/android/content/IntentFilter.html#hasDataScheme(java.lang.String))
            pub fn hasDataScheme<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "hasDataScheme", .descriptor == "(Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "hasDataScheme\0",
                        "(Ljava/lang/String;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [schemesIterator](https://developer.android.com/reference/android/content/IntentFilter.html#schemesIterator())
            pub fn schemesIterator<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::Iterator>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "schemesIterator", .descriptor == "()Ljava/util/Iterator;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "schemesIterator\0",
                        "()Ljava/util/Iterator;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [addDataSchemeSpecificPart](https://developer.android.com/reference/android/content/IntentFilter.html#addDataSchemeSpecificPart(java.lang.String,%20int))
            pub fn addDataSchemeSpecificPart<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "addDataSchemeSpecificPart", .descriptor == "(Ljava/lang/String;I)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "addDataSchemeSpecificPart\0",
                        "(Ljava/lang/String;I)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [countDataSchemeSpecificParts](https://developer.android.com/reference/android/content/IntentFilter.html#countDataSchemeSpecificParts())
            pub fn countDataSchemeSpecificParts<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "countDataSchemeSpecificParts", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "countDataSchemeSpecificParts\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hasDataSchemeSpecificPart](https://developer.android.com/reference/android/content/IntentFilter.html#hasDataSchemeSpecificPart(java.lang.String))
            pub fn hasDataSchemeSpecificPart<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "hasDataSchemeSpecificPart", .descriptor == "(Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "hasDataSchemeSpecificPart\0",
                        "(Ljava/lang/String;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [schemeSpecificPartsIterator](https://developer.android.com/reference/android/content/IntentFilter.html#schemeSpecificPartsIterator())
            pub fn schemeSpecificPartsIterator<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::Iterator>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "schemeSpecificPartsIterator", .descriptor == "()Ljava/util/Iterator;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "schemeSpecificPartsIterator\0",
                        "()Ljava/util/Iterator;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [addDataAuthority](https://developer.android.com/reference/android/content/IntentFilter.html#addDataAuthority(java.lang.String,%20java.lang.String))
            pub fn addDataAuthority<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "addDataAuthority", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "addDataAuthority\0",
                        "(Ljava/lang/String;Ljava/lang/String;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [countDataAuthorities](https://developer.android.com/reference/android/content/IntentFilter.html#countDataAuthorities())
            pub fn countDataAuthorities<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "countDataAuthorities", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "countDataAuthorities\0",
                        "()I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [authoritiesIterator](https://developer.android.com/reference/android/content/IntentFilter.html#authoritiesIterator())
            pub fn authoritiesIterator<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::Iterator>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "authoritiesIterator", .descriptor == "()Ljava/util/Iterator;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "authoritiesIterator\0",
                        "()Ljava/util/Iterator;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [addDataPath](https://developer.android.com/reference/android/content/IntentFilter.html#addDataPath(java.lang.String,%20int))
            pub fn addDataPath<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "addDataPath", .descriptor == "(Ljava/lang/String;I)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "addDataPath\0",
                        "(Ljava/lang/String;I)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [countDataPaths](https://developer.android.com/reference/android/content/IntentFilter.html#countDataPaths())
            pub fn countDataPaths<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "countDataPaths", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/IntentFilter\0", "countDataPaths\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hasDataPath](https://developer.android.com/reference/android/content/IntentFilter.html#hasDataPath(java.lang.String))
            pub fn hasDataPath<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "hasDataPath", .descriptor == "(Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "hasDataPath\0",
                        "(Ljava/lang/String;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [pathsIterator](https://developer.android.com/reference/android/content/IntentFilter.html#pathsIterator())
            pub fn pathsIterator<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::Iterator>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "pathsIterator", .descriptor == "()Ljava/util/Iterator;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "pathsIterator\0",
                        "()Ljava/util/Iterator;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [addCategory](https://developer.android.com/reference/android/content/IntentFilter.html#addCategory(java.lang.String))
            pub fn addCategory<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "addCategory", .descriptor == "(Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "addCategory\0",
                        "(Ljava/lang/String;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [countCategories](https://developer.android.com/reference/android/content/IntentFilter.html#countCategories())
            pub fn countCategories<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "countCategories", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/IntentFilter\0", "countCategories\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCategory](https://developer.android.com/reference/android/content/IntentFilter.html#getCategory(int))
            pub fn getCategory<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "getCategory", .descriptor == "(I)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "getCategory\0",
                        "(I)Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hasCategory](https://developer.android.com/reference/android/content/IntentFilter.html#hasCategory(java.lang.String))
            pub fn hasCategory<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "hasCategory", .descriptor == "(Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "hasCategory\0",
                        "(Ljava/lang/String;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [categoriesIterator](https://developer.android.com/reference/android/content/IntentFilter.html#categoriesIterator())
            pub fn categoriesIterator<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::Iterator>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "categoriesIterator", .descriptor == "()Ljava/util/Iterator;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "categoriesIterator\0",
                        "()Ljava/util/Iterator;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [matchCategories](https://developer.android.com/reference/android/content/IntentFilter.html#matchCategories(java.util.Set))
            pub fn matchCategories<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::Set>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "matchCategories", .descriptor == "(Ljava/util/Set;)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/content/IntentFilter\0",
                        "matchCategories\0",
                        "(Ljava/util/Set;)Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [describeContents](https://developer.android.com/reference/android/content/IntentFilter.html#describeContents())
            pub fn describeContents<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/content/IntentFilter", java.flags == PUBLIC | FINAL, .name == "describeContents", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/content/IntentFilter\0", "describeContents\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [MATCH_ADJUSTMENT_MASK](https://developer.android.com/reference/android/content/IntentFilter.html#MATCH_ADJUSTMENT_MASK)
            pub const MATCH_ADJUSTMENT_MASK: i32 = 65535;

            /// public static final [MATCH_ADJUSTMENT_NORMAL](https://developer.android.com/reference/android/content/IntentFilter.html#MATCH_ADJUSTMENT_NORMAL)
            pub const MATCH_ADJUSTMENT_NORMAL: i32 = 32768;

            /// public static final [MATCH_CATEGORY_EMPTY](https://developer.android.com/reference/android/content/IntentFilter.html#MATCH_CATEGORY_EMPTY)
            pub const MATCH_CATEGORY_EMPTY: i32 = 1048576;

            /// public static final [MATCH_CATEGORY_HOST](https://developer.android.com/reference/android/content/IntentFilter.html#MATCH_CATEGORY_HOST)
            pub const MATCH_CATEGORY_HOST: i32 = 3145728;

            /// public static final [MATCH_CATEGORY_MASK](https://developer.android.com/reference/android/content/IntentFilter.html#MATCH_CATEGORY_MASK)
            pub const MATCH_CATEGORY_MASK: i32 = 268369920;

            /// public static final [MATCH_CATEGORY_PATH](https://developer.android.com/reference/android/content/IntentFilter.html#MATCH_CATEGORY_PATH)
            pub const MATCH_CATEGORY_PATH: i32 = 5242880;

            /// public static final [MATCH_CATEGORY_PORT](https://developer.android.com/reference/android/content/IntentFilter.html#MATCH_CATEGORY_PORT)
            pub const MATCH_CATEGORY_PORT: i32 = 4194304;

            /// public static final [MATCH_CATEGORY_SCHEME](https://developer.android.com/reference/android/content/IntentFilter.html#MATCH_CATEGORY_SCHEME)
            pub const MATCH_CATEGORY_SCHEME: i32 = 2097152;

            /// public static final [MATCH_CATEGORY_SCHEME_SPECIFIC_PART](https://developer.android.com/reference/android/content/IntentFilter.html#MATCH_CATEGORY_SCHEME_SPECIFIC_PART)
            pub const MATCH_CATEGORY_SCHEME_SPECIFIC_PART: i32 = 5767168;

            /// public static final [MATCH_CATEGORY_TYPE](https://developer.android.com/reference/android/content/IntentFilter.html#MATCH_CATEGORY_TYPE)
            pub const MATCH_CATEGORY_TYPE: i32 = 6291456;

            /// public static final [NO_MATCH_ACTION](https://developer.android.com/reference/android/content/IntentFilter.html#NO_MATCH_ACTION)
            pub const NO_MATCH_ACTION: i32 = -3;

            /// public static final [NO_MATCH_CATEGORY](https://developer.android.com/reference/android/content/IntentFilter.html#NO_MATCH_CATEGORY)
            pub const NO_MATCH_CATEGORY: i32 = -4;

            /// public static final [NO_MATCH_DATA](https://developer.android.com/reference/android/content/IntentFilter.html#NO_MATCH_DATA)
            pub const NO_MATCH_DATA: i32 = -2;

            /// public static final [NO_MATCH_TYPE](https://developer.android.com/reference/android/content/IntentFilter.html#NO_MATCH_TYPE)
            pub const NO_MATCH_TYPE: i32 = -1;

            /// public static final [SYSTEM_HIGH_PRIORITY](https://developer.android.com/reference/android/content/IntentFilter.html#SYSTEM_HIGH_PRIORITY)
            pub const SYSTEM_HIGH_PRIORITY: i32 = 1000;

            /// public static final [SYSTEM_LOW_PRIORITY](https://developer.android.com/reference/android/content/IntentFilter.html#SYSTEM_LOW_PRIORITY)
            pub const SYSTEM_LOW_PRIORITY: i32 = -1000;
        }
    }

    pub mod os {

        /// pub class [Build.VERSION](https://developer.android.com/reference/android/os/Build.VERSION.html)
        #[repr(transparent)]
        pub struct Build_VERSION(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for Build_VERSION {}

        unsafe impl ::java_spaghetti::JniType for Build_VERSION {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/os/Build$VERSION\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for Build_VERSION {}
        impl ::std::ops::Deref for Build_VERSION {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl Build_VERSION {
            /// [VERSION](https://developer.android.com/reference/android/os/Build.VERSION.html#VERSION())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/os/Build$VERSION", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/os/Build$VERSION\0", "<init>\0", "()V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// **get** public static final [BASE_OS](https://developer.android.com/reference/android/os/Build.VERSION.html#BASE_OS)
            pub fn BASE_OS<'env>(
                env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>> {
                unsafe {
                    let (__jni_class, __jni_field) = env.require_class_static_field(
                        "android/os/Build$VERSION\0",
                        "BASE_OS\0",
                        "Ljava/lang/String;\0",
                    );
                    env.get_static_object_field(__jni_class, __jni_field)
                }
            }

            /// **get** public static final [CODENAME](https://developer.android.com/reference/android/os/Build.VERSION.html#CODENAME)
            pub fn CODENAME<'env>(
                env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>> {
                unsafe {
                    let (__jni_class, __jni_field) = env.require_class_static_field(
                        "android/os/Build$VERSION\0",
                        "CODENAME\0",
                        "Ljava/lang/String;\0",
                    );
                    env.get_static_object_field(__jni_class, __jni_field)
                }
            }

            /// **get** public static final [INCREMENTAL](https://developer.android.com/reference/android/os/Build.VERSION.html#INCREMENTAL)
            pub fn INCREMENTAL<'env>(
                env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>> {
                unsafe {
                    let (__jni_class, __jni_field) = env.require_class_static_field(
                        "android/os/Build$VERSION\0",
                        "INCREMENTAL\0",
                        "Ljava/lang/String;\0",
                    );
                    env.get_static_object_field(__jni_class, __jni_field)
                }
            }

            /// **get** public static final [MEDIA_PERFORMANCE_CLASS](https://developer.android.com/reference/android/os/Build.VERSION.html#MEDIA_PERFORMANCE_CLASS)
            pub fn MEDIA_PERFORMANCE_CLASS<'env>(env: ::java_spaghetti::Env<'env>) -> i32 {
                unsafe {
                    let (__jni_class, __jni_field) = env.require_class_static_field(
                        "android/os/Build$VERSION\0",
                        "MEDIA_PERFORMANCE_CLASS\0",
                        "I\0",
                    );
                    env.get_static_int_field(__jni_class, __jni_field)
                }
            }

            /// **get** public static final [PREVIEW_SDK_INT](https://developer.android.com/reference/android/os/Build.VERSION.html#PREVIEW_SDK_INT)
            pub fn PREVIEW_SDK_INT<'env>(env: ::java_spaghetti::Env<'env>) -> i32 {
                unsafe {
                    let (__jni_class, __jni_field) =
                        env.require_class_static_field("android/os/Build$VERSION\0", "PREVIEW_SDK_INT\0", "I\0");
                    env.get_static_int_field(__jni_class, __jni_field)
                }
            }

            /// **get** public static final [RELEASE](https://developer.android.com/reference/android/os/Build.VERSION.html#RELEASE)
            pub fn RELEASE<'env>(
                env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>> {
                unsafe {
                    let (__jni_class, __jni_field) = env.require_class_static_field(
                        "android/os/Build$VERSION\0",
                        "RELEASE\0",
                        "Ljava/lang/String;\0",
                    );
                    env.get_static_object_field(__jni_class, __jni_field)
                }
            }

            /// **get** public static final [RELEASE_OR_CODENAME](https://developer.android.com/reference/android/os/Build.VERSION.html#RELEASE_OR_CODENAME)
            pub fn RELEASE_OR_CODENAME<'env>(
                env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>> {
                unsafe {
                    let (__jni_class, __jni_field) = env.require_class_static_field(
                        "android/os/Build$VERSION\0",
                        "RELEASE_OR_CODENAME\0",
                        "Ljava/lang/String;\0",
                    );
                    env.get_static_object_field(__jni_class, __jni_field)
                }
            }

            /// **get** public static final [RELEASE_OR_PREVIEW_DISPLAY](https://developer.android.com/reference/android/os/Build.VERSION.html#RELEASE_OR_PREVIEW_DISPLAY)
            pub fn RELEASE_OR_PREVIEW_DISPLAY<'env>(
                env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>> {
                unsafe {
                    let (__jni_class, __jni_field) = env.require_class_static_field(
                        "android/os/Build$VERSION\0",
                        "RELEASE_OR_PREVIEW_DISPLAY\0",
                        "Ljava/lang/String;\0",
                    );
                    env.get_static_object_field(__jni_class, __jni_field)
                }
            }

            /// **get** public static final [SDK](https://developer.android.com/reference/android/os/Build.VERSION.html#SDK)
            #[deprecated]
            pub fn SDK<'env>(
                env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>> {
                unsafe {
                    let (__jni_class, __jni_field) =
                        env.require_class_static_field("android/os/Build$VERSION\0", "SDK\0", "Ljava/lang/String;\0");
                    env.get_static_object_field(__jni_class, __jni_field)
                }
            }

            /// **get** public static final [SDK_INT](https://developer.android.com/reference/android/os/Build.VERSION.html#SDK_INT)
            pub fn SDK_INT<'env>(env: ::java_spaghetti::Env<'env>) -> i32 {
                unsafe {
                    let (__jni_class, __jni_field) =
                        env.require_class_static_field("android/os/Build$VERSION\0", "SDK_INT\0", "I\0");
                    env.get_static_int_field(__jni_class, __jni_field)
                }
            }

            /// **get** public static final [SECURITY_PATCH](https://developer.android.com/reference/android/os/Build.VERSION.html#SECURITY_PATCH)
            pub fn SECURITY_PATCH<'env>(
                env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>> {
                unsafe {
                    let (__jni_class, __jni_field) = env.require_class_static_field(
                        "android/os/Build$VERSION\0",
                        "SECURITY_PATCH\0",
                        "Ljava/lang/String;\0",
                    );
                    env.get_static_object_field(__jni_class, __jni_field)
                }
            }
        }

        /// pub interface [IBinder](https://developer.android.com/reference/android/os/IBinder.html)
        #[repr(transparent)]
        pub struct IBinder(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for IBinder {}

        unsafe impl ::java_spaghetti::JniType for IBinder {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/os/IBinder\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for IBinder {}
        impl ::std::ops::Deref for IBinder {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl IBinder {
            /// [getSuggestedMaxIpcSizeBytes](https://developer.android.com/reference/android/os/IBinder.html#getSuggestedMaxIpcSizeBytes())
            pub fn getSuggestedMaxIpcSizeBytes<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/os/IBinder", java.flags == PUBLIC | STATIC, .name == "getSuggestedMaxIpcSizeBytes", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "android/os/IBinder\0",
                        "getSuggestedMaxIpcSizeBytes\0",
                        "()I\0",
                    );
                    __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getInterfaceDescriptor](https://developer.android.com/reference/android/os/IBinder.html#getInterfaceDescriptor())
            pub fn getInterfaceDescriptor<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/os/IBinder", java.flags == PUBLIC | ABSTRACT, .name == "getInterfaceDescriptor", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/os/IBinder\0",
                        "getInterfaceDescriptor\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [pingBinder](https://developer.android.com/reference/android/os/IBinder.html#pingBinder())
            pub fn pingBinder<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/os/IBinder", java.flags == PUBLIC | ABSTRACT, .name == "pingBinder", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/os/IBinder\0", "pingBinder\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isBinderAlive](https://developer.android.com/reference/android/os/IBinder.html#isBinderAlive())
            pub fn isBinderAlive<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/os/IBinder", java.flags == PUBLIC | ABSTRACT, .name == "isBinderAlive", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/os/IBinder\0", "isBinderAlive\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [DUMP_TRANSACTION](https://developer.android.com/reference/android/os/IBinder.html#DUMP_TRANSACTION)
            pub const DUMP_TRANSACTION: i32 = 1598311760;

            /// public static final [FIRST_CALL_TRANSACTION](https://developer.android.com/reference/android/os/IBinder.html#FIRST_CALL_TRANSACTION)
            pub const FIRST_CALL_TRANSACTION: i32 = 1;

            /// public static final [FLAG_ONEWAY](https://developer.android.com/reference/android/os/IBinder.html#FLAG_ONEWAY)
            pub const FLAG_ONEWAY: i32 = 1;

            /// public static final [INTERFACE_TRANSACTION](https://developer.android.com/reference/android/os/IBinder.html#INTERFACE_TRANSACTION)
            pub const INTERFACE_TRANSACTION: i32 = 1598968902;

            /// public static final [LAST_CALL_TRANSACTION](https://developer.android.com/reference/android/os/IBinder.html#LAST_CALL_TRANSACTION)
            pub const LAST_CALL_TRANSACTION: i32 = 16777215;

            /// public static final [LIKE_TRANSACTION](https://developer.android.com/reference/android/os/IBinder.html#LIKE_TRANSACTION)
            pub const LIKE_TRANSACTION: i32 = 1598835019;

            /// public static final [PING_TRANSACTION](https://developer.android.com/reference/android/os/IBinder.html#PING_TRANSACTION)
            pub const PING_TRANSACTION: i32 = 1599098439;

            /// public static final [TWEET_TRANSACTION](https://developer.android.com/reference/android/os/IBinder.html#TWEET_TRANSACTION)
            pub const TWEET_TRANSACTION: i32 = 1599362900;
        }

        /// pub final class [ParcelUuid](https://developer.android.com/reference/android/os/ParcelUuid.html)
        #[repr(transparent)]
        pub struct ParcelUuid(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for ParcelUuid {}

        unsafe impl ::java_spaghetti::JniType for ParcelUuid {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/os/ParcelUuid\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<Parcelable> for ParcelUuid {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for ParcelUuid {}
        impl ::std::ops::Deref for ParcelUuid {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<Parcelable> for ParcelUuid {
            fn as_ref(&self) -> &Parcelable {
                unsafe { &*(self as *const Self as *const Parcelable) }
            }
        }
        impl ParcelUuid {
            /// [ParcelUuid](https://developer.android.com/reference/android/os/ParcelUuid.html#ParcelUuid(java.util.UUID))
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::util::UUID>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/os/ParcelUuid", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/util/UUID;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/os/ParcelUuid\0", "<init>\0", "(Ljava/util/UUID;)V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [fromString](https://developer.android.com/reference/android/os/ParcelUuid.html#fromString(java.lang.String))
            pub fn fromString<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ParcelUuid>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/os/ParcelUuid", java.flags == PUBLIC | STATIC, .name == "fromString", .descriptor == "(Ljava/lang/String;)Landroid/os/ParcelUuid;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "android/os/ParcelUuid\0",
                        "fromString\0",
                        "(Ljava/lang/String;)Landroid/os/ParcelUuid;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getUuid](https://developer.android.com/reference/android/os/ParcelUuid.html#getUuid())
            pub fn getUuid<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::util::UUID>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/os/ParcelUuid", java.flags == PUBLIC, .name == "getUuid", .descriptor == "()Ljava/util/UUID;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/os/ParcelUuid\0", "getUuid\0", "()Ljava/util/UUID;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toString](https://developer.android.com/reference/android/os/ParcelUuid.html#toString())
            pub fn toString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/os/ParcelUuid", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/os/ParcelUuid\0",
                        "toString\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hashCode](https://developer.android.com/reference/android/os/ParcelUuid.html#hashCode())
            pub fn hashCode<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/os/ParcelUuid", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/os/ParcelUuid\0", "hashCode\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [equals](https://developer.android.com/reference/android/os/ParcelUuid.html#equals(java.lang.Object))
            pub fn equals<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/os/ParcelUuid", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/os/ParcelUuid\0",
                        "equals\0",
                        "(Ljava/lang/Object;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [describeContents](https://developer.android.com/reference/android/os/ParcelUuid.html#describeContents())
            pub fn describeContents<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/os/ParcelUuid", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/os/ParcelUuid\0", "describeContents\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub interface [Parcelable](https://developer.android.com/reference/android/os/Parcelable.html)
        #[repr(transparent)]
        pub struct Parcelable(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for Parcelable {}

        unsafe impl ::java_spaghetti::JniType for Parcelable {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/os/Parcelable\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for Parcelable {}
        impl ::std::ops::Deref for Parcelable {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl Parcelable {
            /// [describeContents](https://developer.android.com/reference/android/os/Parcelable.html#describeContents())
            pub fn describeContents<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/os/Parcelable", java.flags == PUBLIC | ABSTRACT, .name == "describeContents", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/os/Parcelable\0", "describeContents\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// public static final [CONTENTS_FILE_DESCRIPTOR](https://developer.android.com/reference/android/os/Parcelable.html#CONTENTS_FILE_DESCRIPTOR)
            pub const CONTENTS_FILE_DESCRIPTOR: i32 = 1;

            /// public static final [PARCELABLE_WRITE_RETURN_VALUE](https://developer.android.com/reference/android/os/Parcelable.html#PARCELABLE_WRITE_RETURN_VALUE)
            pub const PARCELABLE_WRITE_RETURN_VALUE: i32 = 1;
        }
    }

    pub mod util {

        /// pub class [SparseArray](https://developer.android.com/reference/android/util/SparseArray.html)
        #[repr(transparent)]
        pub struct SparseArray(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for SparseArray {}

        unsafe impl ::java_spaghetti::JniType for SparseArray {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("android/util/SparseArray\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for SparseArray {}
        impl ::std::ops::Deref for SparseArray {
            type Target = super::super::java::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl SparseArray {
            /// [SparseArray](https://developer.android.com/reference/android/util/SparseArray.html#SparseArray())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/util/SparseArray\0", "<init>\0", "()V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [SparseArray](https://developer.android.com/reference/android/util/SparseArray.html#SparseArray(int))
            pub fn new_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "<init>", .descriptor == "(I)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/util/SparseArray\0", "<init>\0", "(I)V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [clone](https://developer.android.com/reference/android/util/SparseArray.html#clone())
            pub fn clone<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, SparseArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "clone", .descriptor == "()Landroid/util/SparseArray;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/util/SparseArray\0",
                        "clone\0",
                        "()Landroid/util/SparseArray;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [contains](https://developer.android.com/reference/android/util/SparseArray.html#contains(int))
            pub fn contains<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "contains", .descriptor == "(I)Z"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/util/SparseArray\0", "contains\0", "(I)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [get](https://developer.android.com/reference/android/util/SparseArray.html#get(int))
            pub fn get_int<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::Object>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "get", .descriptor == "(I)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/util/SparseArray\0",
                        "get\0",
                        "(I)Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [get](https://developer.android.com/reference/android/util/SparseArray.html#get(int,%20java.lang.Object))
            pub fn get_int_Object<'env>(
                &'env self,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::Object>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "get", .descriptor == "(ILjava/lang/Object;)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/util/SparseArray\0",
                        "get\0",
                        "(ILjava/lang/Object;)Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [delete](https://developer.android.com/reference/android/util/SparseArray.html#delete(int))
            pub fn delete<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "delete", .descriptor == "(I)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/util/SparseArray\0", "delete\0", "(I)V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [remove](https://developer.android.com/reference/android/util/SparseArray.html#remove(int))
            pub fn remove<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "remove", .descriptor == "(I)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/util/SparseArray\0", "remove\0", "(I)V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [removeAt](https://developer.android.com/reference/android/util/SparseArray.html#removeAt(int))
            pub fn removeAt<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "removeAt", .descriptor == "(I)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/util/SparseArray\0", "removeAt\0", "(I)V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [removeAtRange](https://developer.android.com/reference/android/util/SparseArray.html#removeAtRange(int,%20int))
            pub fn removeAtRange<'env>(
                &'env self,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "removeAtRange", .descriptor == "(II)V"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/util/SparseArray\0", "removeAtRange\0", "(II)V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [set](https://developer.android.com/reference/android/util/SparseArray.html#set(int,%20java.lang.Object))
            pub fn set<'env>(
                &'env self,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "set", .descriptor == "(ILjava/lang/Object;)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/util/SparseArray\0",
                        "set\0",
                        "(ILjava/lang/Object;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [put](https://developer.android.com/reference/android/util/SparseArray.html#put(int,%20java.lang.Object))
            pub fn put<'env>(
                &'env self,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "put", .descriptor == "(ILjava/lang/Object;)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/util/SparseArray\0",
                        "put\0",
                        "(ILjava/lang/Object;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [size](https://developer.android.com/reference/android/util/SparseArray.html#size())
            pub fn size<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "size", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/util/SparseArray\0", "size\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [keyAt](https://developer.android.com/reference/android/util/SparseArray.html#keyAt(int))
            pub fn keyAt<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "keyAt", .descriptor == "(I)I"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/util/SparseArray\0", "keyAt\0", "(I)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [valueAt](https://developer.android.com/reference/android/util/SparseArray.html#valueAt(int))
            pub fn valueAt<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::Object>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "valueAt", .descriptor == "(I)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/util/SparseArray\0",
                        "valueAt\0",
                        "(I)Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setValueAt](https://developer.android.com/reference/android/util/SparseArray.html#setValueAt(int,%20java.lang.Object))
            pub fn setValueAt<'env>(
                &'env self,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "setValueAt", .descriptor == "(ILjava/lang/Object;)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/util/SparseArray\0",
                        "setValueAt\0",
                        "(ILjava/lang/Object;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [indexOfKey](https://developer.android.com/reference/android/util/SparseArray.html#indexOfKey(int))
            pub fn indexOfKey<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "indexOfKey", .descriptor == "(I)I"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/util/SparseArray\0", "indexOfKey\0", "(I)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [indexOfValue](https://developer.android.com/reference/android/util/SparseArray.html#indexOfValue(java.lang.Object))
            pub fn indexOfValue<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "indexOfValue", .descriptor == "(Ljava/lang/Object;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/util/SparseArray\0",
                        "indexOfValue\0",
                        "(Ljava/lang/Object;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [clear](https://developer.android.com/reference/android/util/SparseArray.html#clear())
            pub fn clear<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "clear", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/util/SparseArray\0", "clear\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [append](https://developer.android.com/reference/android/util/SparseArray.html#append(int,%20java.lang.Object))
            pub fn append<'env>(
                &'env self,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "append", .descriptor == "(ILjava/lang/Object;)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/util/SparseArray\0",
                        "append\0",
                        "(ILjava/lang/Object;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toString](https://developer.android.com/reference/android/util/SparseArray.html#toString())
            pub fn toString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/util/SparseArray\0",
                        "toString\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [contentEquals](https://developer.android.com/reference/android/util/SparseArray.html#contentEquals(android.util.SparseArray))
            pub fn contentEquals<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<SparseArray>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "contentEquals", .descriptor == "(Landroid/util/SparseArray;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "android/util/SparseArray\0",
                        "contentEquals\0",
                        "(Landroid/util/SparseArray;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [contentHashCode](https://developer.android.com/reference/android/util/SparseArray.html#contentHashCode())
            pub fn contentHashCode<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                // class.path == "android/util/SparseArray", java.flags == PUBLIC, .name == "contentHashCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("android/util/SparseArray\0", "contentHashCode\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }
    }
}

pub mod dalvik {

    pub mod system {

        /// pub class [BaseDexClassLoader](https://developer.android.com/reference/dalvik/system/BaseDexClassLoader.html)
        #[repr(transparent)]
        pub struct BaseDexClassLoader(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for BaseDexClassLoader {}

        unsafe impl ::java_spaghetti::JniType for BaseDexClassLoader {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("dalvik/system/BaseDexClassLoader\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::ClassLoader> for BaseDexClassLoader {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for BaseDexClassLoader {}
        impl ::std::ops::Deref for BaseDexClassLoader {
            type Target = super::super::java::lang::ClassLoader;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl BaseDexClassLoader {
            /// [BaseDexClassLoader](https://developer.android.com/reference/dalvik/system/BaseDexClassLoader.html#BaseDexClassLoader(java.lang.String,%20java.io.File,%20java.lang.String,%20java.lang.ClassLoader))
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::io::File>,
                arg2: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg3: impl ::java_spaghetti::AsArg<super::super::java::lang::ClassLoader>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "dalvik/system/BaseDexClassLoader", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;Ljava/io/File;Ljava/lang/String;Ljava/lang/ClassLoader;)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "dalvik/system/BaseDexClassLoader\0",
                        "<init>\0",
                        "(Ljava/lang/String;Ljava/io/File;Ljava/lang/String;Ljava/lang/ClassLoader;)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [findLibrary](https://developer.android.com/reference/dalvik/system/BaseDexClassLoader.html#findLibrary(java.lang.String))
            pub fn findLibrary<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "dalvik/system/BaseDexClassLoader", java.flags == PUBLIC, .name == "findLibrary", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "dalvik/system/BaseDexClassLoader\0",
                        "findLibrary\0",
                        "(Ljava/lang/String;)Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toString](https://developer.android.com/reference/dalvik/system/BaseDexClassLoader.html#toString())
            pub fn toString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "dalvik/system/BaseDexClassLoader", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "dalvik/system/BaseDexClassLoader\0",
                        "toString\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub class [DexClassLoader](https://developer.android.com/reference/dalvik/system/DexClassLoader.html)
        #[repr(transparent)]
        pub struct DexClassLoader(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for DexClassLoader {}

        unsafe impl ::java_spaghetti::JniType for DexClassLoader {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("dalvik/system/DexClassLoader\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<BaseDexClassLoader> for DexClassLoader {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::ClassLoader> for DexClassLoader {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for DexClassLoader {}
        impl ::std::ops::Deref for DexClassLoader {
            type Target = BaseDexClassLoader;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl DexClassLoader {
            /// [DexClassLoader](https://developer.android.com/reference/dalvik/system/DexClassLoader.html#DexClassLoader(java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.ClassLoader))
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg2: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg3: impl ::java_spaghetti::AsArg<super::super::java::lang::ClassLoader>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "dalvik/system/DexClassLoader", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "dalvik/system/DexClassLoader\0",
                        "<init>\0",
                        "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub final class [InMemoryDexClassLoader](https://developer.android.com/reference/dalvik/system/InMemoryDexClassLoader.html)
        #[repr(transparent)]
        pub struct InMemoryDexClassLoader(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for InMemoryDexClassLoader {}

        unsafe impl ::java_spaghetti::JniType for InMemoryDexClassLoader {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("dalvik/system/InMemoryDexClassLoader\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<BaseDexClassLoader> for InMemoryDexClassLoader {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::ClassLoader> for InMemoryDexClassLoader {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for InMemoryDexClassLoader {}
        impl ::std::ops::Deref for InMemoryDexClassLoader {
            type Target = BaseDexClassLoader;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl InMemoryDexClassLoader {
            /// [InMemoryDexClassLoader](https://developer.android.com/reference/dalvik/system/InMemoryDexClassLoader.html#InMemoryDexClassLoader(java.nio.ByteBuffer%5B%5D,%20java.lang.String,%20java.lang.ClassLoader))
            pub fn new_ByteBuffer_array_String_ClassLoader<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<
                        super::super::java::nio::ByteBuffer,
                        super::super::java::lang::Throwable,
                    >,
                >,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg2: impl ::java_spaghetti::AsArg<super::super::java::lang::ClassLoader>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "dalvik/system/InMemoryDexClassLoader", java.flags == PUBLIC, .name == "<init>", .descriptor == "([Ljava/nio/ByteBuffer;Ljava/lang/String;Ljava/lang/ClassLoader;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue(), arg2.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "dalvik/system/InMemoryDexClassLoader\0",
                        "<init>\0",
                        "([Ljava/nio/ByteBuffer;Ljava/lang/String;Ljava/lang/ClassLoader;)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [InMemoryDexClassLoader](https://developer.android.com/reference/dalvik/system/InMemoryDexClassLoader.html#InMemoryDexClassLoader(java.nio.ByteBuffer%5B%5D,%20java.lang.ClassLoader))
            pub fn new_ByteBuffer_array_ClassLoader<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<
                        super::super::java::nio::ByteBuffer,
                        super::super::java::lang::Throwable,
                    >,
                >,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::ClassLoader>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "dalvik/system/InMemoryDexClassLoader", java.flags == PUBLIC, .name == "<init>", .descriptor == "([Ljava/nio/ByteBuffer;Ljava/lang/ClassLoader;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "dalvik/system/InMemoryDexClassLoader\0",
                        "<init>\0",
                        "([Ljava/nio/ByteBuffer;Ljava/lang/ClassLoader;)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [InMemoryDexClassLoader](https://developer.android.com/reference/dalvik/system/InMemoryDexClassLoader.html#InMemoryDexClassLoader(java.nio.ByteBuffer,%20java.lang.ClassLoader))
            pub fn new_ByteBuffer_ClassLoader<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::nio::ByteBuffer>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::ClassLoader>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                // class.path == "dalvik/system/InMemoryDexClassLoader", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/nio/ByteBuffer;Ljava/lang/ClassLoader;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "dalvik/system/InMemoryDexClassLoader\0",
                        "<init>\0",
                        "(Ljava/nio/ByteBuffer;Ljava/lang/ClassLoader;)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
        }
    }
}

pub mod java {

    pub mod io {

        /// pub class [File](https://developer.android.com/reference/java/io/File.html)
        #[repr(transparent)]
        pub struct File(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for File {}

        unsafe impl ::java_spaghetti::JniType for File {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("java/io/File\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for File {}
        impl ::std::ops::Deref for File {
            type Target = super::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl File {
            /// [File](https://developer.android.com/reference/java/io/File.html#File(java.lang.String))
            pub fn new_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::String>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "<init>\0", "(Ljava/lang/String;)V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [File](https://developer.android.com/reference/java/io/File.html#File(java.lang.String,%20java.lang.String))
            pub fn new_String_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::String>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/io/File\0",
                        "<init>\0",
                        "(Ljava/lang/String;Ljava/lang/String;)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [File](https://developer.android.com/reference/java/io/File.html#File(java.io.File,%20java.lang.String))
            pub fn new_File_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<File>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::String>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/File;Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/io/File\0",
                        "<init>\0",
                        "(Ljava/io/File;Ljava/lang/String;)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getName](https://developer.android.com/reference/java/io/File.html#getName())
            pub fn getName<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::String>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "getName", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "getName\0", "()Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getParent](https://developer.android.com/reference/java/io/File.html#getParent())
            pub fn getParent<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::String>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "getParent", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "getParent\0", "()Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getParentFile](https://developer.android.com/reference/java/io/File.html#getParentFile())
            pub fn getParentFile<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, File>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "getParentFile", .descriptor == "()Ljava/io/File;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "getParentFile\0", "()Ljava/io/File;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getPath](https://developer.android.com/reference/java/io/File.html#getPath())
            pub fn getPath<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::String>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "getPath", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "getPath\0", "()Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isAbsolute](https://developer.android.com/reference/java/io/File.html#isAbsolute())
            pub fn isAbsolute<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "isAbsolute", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "isAbsolute\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getAbsolutePath](https://developer.android.com/reference/java/io/File.html#getAbsolutePath())
            pub fn getAbsolutePath<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::String>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "getAbsolutePath", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "getAbsolutePath\0", "()Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getAbsoluteFile](https://developer.android.com/reference/java/io/File.html#getAbsoluteFile())
            pub fn getAbsoluteFile<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, File>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "getAbsoluteFile", .descriptor == "()Ljava/io/File;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "getAbsoluteFile\0", "()Ljava/io/File;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCanonicalPath](https://developer.android.com/reference/java/io/File.html#getCanonicalPath())
            pub fn getCanonicalPath<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::String>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "getCanonicalPath", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/io/File\0",
                        "getCanonicalPath\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCanonicalFile](https://developer.android.com/reference/java/io/File.html#getCanonicalFile())
            pub fn getCanonicalFile<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, File>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "getCanonicalFile", .descriptor == "()Ljava/io/File;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "getCanonicalFile\0", "()Ljava/io/File;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [canRead](https://developer.android.com/reference/java/io/File.html#canRead())
            pub fn canRead<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "canRead", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "canRead\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [canWrite](https://developer.android.com/reference/java/io/File.html#canWrite())
            pub fn canWrite<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "canWrite", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "canWrite\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [exists](https://developer.android.com/reference/java/io/File.html#exists())
            pub fn exists<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "exists", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "exists\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isDirectory](https://developer.android.com/reference/java/io/File.html#isDirectory())
            pub fn isDirectory<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "isDirectory", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "isDirectory\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isFile](https://developer.android.com/reference/java/io/File.html#isFile())
            pub fn isFile<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "isFile", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "isFile\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isHidden](https://developer.android.com/reference/java/io/File.html#isHidden())
            pub fn isHidden<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "isHidden", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "isHidden\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [lastModified](https://developer.android.com/reference/java/io/File.html#lastModified())
            pub fn lastModified<'env>(
                &'env self,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "lastModified", .descriptor == "()J"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "lastModified\0", "()J\0");
                    __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [length](https://developer.android.com/reference/java/io/File.html#length())
            pub fn length<'env>(
                &'env self,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "length", .descriptor == "()J"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "length\0", "()J\0");
                    __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [createNewFile](https://developer.android.com/reference/java/io/File.html#createNewFile())
            pub fn createNewFile<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "createNewFile", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "createNewFile\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [delete](https://developer.android.com/reference/java/io/File.html#delete())
            pub fn delete<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "delete", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "delete\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [deleteOnExit](https://developer.android.com/reference/java/io/File.html#deleteOnExit())
            pub fn deleteOnExit<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "deleteOnExit", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "deleteOnExit\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [list](https://developer.android.com/reference/java/io/File.html#list())
            pub fn list<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::lang::String, super::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "list", .descriptor == "()[Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "list\0", "()[Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [listFiles](https://developer.android.com/reference/java/io/File.html#listFiles())
            pub fn listFiles<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<File, super::lang::Throwable>>,
                >,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "listFiles", .descriptor == "()[Ljava/io/File;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "listFiles\0", "()[Ljava/io/File;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [mkdir](https://developer.android.com/reference/java/io/File.html#mkdir())
            pub fn mkdir<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "mkdir", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "mkdir\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [mkdirs](https://developer.android.com/reference/java/io/File.html#mkdirs())
            pub fn mkdirs<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "mkdirs", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "mkdirs\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [renameTo](https://developer.android.com/reference/java/io/File.html#renameTo(java.io.File))
            pub fn renameTo<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<File>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "renameTo", .descriptor == "(Ljava/io/File;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "renameTo\0", "(Ljava/io/File;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setLastModified](https://developer.android.com/reference/java/io/File.html#setLastModified(long))
            pub fn setLastModified<'env>(
                &'env self,
                arg0: i64,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "setLastModified", .descriptor == "(J)Z"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "setLastModified\0", "(J)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setReadOnly](https://developer.android.com/reference/java/io/File.html#setReadOnly())
            pub fn setReadOnly<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "setReadOnly", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "setReadOnly\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setWritable](https://developer.android.com/reference/java/io/File.html#setWritable(boolean,%20boolean))
            pub fn setWritable_boolean_boolean<'env>(
                &'env self,
                arg0: bool,
                arg1: bool,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "setWritable", .descriptor == "(ZZ)Z"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "setWritable\0", "(ZZ)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setWritable](https://developer.android.com/reference/java/io/File.html#setWritable(boolean))
            pub fn setWritable_boolean<'env>(
                &'env self,
                arg0: bool,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "setWritable", .descriptor == "(Z)Z"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "setWritable\0", "(Z)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setReadable](https://developer.android.com/reference/java/io/File.html#setReadable(boolean,%20boolean))
            pub fn setReadable_boolean_boolean<'env>(
                &'env self,
                arg0: bool,
                arg1: bool,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "setReadable", .descriptor == "(ZZ)Z"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "setReadable\0", "(ZZ)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setReadable](https://developer.android.com/reference/java/io/File.html#setReadable(boolean))
            pub fn setReadable_boolean<'env>(
                &'env self,
                arg0: bool,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "setReadable", .descriptor == "(Z)Z"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "setReadable\0", "(Z)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setExecutable](https://developer.android.com/reference/java/io/File.html#setExecutable(boolean,%20boolean))
            pub fn setExecutable_boolean_boolean<'env>(
                &'env self,
                arg0: bool,
                arg1: bool,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "setExecutable", .descriptor == "(ZZ)Z"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "setExecutable\0", "(ZZ)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setExecutable](https://developer.android.com/reference/java/io/File.html#setExecutable(boolean))
            pub fn setExecutable_boolean<'env>(
                &'env self,
                arg0: bool,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "setExecutable", .descriptor == "(Z)Z"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "setExecutable\0", "(Z)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [canExecute](https://developer.android.com/reference/java/io/File.html#canExecute())
            pub fn canExecute<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "canExecute", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "canExecute\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [listRoots](https://developer.android.com/reference/java/io/File.html#listRoots())
            pub fn listRoots<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<File, super::lang::Throwable>>,
                >,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/File", java.flags == PUBLIC | STATIC, .name == "listRoots", .descriptor == "()[Ljava/io/File;"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_static_method("java/io/File\0", "listRoots\0", "()[Ljava/io/File;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getTotalSpace](https://developer.android.com/reference/java/io/File.html#getTotalSpace())
            pub fn getTotalSpace<'env>(
                &'env self,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "getTotalSpace", .descriptor == "()J"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "getTotalSpace\0", "()J\0");
                    __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getFreeSpace](https://developer.android.com/reference/java/io/File.html#getFreeSpace())
            pub fn getFreeSpace<'env>(
                &'env self,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "getFreeSpace", .descriptor == "()J"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "getFreeSpace\0", "()J\0");
                    __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getUsableSpace](https://developer.android.com/reference/java/io/File.html#getUsableSpace())
            pub fn getUsableSpace<'env>(
                &'env self,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "getUsableSpace", .descriptor == "()J"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "getUsableSpace\0", "()J\0");
                    __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [createTempFile](https://developer.android.com/reference/java/io/File.html#createTempFile(java.lang.String,%20java.lang.String,%20java.io.File))
            pub fn createTempFile_String_String_File<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::String>,
                arg2: impl ::java_spaghetti::AsArg<File>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, File>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/File", java.flags == PUBLIC | STATIC, .name == "createTempFile", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue(), arg2.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/io/File\0",
                        "createTempFile\0",
                        "(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [createTempFile](https://developer.android.com/reference/java/io/File.html#createTempFile(java.lang.String,%20java.lang.String))
            pub fn createTempFile_String_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, File>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/File", java.flags == PUBLIC | STATIC, .name == "createTempFile", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Ljava/io/File;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/io/File\0",
                        "createTempFile\0",
                        "(Ljava/lang/String;Ljava/lang/String;)Ljava/io/File;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [compareTo](https://developer.android.com/reference/java/io/File.html#compareTo(java.io.File))
            pub fn compareTo_File<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<File>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "compareTo", .descriptor == "(Ljava/io/File;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "compareTo\0", "(Ljava/io/File;)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [equals](https://developer.android.com/reference/java/io/File.html#equals(java.lang.Object))
            pub fn equals<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hashCode](https://developer.android.com/reference/java/io/File.html#hashCode())
            pub fn hashCode<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "hashCode\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toString](https://developer.android.com/reference/java/io/File.html#toString())
            pub fn toString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::String>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/File", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/File\0", "toString\0", "()Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// **get** public static final [pathSeparator](https://developer.android.com/reference/java/io/File.html#pathSeparator)
            pub fn pathSeparator<'env>(
                env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, super::lang::String>> {
                unsafe {
                    let (__jni_class, __jni_field) =
                        env.require_class_static_field("java/io/File\0", "pathSeparator\0", "Ljava/lang/String;\0");
                    env.get_static_object_field(__jni_class, __jni_field)
                }
            }

            /// **get** public static final [pathSeparatorChar](https://developer.android.com/reference/java/io/File.html#pathSeparatorChar)
            pub fn pathSeparatorChar<'env>(env: ::java_spaghetti::Env<'env>) -> u16 {
                unsafe {
                    let (__jni_class, __jni_field) =
                        env.require_class_static_field("java/io/File\0", "pathSeparatorChar\0", "C\0");
                    env.get_static_char_field(__jni_class, __jni_field)
                }
            }

            /// **get** public static final [separator](https://developer.android.com/reference/java/io/File.html#separator)
            pub fn separator<'env>(
                env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, super::lang::String>> {
                unsafe {
                    let (__jni_class, __jni_field) =
                        env.require_class_static_field("java/io/File\0", "separator\0", "Ljava/lang/String;\0");
                    env.get_static_object_field(__jni_class, __jni_field)
                }
            }

            /// **get** public static final [separatorChar](https://developer.android.com/reference/java/io/File.html#separatorChar)
            pub fn separatorChar<'env>(env: ::java_spaghetti::Env<'env>) -> u16 {
                unsafe {
                    let (__jni_class, __jni_field) =
                        env.require_class_static_field("java/io/File\0", "separatorChar\0", "C\0");
                    env.get_static_char_field(__jni_class, __jni_field)
                }
            }
        }

        /// pub class [InputStream](https://developer.android.com/reference/java/io/InputStream.html)
        #[repr(transparent)]
        pub struct InputStream(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for InputStream {}

        unsafe impl ::java_spaghetti::JniType for InputStream {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("java/io/InputStream\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for InputStream {}
        impl ::std::ops::Deref for InputStream {
            type Target = super::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl InputStream {
            /// [InputStream](https://developer.android.com/reference/java/io/InputStream.html#InputStream())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/InputStream", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/InputStream\0", "<init>\0", "()V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [nullInputStream](https://developer.android.com/reference/java/io/InputStream.html#nullInputStream())
            pub fn nullInputStream<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, InputStream>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/InputStream", java.flags == PUBLIC | STATIC, .name == "nullInputStream", .descriptor == "()Ljava/io/InputStream;"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/io/InputStream\0",
                        "nullInputStream\0",
                        "()Ljava/io/InputStream;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [read](https://developer.android.com/reference/java/io/InputStream.html#read())
            pub fn read<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/InputStream", java.flags == PUBLIC | ABSTRACT, .name == "read", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/InputStream\0", "read\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [read](https://developer.android.com/reference/java/io/InputStream.html#read(byte%5B%5D))
            pub fn read_byte_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/InputStream", java.flags == PUBLIC, .name == "read", .descriptor == "([B)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/InputStream\0", "read\0", "([B)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [read](https://developer.android.com/reference/java/io/InputStream.html#read(byte%5B%5D,%20int,%20int))
            pub fn read_byte_array_int_int<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/InputStream", java.flags == PUBLIC, .name == "read", .descriptor == "([BII)I"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/InputStream\0", "read\0", "([BII)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [readAllBytes](https://developer.android.com/reference/java/io/InputStream.html#readAllBytes())
            pub fn readAllBytes<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/InputStream", java.flags == PUBLIC, .name == "readAllBytes", .descriptor == "()[B"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/InputStream\0", "readAllBytes\0", "()[B\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [readNBytes](https://developer.android.com/reference/java/io/InputStream.html#readNBytes(int))
            pub fn readNBytes_int<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/InputStream", java.flags == PUBLIC, .name == "readNBytes", .descriptor == "(I)[B"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/InputStream\0", "readNBytes\0", "(I)[B\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [readNBytes](https://developer.android.com/reference/java/io/InputStream.html#readNBytes(byte%5B%5D,%20int,%20int))
            pub fn readNBytes_byte_array_int_int<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/InputStream", java.flags == PUBLIC, .name == "readNBytes", .descriptor == "([BII)I"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/InputStream\0", "readNBytes\0", "([BII)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [skip](https://developer.android.com/reference/java/io/InputStream.html#skip(long))
            pub fn skip<'env>(
                &'env self,
                arg0: i64,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/InputStream", java.flags == PUBLIC, .name == "skip", .descriptor == "(J)J"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/InputStream\0", "skip\0", "(J)J\0");
                    __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [available](https://developer.android.com/reference/java/io/InputStream.html#available())
            pub fn available<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/InputStream", java.flags == PUBLIC, .name == "available", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/InputStream\0", "available\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [close](https://developer.android.com/reference/java/io/InputStream.html#close())
            pub fn close<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/InputStream", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/InputStream\0", "close\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [mark](https://developer.android.com/reference/java/io/InputStream.html#mark(int))
            pub fn mark<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/InputStream", java.flags == PUBLIC | SYNCRONIZED, .name == "mark", .descriptor == "(I)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/InputStream\0", "mark\0", "(I)V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [reset](https://developer.android.com/reference/java/io/InputStream.html#reset())
            pub fn reset<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/InputStream", java.flags == PUBLIC | SYNCRONIZED, .name == "reset", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/InputStream\0", "reset\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [markSupported](https://developer.android.com/reference/java/io/InputStream.html#markSupported())
            pub fn markSupported<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/InputStream", java.flags == PUBLIC, .name == "markSupported", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/InputStream\0", "markSupported\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [transferTo](https://developer.android.com/reference/java/io/InputStream.html#transferTo(java.io.OutputStream))
            pub fn transferTo<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<OutputStream>,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/InputStream", java.flags == PUBLIC, .name == "transferTo", .descriptor == "(Ljava/io/OutputStream;)J"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/io/InputStream\0",
                        "transferTo\0",
                        "(Ljava/io/OutputStream;)J\0",
                    );
                    __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub class [OutputStream](https://developer.android.com/reference/java/io/OutputStream.html)
        #[repr(transparent)]
        pub struct OutputStream(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for OutputStream {}

        unsafe impl ::java_spaghetti::JniType for OutputStream {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("java/io/OutputStream\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for OutputStream {}
        impl ::std::ops::Deref for OutputStream {
            type Target = super::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl OutputStream {
            /// [OutputStream](https://developer.android.com/reference/java/io/OutputStream.html#OutputStream())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/OutputStream", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/OutputStream\0", "<init>\0", "()V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [nullOutputStream](https://developer.android.com/reference/java/io/OutputStream.html#nullOutputStream())
            pub fn nullOutputStream<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, OutputStream>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/io/OutputStream", java.flags == PUBLIC | STATIC, .name == "nullOutputStream", .descriptor == "()Ljava/io/OutputStream;"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/io/OutputStream\0",
                        "nullOutputStream\0",
                        "()Ljava/io/OutputStream;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [write](https://developer.android.com/reference/java/io/OutputStream.html#write(int))
            pub fn write_int<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/OutputStream", java.flags == PUBLIC | ABSTRACT, .name == "write", .descriptor == "(I)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/OutputStream\0", "write\0", "(I)V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [write](https://developer.android.com/reference/java/io/OutputStream.html#write(byte%5B%5D))
            pub fn write_byte_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/OutputStream", java.flags == PUBLIC, .name == "write", .descriptor == "([B)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/OutputStream\0", "write\0", "([B)V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [write](https://developer.android.com/reference/java/io/OutputStream.html#write(byte%5B%5D,%20int,%20int))
            pub fn write_byte_array_int_int<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/OutputStream", java.flags == PUBLIC, .name == "write", .descriptor == "([BII)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/OutputStream\0", "write\0", "([BII)V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [flush](https://developer.android.com/reference/java/io/OutputStream.html#flush())
            pub fn flush<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/OutputStream", java.flags == PUBLIC, .name == "flush", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/OutputStream\0", "flush\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [close](https://developer.android.com/reference/java/io/OutputStream.html#close())
            pub fn close<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/io/OutputStream", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/io/OutputStream\0", "close\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }
    }

    pub mod lang {

        /// pub final class [Class](https://developer.android.com/reference/java/lang/Class.html)
        #[repr(transparent)]
        pub struct Class(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for Class {}

        unsafe impl ::java_spaghetti::JniType for Class {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("java/lang/Class\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<Object> for Class {}
        impl ::std::ops::Deref for Class {
            type Target = Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl Class {
            /// [toString](https://developer.android.com/reference/java/lang/Class.html#toString())
            pub fn toString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Class\0", "toString\0", "()Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toGenericString](https://developer.android.com/reference/java/lang/Class.html#toGenericString())
            pub fn toGenericString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "toGenericString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Class\0",
                        "toGenericString\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [forName](https://developer.android.com/reference/java/lang/Class.html#forName(java.lang.String))
            pub fn forName_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Class>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC | STATIC, .name == "forName", .descriptor == "(Ljava/lang/String;)Ljava/lang/Class;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/lang/Class\0",
                        "forName\0",
                        "(Ljava/lang/String;)Ljava/lang/Class;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [forName](https://developer.android.com/reference/java/lang/Class.html#forName(java.lang.String,%20boolean,%20java.lang.ClassLoader))
            pub fn forName_String_boolean_ClassLoader<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: bool,
                arg2: impl ::java_spaghetti::AsArg<ClassLoader>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Class>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC | STATIC, .name == "forName", .descriptor == "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        arg2.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/lang/Class\0",
                        "forName\0",
                        "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [newInstance](https://developer.android.com/reference/java/lang/Class.html#newInstance())
            pub fn newInstance<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Object>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC | NATIVE, .name == "newInstance", .descriptor == "()Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Class\0", "newInstance\0", "()Ljava/lang/Object;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isInstance](https://developer.android.com/reference/java/lang/Class.html#isInstance(java.lang.Object))
            pub fn isInstance<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isInstance", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Class\0", "isInstance\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isAssignableFrom](https://developer.android.com/reference/java/lang/Class.html#isAssignableFrom(java.lang.Class))
            pub fn isAssignableFrom<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Class>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isAssignableFrom", .descriptor == "(Ljava/lang/Class;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Class\0",
                        "isAssignableFrom\0",
                        "(Ljava/lang/Class;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isInterface](https://developer.android.com/reference/java/lang/Class.html#isInterface())
            pub fn isInterface<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isInterface", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Class\0", "isInterface\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isArray](https://developer.android.com/reference/java/lang/Class.html#isArray())
            pub fn isArray<'env>(&'env self) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isArray", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Class\0", "isArray\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isPrimitive](https://developer.android.com/reference/java/lang/Class.html#isPrimitive())
            pub fn isPrimitive<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isPrimitive", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Class\0", "isPrimitive\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isAnnotation](https://developer.android.com/reference/java/lang/Class.html#isAnnotation())
            pub fn isAnnotation<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isAnnotation", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Class\0", "isAnnotation\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isSynthetic](https://developer.android.com/reference/java/lang/Class.html#isSynthetic())
            pub fn isSynthetic<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isSynthetic", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Class\0", "isSynthetic\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getName](https://developer.android.com/reference/java/lang/Class.html#getName())
            pub fn getName<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getName", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Class\0", "getName\0", "()Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getClassLoader](https://developer.android.com/reference/java/lang/Class.html#getClassLoader())
            pub fn getClassLoader<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ClassLoader>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getClassLoader", .descriptor == "()Ljava/lang/ClassLoader;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Class\0",
                        "getClassLoader\0",
                        "()Ljava/lang/ClassLoader;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getSuperclass](https://developer.android.com/reference/java/lang/Class.html#getSuperclass())
            pub fn getSuperclass<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Class>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getSuperclass", .descriptor == "()Ljava/lang/Class;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Class\0", "getSuperclass\0", "()Ljava/lang/Class;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getPackageName](https://developer.android.com/reference/java/lang/Class.html#getPackageName())
            pub fn getPackageName<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getPackageName", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Class\0",
                        "getPackageName\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getInterfaces](https://developer.android.com/reference/java/lang/Class.html#getInterfaces())
            pub fn getInterfaces<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<Class, Throwable>>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getInterfaces", .descriptor == "()[Ljava/lang/Class;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Class\0",
                        "getInterfaces\0",
                        "()[Ljava/lang/Class;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getComponentType](https://developer.android.com/reference/java/lang/Class.html#getComponentType())
            pub fn getComponentType<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Class>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getComponentType", .descriptor == "()Ljava/lang/Class;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Class\0",
                        "getComponentType\0",
                        "()Ljava/lang/Class;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getModifiers](https://developer.android.com/reference/java/lang/Class.html#getModifiers())
            pub fn getModifiers<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getModifiers", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Class\0", "getModifiers\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getSigners](https://developer.android.com/reference/java/lang/Class.html#getSigners())
            pub fn getSigners<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<Object, Throwable>>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getSigners", .descriptor == "()[Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Class\0", "getSigners\0", "()[Ljava/lang/Object;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDeclaringClass](https://developer.android.com/reference/java/lang/Class.html#getDeclaringClass())
            pub fn getDeclaringClass<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Class>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC | NATIVE, .name == "getDeclaringClass", .descriptor == "()Ljava/lang/Class;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Class\0",
                        "getDeclaringClass\0",
                        "()Ljava/lang/Class;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getEnclosingClass](https://developer.android.com/reference/java/lang/Class.html#getEnclosingClass())
            pub fn getEnclosingClass<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Class>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC | NATIVE, .name == "getEnclosingClass", .descriptor == "()Ljava/lang/Class;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Class\0",
                        "getEnclosingClass\0",
                        "()Ljava/lang/Class;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getSimpleName](https://developer.android.com/reference/java/lang/Class.html#getSimpleName())
            pub fn getSimpleName<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getSimpleName", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Class\0",
                        "getSimpleName\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getTypeName](https://developer.android.com/reference/java/lang/Class.html#getTypeName())
            pub fn getTypeName<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getTypeName", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Class\0", "getTypeName\0", "()Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCanonicalName](https://developer.android.com/reference/java/lang/Class.html#getCanonicalName())
            pub fn getCanonicalName<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getCanonicalName", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Class\0",
                        "getCanonicalName\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isAnonymousClass](https://developer.android.com/reference/java/lang/Class.html#isAnonymousClass())
            pub fn isAnonymousClass<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Class", java.flags == PUBLIC | NATIVE, .name == "isAnonymousClass", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Class\0", "isAnonymousClass\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isLocalClass](https://developer.android.com/reference/java/lang/Class.html#isLocalClass())
            pub fn isLocalClass<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isLocalClass", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Class\0", "isLocalClass\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isMemberClass](https://developer.android.com/reference/java/lang/Class.html#isMemberClass())
            pub fn isMemberClass<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isMemberClass", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Class\0", "isMemberClass\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getClasses](https://developer.android.com/reference/java/lang/Class.html#getClasses())
            pub fn getClasses<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<Class, Throwable>>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getClasses", .descriptor == "()[Ljava/lang/Class;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Class\0", "getClasses\0", "()[Ljava/lang/Class;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDeclaredClasses](https://developer.android.com/reference/java/lang/Class.html#getDeclaredClasses())
            pub fn getDeclaredClasses<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<Class, Throwable>>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC | NATIVE, .name == "getDeclaredClasses", .descriptor == "()[Ljava/lang/Class;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Class\0",
                        "getDeclaredClasses\0",
                        "()[Ljava/lang/Class;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getResourceAsStream](https://developer.android.com/reference/java/lang/Class.html#getResourceAsStream(java.lang.String))
            pub fn getResourceAsStream<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::io::InputStream>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getResourceAsStream", .descriptor == "(Ljava/lang/String;)Ljava/io/InputStream;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Class\0",
                        "getResourceAsStream\0",
                        "(Ljava/lang/String;)Ljava/io/InputStream;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [desiredAssertionStatus](https://developer.android.com/reference/java/lang/Class.html#desiredAssertionStatus())
            pub fn desiredAssertionStatus<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "desiredAssertionStatus", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Class\0", "desiredAssertionStatus\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isEnum](https://developer.android.com/reference/java/lang/Class.html#isEnum())
            pub fn isEnum<'env>(&'env self) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isEnum", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Class\0", "isEnum\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getEnumConstants](https://developer.android.com/reference/java/lang/Class.html#getEnumConstants())
            pub fn getEnumConstants<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<Object, Throwable>>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getEnumConstants", .descriptor == "()[Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Class\0",
                        "getEnumConstants\0",
                        "()[Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [cast](https://developer.android.com/reference/java/lang/Class.html#cast(java.lang.Object))
            pub fn cast<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Object>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "cast", .descriptor == "(Ljava/lang/Object;)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Class\0",
                        "cast\0",
                        "(Ljava/lang/Object;)Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [asSubclass](https://developer.android.com/reference/java/lang/Class.html#asSubclass(java.lang.Class))
            pub fn asSubclass<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Class>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Class>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "asSubclass", .descriptor == "(Ljava/lang/Class;)Ljava/lang/Class;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Class\0",
                        "asSubclass\0",
                        "(Ljava/lang/Class;)Ljava/lang/Class;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isAnnotationPresent](https://developer.android.com/reference/java/lang/Class.html#isAnnotationPresent(java.lang.Class))
            pub fn isAnnotationPresent<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Class>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isAnnotationPresent", .descriptor == "(Ljava/lang/Class;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Class\0",
                        "isAnnotationPresent\0",
                        "(Ljava/lang/Class;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub class [ClassLoader](https://developer.android.com/reference/java/lang/ClassLoader.html)
        #[repr(transparent)]
        pub struct ClassLoader(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for ClassLoader {}

        unsafe impl ::java_spaghetti::JniType for ClassLoader {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("java/lang/ClassLoader\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<Object> for ClassLoader {}
        impl ::std::ops::Deref for ClassLoader {
            type Target = Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ClassLoader {
            /// [loadClass](https://developer.android.com/reference/java/lang/ClassLoader.html#loadClass(java.lang.String))
            pub fn loadClass<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Class>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/ClassLoader", java.flags == PUBLIC, .name == "loadClass", .descriptor == "(Ljava/lang/String;)Ljava/lang/Class;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/ClassLoader\0",
                        "loadClass\0",
                        "(Ljava/lang/String;)Ljava/lang/Class;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getResourceAsStream](https://developer.android.com/reference/java/lang/ClassLoader.html#getResourceAsStream(java.lang.String))
            pub fn getResourceAsStream<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::io::InputStream>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/ClassLoader", java.flags == PUBLIC, .name == "getResourceAsStream", .descriptor == "(Ljava/lang/String;)Ljava/io/InputStream;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/ClassLoader\0",
                        "getResourceAsStream\0",
                        "(Ljava/lang/String;)Ljava/io/InputStream;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getSystemResourceAsStream](https://developer.android.com/reference/java/lang/ClassLoader.html#getSystemResourceAsStream(java.lang.String))
            pub fn getSystemResourceAsStream<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::io::InputStream>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/ClassLoader", java.flags == PUBLIC | STATIC, .name == "getSystemResourceAsStream", .descriptor == "(Ljava/lang/String;)Ljava/io/InputStream;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/lang/ClassLoader\0",
                        "getSystemResourceAsStream\0",
                        "(Ljava/lang/String;)Ljava/io/InputStream;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getParent](https://developer.android.com/reference/java/lang/ClassLoader.html#getParent())
            pub fn getParent<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ClassLoader>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/ClassLoader", java.flags == PUBLIC | FINAL, .name == "getParent", .descriptor == "()Ljava/lang/ClassLoader;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/ClassLoader\0",
                        "getParent\0",
                        "()Ljava/lang/ClassLoader;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getSystemClassLoader](https://developer.android.com/reference/java/lang/ClassLoader.html#getSystemClassLoader())
            pub fn getSystemClassLoader<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ClassLoader>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/ClassLoader", java.flags == PUBLIC | STATIC, .name == "getSystemClassLoader", .descriptor == "()Ljava/lang/ClassLoader;"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/lang/ClassLoader\0",
                        "getSystemClassLoader\0",
                        "()Ljava/lang/ClassLoader;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setDefaultAssertionStatus](https://developer.android.com/reference/java/lang/ClassLoader.html#setDefaultAssertionStatus(boolean))
            pub fn setDefaultAssertionStatus<'env>(
                &'env self,
                arg0: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/ClassLoader", java.flags == PUBLIC, .name == "setDefaultAssertionStatus", .descriptor == "(Z)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/ClassLoader\0",
                        "setDefaultAssertionStatus\0",
                        "(Z)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setPackageAssertionStatus](https://developer.android.com/reference/java/lang/ClassLoader.html#setPackageAssertionStatus(java.lang.String,%20boolean))
            pub fn setPackageAssertionStatus<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/ClassLoader", java.flags == PUBLIC, .name == "setPackageAssertionStatus", .descriptor == "(Ljava/lang/String;Z)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/ClassLoader\0",
                        "setPackageAssertionStatus\0",
                        "(Ljava/lang/String;Z)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setClassAssertionStatus](https://developer.android.com/reference/java/lang/ClassLoader.html#setClassAssertionStatus(java.lang.String,%20boolean))
            pub fn setClassAssertionStatus<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/ClassLoader", java.flags == PUBLIC, .name == "setClassAssertionStatus", .descriptor == "(Ljava/lang/String;Z)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/ClassLoader\0",
                        "setClassAssertionStatus\0",
                        "(Ljava/lang/String;Z)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [clearAssertionStatus](https://developer.android.com/reference/java/lang/ClassLoader.html#clearAssertionStatus())
            pub fn clearAssertionStatus<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/ClassLoader", java.flags == PUBLIC, .name == "clearAssertionStatus", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/ClassLoader\0", "clearAssertionStatus\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub class [Object](https://developer.android.com/reference/java/lang/Object.html)
        #[repr(transparent)]
        pub struct Object(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for Object {}

        unsafe impl ::java_spaghetti::JniType for Object {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("java/lang/Object\0")
            }
        }
        impl Object {
            /// [Object](https://developer.android.com/reference/java/lang/Object.html#Object())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                // class.path == "java/lang/Object", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Object\0", "<init>\0", "()V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getClass](https://developer.android.com/reference/java/lang/Object.html#getClass())
            pub fn getClass<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Class>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Object", java.flags == PUBLIC | FINAL, .name == "getClass", .descriptor == "()Ljava/lang/Class;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Object\0", "getClass\0", "()Ljava/lang/Class;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hashCode](https://developer.android.com/reference/java/lang/Object.html#hashCode())
            pub fn hashCode<'env>(&'env self) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Object", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Object\0", "hashCode\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [equals](https://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object))
            pub fn equals<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Object", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Object\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toString](https://developer.android.com/reference/java/lang/Object.html#toString())
            pub fn toString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Object", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Object\0", "toString\0", "()Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [notify](https://developer.android.com/reference/java/lang/Object.html#notify())
            pub fn notify<'env>(&'env self) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Object", java.flags == PUBLIC | FINAL | NATIVE, .name == "notify", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Object\0", "notify\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [notifyAll](https://developer.android.com/reference/java/lang/Object.html#notifyAll())
            pub fn notifyAll<'env>(&'env self) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Object", java.flags == PUBLIC | FINAL | NATIVE, .name == "notifyAll", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Object\0", "notifyAll\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [wait](https://developer.android.com/reference/java/lang/Object.html#wait(long))
            pub fn wait_long<'env>(
                &'env self,
                arg0: i64,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Object", java.flags == PUBLIC | FINAL, .name == "wait", .descriptor == "(J)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Object\0", "wait\0", "(J)V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [wait](https://developer.android.com/reference/java/lang/Object.html#wait(long,%20int))
            pub fn wait_long_int<'env>(
                &'env self,
                arg0: i64,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Object", java.flags == PUBLIC | FINAL | NATIVE, .name == "wait", .descriptor == "(JI)V"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Object\0", "wait\0", "(JI)V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [wait](https://developer.android.com/reference/java/lang/Object.html#wait())
            pub fn wait<'env>(&'env self) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Object", java.flags == PUBLIC | FINAL, .name == "wait", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Object\0", "wait\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub final class [StackTraceElement](https://developer.android.com/reference/java/lang/StackTraceElement.html)
        #[repr(transparent)]
        pub struct StackTraceElement(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for StackTraceElement {}

        unsafe impl ::java_spaghetti::JniType for StackTraceElement {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("java/lang/StackTraceElement\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<Object> for StackTraceElement {}
        impl ::std::ops::Deref for StackTraceElement {
            type Target = Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl StackTraceElement {
            /// [StackTraceElement](https://developer.android.com/reference/java/lang/StackTraceElement.html#StackTraceElement(java.lang.String,%20java.lang.String,%20java.lang.String,%20int))
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: impl ::java_spaghetti::AsArg<String>,
                arg2: impl ::java_spaghetti::AsArg<String>,
                arg3: i32,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                // class.path == "java/lang/StackTraceElement", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/StackTraceElement\0",
                        "<init>\0",
                        "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getFileName](https://developer.android.com/reference/java/lang/StackTraceElement.html#getFileName())
            pub fn getFileName<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/StackTraceElement", java.flags == PUBLIC, .name == "getFileName", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/StackTraceElement\0",
                        "getFileName\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getLineNumber](https://developer.android.com/reference/java/lang/StackTraceElement.html#getLineNumber())
            pub fn getLineNumber<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/StackTraceElement", java.flags == PUBLIC, .name == "getLineNumber", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/StackTraceElement\0", "getLineNumber\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getClassName](https://developer.android.com/reference/java/lang/StackTraceElement.html#getClassName())
            pub fn getClassName<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/StackTraceElement", java.flags == PUBLIC, .name == "getClassName", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/StackTraceElement\0",
                        "getClassName\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getMethodName](https://developer.android.com/reference/java/lang/StackTraceElement.html#getMethodName())
            pub fn getMethodName<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/StackTraceElement", java.flags == PUBLIC, .name == "getMethodName", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/StackTraceElement\0",
                        "getMethodName\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isNativeMethod](https://developer.android.com/reference/java/lang/StackTraceElement.html#isNativeMethod())
            pub fn isNativeMethod<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/StackTraceElement", java.flags == PUBLIC, .name == "isNativeMethod", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/StackTraceElement\0", "isNativeMethod\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toString](https://developer.android.com/reference/java/lang/StackTraceElement.html#toString())
            pub fn toString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/StackTraceElement", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/StackTraceElement\0",
                        "toString\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [equals](https://developer.android.com/reference/java/lang/StackTraceElement.html#equals(java.lang.Object))
            pub fn equals<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/StackTraceElement", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/StackTraceElement\0",
                        "equals\0",
                        "(Ljava/lang/Object;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hashCode](https://developer.android.com/reference/java/lang/StackTraceElement.html#hashCode())
            pub fn hashCode<'env>(&'env self) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/StackTraceElement", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/StackTraceElement\0", "hashCode\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub final class [String](https://developer.android.com/reference/java/lang/String.html)
        #[repr(transparent)]
        pub struct String(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for String {}

        unsafe impl ::java_spaghetti::JniType for String {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("java/lang/String\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<Object> for String {}
        impl ::std::ops::Deref for String {
            type Target = Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl String {
            /// [String](https://developer.android.com/reference/java/lang/String.html#String())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "<init>\0", "()V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [String](https://developer.android.com/reference/java/lang/String.html#String(java.lang.String))
            pub fn new_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "<init>\0", "(Ljava/lang/String;)V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [String](https://developer.android.com/reference/java/lang/String.html#String(char%5B%5D))
            pub fn new_char_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "<init>", .descriptor == "([C)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "<init>\0", "([C)V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [String](https://developer.android.com/reference/java/lang/String.html#String(char%5B%5D,%20int,%20int))
            pub fn new_char_array_int_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "<init>", .descriptor == "([CII)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "<init>\0", "([CII)V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [String](https://developer.android.com/reference/java/lang/String.html#String(int%5B%5D,%20int,%20int))
            pub fn new_int_array_int_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "<init>", .descriptor == "([III)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "<init>\0", "([III)V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [String](https://developer.android.com/reference/java/lang/String.html#String(byte%5B%5D,%20int,%20int,%20int))
            #[deprecated]
            pub fn new_byte_array_int_int_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "<init>", .descriptor == "([BIII)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "<init>\0", "([BIII)V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [String](https://developer.android.com/reference/java/lang/String.html#String(byte%5B%5D,%20int))
            #[deprecated]
            pub fn new_byte_array_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "<init>", .descriptor == "([BI)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "<init>\0", "([BI)V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [String](https://developer.android.com/reference/java/lang/String.html#String(byte%5B%5D,%20int,%20int,%20java.lang.String))
            pub fn new_byte_array_int_int_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
                arg2: i32,
                arg3: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "<init>", .descriptor == "([BIILjava/lang/String;)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        arg3.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "<init>\0", "([BIILjava/lang/String;)V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [String](https://developer.android.com/reference/java/lang/String.html#String(byte%5B%5D,%20java.lang.String))
            pub fn new_byte_array_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "<init>", .descriptor == "([BLjava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "<init>\0", "([BLjava/lang/String;)V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [String](https://developer.android.com/reference/java/lang/String.html#String(byte%5B%5D,%20int,%20int))
            pub fn new_byte_array_int_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "<init>", .descriptor == "([BII)V"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "<init>\0", "([BII)V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [String](https://developer.android.com/reference/java/lang/String.html#String(byte%5B%5D))
            pub fn new_byte_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "<init>", .descriptor == "([B)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "<init>\0", "([B)V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [length](https://developer.android.com/reference/java/lang/String.html#length())
            pub fn length<'env>(&'env self) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "length", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "length\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isEmpty](https://developer.android.com/reference/java/lang/String.html#isEmpty())
            pub fn isEmpty<'env>(&'env self) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "isEmpty", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "isEmpty\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [charAt](https://developer.android.com/reference/java/lang/String.html#charAt(int))
            pub fn charAt<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<u16, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC | NATIVE, .name == "charAt", .descriptor == "(I)C"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "charAt\0", "(I)C\0");
                    __jni_env.call_char_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [codePointAt](https://developer.android.com/reference/java/lang/String.html#codePointAt(int))
            pub fn codePointAt<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "codePointAt", .descriptor == "(I)I"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "codePointAt\0", "(I)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [codePointBefore](https://developer.android.com/reference/java/lang/String.html#codePointBefore(int))
            pub fn codePointBefore<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "codePointBefore", .descriptor == "(I)I"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "codePointBefore\0", "(I)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [codePointCount](https://developer.android.com/reference/java/lang/String.html#codePointCount(int,%20int))
            pub fn codePointCount<'env>(
                &'env self,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "codePointCount", .descriptor == "(II)I"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "codePointCount\0", "(II)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [offsetByCodePoints](https://developer.android.com/reference/java/lang/String.html#offsetByCodePoints(int,%20int))
            pub fn offsetByCodePoints<'env>(
                &'env self,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "offsetByCodePoints", .descriptor == "(II)I"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "offsetByCodePoints\0", "(II)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getChars](https://developer.android.com/reference/java/lang/String.html#getChars(int,%20int,%20char%5B%5D,%20int))
            pub fn getChars<'env>(
                &'env self,
                arg0: i32,
                arg1: i32,
                arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
                arg3: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "getChars", .descriptor == "(II[CI)V"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        arg2.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "getChars\0", "(II[CI)V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getBytes](https://developer.android.com/reference/java/lang/String.html#getBytes(int,%20int,%20byte%5B%5D,%20int))
            #[deprecated]
            pub fn getBytes_int_int_byte_array_int<'env>(
                &'env self,
                arg0: i32,
                arg1: i32,
                arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg3: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "getBytes", .descriptor == "(II[BI)V"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        arg2.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "getBytes\0", "(II[BI)V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getBytes](https://developer.android.com/reference/java/lang/String.html#getBytes(java.lang.String))
            pub fn getBytes_String<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "getBytes", .descriptor == "(Ljava/lang/String;)[B"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "getBytes\0", "(Ljava/lang/String;)[B\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getBytes](https://developer.android.com/reference/java/lang/String.html#getBytes())
            pub fn getBytes<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "getBytes", .descriptor == "()[B"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "getBytes\0", "()[B\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [equals](https://developer.android.com/reference/java/lang/String.html#equals(java.lang.Object))
            pub fn equals<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [equalsIgnoreCase](https://developer.android.com/reference/java/lang/String.html#equalsIgnoreCase(java.lang.String))
            pub fn equalsIgnoreCase<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "equalsIgnoreCase", .descriptor == "(Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/String\0",
                        "equalsIgnoreCase\0",
                        "(Ljava/lang/String;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [compareTo](https://developer.android.com/reference/java/lang/String.html#compareTo(java.lang.String))
            pub fn compareTo_String<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC | NATIVE, .name == "compareTo", .descriptor == "(Ljava/lang/String;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "compareTo\0", "(Ljava/lang/String;)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [compareToIgnoreCase](https://developer.android.com/reference/java/lang/String.html#compareToIgnoreCase(java.lang.String))
            pub fn compareToIgnoreCase<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "compareToIgnoreCase", .descriptor == "(Ljava/lang/String;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/String\0",
                        "compareToIgnoreCase\0",
                        "(Ljava/lang/String;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [regionMatches](https://developer.android.com/reference/java/lang/String.html#regionMatches(int,%20java.lang.String,%20int,%20int))
            pub fn regionMatches_int_String_int_int<'env>(
                &'env self,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<String>,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "regionMatches", .descriptor == "(ILjava/lang/String;II)Z"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        arg1.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/String\0",
                        "regionMatches\0",
                        "(ILjava/lang/String;II)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [regionMatches](https://developer.android.com/reference/java/lang/String.html#regionMatches(boolean,%20int,%20java.lang.String,%20int,%20int))
            pub fn regionMatches_boolean_int_String_int_int<'env>(
                &'env self,
                arg0: bool,
                arg1: i32,
                arg2: impl ::java_spaghetti::AsArg<String>,
                arg3: i32,
                arg4: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "regionMatches", .descriptor == "(ZILjava/lang/String;II)Z"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        arg2.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/String\0",
                        "regionMatches\0",
                        "(ZILjava/lang/String;II)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [startsWith](https://developer.android.com/reference/java/lang/String.html#startsWith(java.lang.String,%20int))
            pub fn startsWith_String_int<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "startsWith", .descriptor == "(Ljava/lang/String;I)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/String\0",
                        "startsWith\0",
                        "(Ljava/lang/String;I)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [startsWith](https://developer.android.com/reference/java/lang/String.html#startsWith(java.lang.String))
            pub fn startsWith_String<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "startsWith", .descriptor == "(Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "startsWith\0", "(Ljava/lang/String;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [endsWith](https://developer.android.com/reference/java/lang/String.html#endsWith(java.lang.String))
            pub fn endsWith<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "endsWith", .descriptor == "(Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "endsWith\0", "(Ljava/lang/String;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hashCode](https://developer.android.com/reference/java/lang/String.html#hashCode())
            pub fn hashCode<'env>(&'env self) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "hashCode\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [indexOf](https://developer.android.com/reference/java/lang/String.html#indexOf(int))
            pub fn indexOf_int<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "indexOf", .descriptor == "(I)I"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "indexOf\0", "(I)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [indexOf](https://developer.android.com/reference/java/lang/String.html#indexOf(int,%20int))
            pub fn indexOf_int_int<'env>(
                &'env self,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "indexOf", .descriptor == "(II)I"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "indexOf\0", "(II)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [lastIndexOf](https://developer.android.com/reference/java/lang/String.html#lastIndexOf(int))
            pub fn lastIndexOf_int<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "lastIndexOf", .descriptor == "(I)I"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "lastIndexOf\0", "(I)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [lastIndexOf](https://developer.android.com/reference/java/lang/String.html#lastIndexOf(int,%20int))
            pub fn lastIndexOf_int_int<'env>(
                &'env self,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "lastIndexOf", .descriptor == "(II)I"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "lastIndexOf\0", "(II)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [indexOf](https://developer.android.com/reference/java/lang/String.html#indexOf(java.lang.String))
            pub fn indexOf_String<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "indexOf", .descriptor == "(Ljava/lang/String;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "indexOf\0", "(Ljava/lang/String;)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [indexOf](https://developer.android.com/reference/java/lang/String.html#indexOf(java.lang.String,%20int))
            pub fn indexOf_String_int<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "indexOf", .descriptor == "(Ljava/lang/String;I)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "indexOf\0", "(Ljava/lang/String;I)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [lastIndexOf](https://developer.android.com/reference/java/lang/String.html#lastIndexOf(java.lang.String))
            pub fn lastIndexOf_String<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "lastIndexOf", .descriptor == "(Ljava/lang/String;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/String\0",
                        "lastIndexOf\0",
                        "(Ljava/lang/String;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [lastIndexOf](https://developer.android.com/reference/java/lang/String.html#lastIndexOf(java.lang.String,%20int))
            pub fn lastIndexOf_String_int<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "lastIndexOf", .descriptor == "(Ljava/lang/String;I)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/String\0",
                        "lastIndexOf\0",
                        "(Ljava/lang/String;I)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [substring](https://developer.android.com/reference/java/lang/String.html#substring(int))
            pub fn substring_int<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "substring", .descriptor == "(I)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "substring\0", "(I)Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [substring](https://developer.android.com/reference/java/lang/String.html#substring(int,%20int))
            pub fn substring_int_int<'env>(
                &'env self,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "substring", .descriptor == "(II)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "substring\0", "(II)Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [concat](https://developer.android.com/reference/java/lang/String.html#concat(java.lang.String))
            pub fn concat<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC | NATIVE, .name == "concat", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/String\0",
                        "concat\0",
                        "(Ljava/lang/String;)Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [replace](https://developer.android.com/reference/java/lang/String.html#replace(char,%20char))
            pub fn replace_char_char<'env>(
                &'env self,
                arg0: u16,
                arg1: u16,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "replace", .descriptor == "(CC)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "replace\0", "(CC)Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [matches](https://developer.android.com/reference/java/lang/String.html#matches(java.lang.String))
            pub fn matches<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "matches", .descriptor == "(Ljava/lang/String;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "matches\0", "(Ljava/lang/String;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [replaceFirst](https://developer.android.com/reference/java/lang/String.html#replaceFirst(java.lang.String,%20java.lang.String))
            pub fn replaceFirst<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "replaceFirst", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/String\0",
                        "replaceFirst\0",
                        "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [replaceAll](https://developer.android.com/reference/java/lang/String.html#replaceAll(java.lang.String,%20java.lang.String))
            pub fn replaceAll<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "replaceAll", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/String\0",
                        "replaceAll\0",
                        "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [split](https://developer.android.com/reference/java/lang/String.html#split(java.lang.String,%20int))
            pub fn split_String_int<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<String, Throwable>>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "split", .descriptor == "(Ljava/lang/String;I)[Ljava/lang/String;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), ::java_spaghetti::AsJValue::as_jvalue(&arg1)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/String\0",
                        "split\0",
                        "(Ljava/lang/String;I)[Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [split](https://developer.android.com/reference/java/lang/String.html#split(java.lang.String))
            pub fn split_String<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<String, Throwable>>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "split", .descriptor == "(Ljava/lang/String;)[Ljava/lang/String;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/String\0",
                        "split\0",
                        "(Ljava/lang/String;)[Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toLowerCase](https://developer.android.com/reference/java/lang/String.html#toLowerCase())
            pub fn toLowerCase<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "toLowerCase", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "toLowerCase\0", "()Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toUpperCase](https://developer.android.com/reference/java/lang/String.html#toUpperCase())
            pub fn toUpperCase<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "toUpperCase", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "toUpperCase\0", "()Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [trim](https://developer.android.com/reference/java/lang/String.html#trim())
            pub fn trim<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "trim", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "trim\0", "()Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [strip](https://developer.android.com/reference/java/lang/String.html#strip())
            pub fn strip<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "strip", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "strip\0", "()Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [stripLeading](https://developer.android.com/reference/java/lang/String.html#stripLeading())
            pub fn stripLeading<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "stripLeading", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/String\0",
                        "stripLeading\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [stripTrailing](https://developer.android.com/reference/java/lang/String.html#stripTrailing())
            pub fn stripTrailing<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "stripTrailing", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/String\0",
                        "stripTrailing\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isBlank](https://developer.android.com/reference/java/lang/String.html#isBlank())
            pub fn isBlank<'env>(&'env self) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "isBlank", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "isBlank\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toString](https://developer.android.com/reference/java/lang/String.html#toString())
            pub fn toString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "toString\0", "()Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toCharArray](https://developer.android.com/reference/java/lang/String.html#toCharArray())
            pub fn toCharArray<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::CharArray>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC | NATIVE, .name == "toCharArray", .descriptor == "()[C"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "toCharArray\0", "()[C\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [format](https://developer.android.com/reference/java/lang/String.html#format(java.lang.String,%20java.lang.Object...))
            pub fn format_String_Object_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ObjectArray<Object, Throwable>>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC | STATIC | VARARGS, .name == "format", .descriptor == "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/lang/String\0",
                        "format\0",
                        "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [valueOf](https://developer.android.com/reference/java/lang/String.html#valueOf(java.lang.Object))
            pub fn valueOf_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC | STATIC, .name == "valueOf", .descriptor == "(Ljava/lang/Object;)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/lang/String\0",
                        "valueOf\0",
                        "(Ljava/lang/Object;)Ljava/lang/String;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [valueOf](https://developer.android.com/reference/java/lang/String.html#valueOf(char%5B%5D))
            pub fn valueOf_char_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC | STATIC, .name == "valueOf", .descriptor == "([C)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/lang/String\0",
                        "valueOf\0",
                        "([C)Ljava/lang/String;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [valueOf](https://developer.android.com/reference/java/lang/String.html#valueOf(char%5B%5D,%20int,%20int))
            pub fn valueOf_char_array_int_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC | STATIC, .name == "valueOf", .descriptor == "([CII)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/lang/String\0",
                        "valueOf\0",
                        "([CII)Ljava/lang/String;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [copyValueOf](https://developer.android.com/reference/java/lang/String.html#copyValueOf(char%5B%5D,%20int,%20int))
            pub fn copyValueOf_char_array_int_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC | STATIC, .name == "copyValueOf", .descriptor == "([CII)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/lang/String\0",
                        "copyValueOf\0",
                        "([CII)Ljava/lang/String;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [copyValueOf](https://developer.android.com/reference/java/lang/String.html#copyValueOf(char%5B%5D))
            pub fn copyValueOf_char_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC | STATIC, .name == "copyValueOf", .descriptor == "([C)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/lang/String\0",
                        "copyValueOf\0",
                        "([C)Ljava/lang/String;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [valueOf](https://developer.android.com/reference/java/lang/String.html#valueOf(boolean))
            pub fn valueOf_boolean<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: bool,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC | STATIC, .name == "valueOf", .descriptor == "(Z)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/lang/String\0",
                        "valueOf\0",
                        "(Z)Ljava/lang/String;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [valueOf](https://developer.android.com/reference/java/lang/String.html#valueOf(char))
            pub fn valueOf_char<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: u16,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC | STATIC, .name == "valueOf", .descriptor == "(C)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/lang/String\0",
                        "valueOf\0",
                        "(C)Ljava/lang/String;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [valueOf](https://developer.android.com/reference/java/lang/String.html#valueOf(int))
            pub fn valueOf_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC | STATIC, .name == "valueOf", .descriptor == "(I)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/lang/String\0",
                        "valueOf\0",
                        "(I)Ljava/lang/String;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [valueOf](https://developer.android.com/reference/java/lang/String.html#valueOf(long))
            pub fn valueOf_long<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: i64,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC | STATIC, .name == "valueOf", .descriptor == "(J)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/lang/String\0",
                        "valueOf\0",
                        "(J)Ljava/lang/String;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [valueOf](https://developer.android.com/reference/java/lang/String.html#valueOf(float))
            pub fn valueOf_float<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: f32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC | STATIC, .name == "valueOf", .descriptor == "(F)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/lang/String\0",
                        "valueOf\0",
                        "(F)Ljava/lang/String;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [valueOf](https://developer.android.com/reference/java/lang/String.html#valueOf(double))
            pub fn valueOf_double<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: f64,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC | STATIC, .name == "valueOf", .descriptor == "(D)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/lang/String\0",
                        "valueOf\0",
                        "(D)Ljava/lang/String;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [intern](https://developer.android.com/reference/java/lang/String.html#intern())
            pub fn intern<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC | NATIVE, .name == "intern", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "intern\0", "()Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [repeat](https://developer.android.com/reference/java/lang/String.html#repeat(int))
            pub fn repeat<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/String", java.flags == PUBLIC, .name == "repeat", .descriptor == "(I)Ljava/lang/String;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/String\0", "repeat\0", "(I)Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub class [Throwable](https://developer.android.com/reference/java/lang/Throwable.html)
        #[repr(transparent)]
        pub struct Throwable(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for Throwable {}

        unsafe impl ::java_spaghetti::JniType for Throwable {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("java/lang/Throwable\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<Object> for Throwable {}
        impl ::std::ops::Deref for Throwable {
            type Target = Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl Throwable {
            /// [Throwable](https://developer.android.com/reference/java/lang/Throwable.html#Throwable())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                // class.path == "java/lang/Throwable", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Throwable\0", "<init>\0", "()V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [Throwable](https://developer.android.com/reference/java/lang/Throwable.html#Throwable(java.lang.String))
            pub fn new_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                // class.path == "java/lang/Throwable", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Throwable\0", "<init>\0", "(Ljava/lang/String;)V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [Throwable](https://developer.android.com/reference/java/lang/Throwable.html#Throwable(java.lang.String,%20java.lang.Throwable))
            pub fn new_String_Throwable<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: impl ::java_spaghetti::AsArg<Throwable>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                // class.path == "java/lang/Throwable", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;Ljava/lang/Throwable;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Throwable\0",
                        "<init>\0",
                        "(Ljava/lang/String;Ljava/lang/Throwable;)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [Throwable](https://developer.android.com/reference/java/lang/Throwable.html#Throwable(java.lang.Throwable))
            pub fn new_Throwable<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<Throwable>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                // class.path == "java/lang/Throwable", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/Throwable;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Throwable\0",
                        "<init>\0",
                        "(Ljava/lang/Throwable;)V\0",
                    );
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getMessage](https://developer.android.com/reference/java/lang/Throwable.html#getMessage())
            pub fn getMessage<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Throwable", java.flags == PUBLIC, .name == "getMessage", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Throwable\0",
                        "getMessage\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getLocalizedMessage](https://developer.android.com/reference/java/lang/Throwable.html#getLocalizedMessage())
            pub fn getLocalizedMessage<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Throwable", java.flags == PUBLIC, .name == "getLocalizedMessage", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Throwable\0",
                        "getLocalizedMessage\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getCause](https://developer.android.com/reference/java/lang/Throwable.html#getCause())
            pub fn getCause<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Throwable>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Throwable", java.flags == PUBLIC | SYNCRONIZED, .name == "getCause", .descriptor == "()Ljava/lang/Throwable;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Throwable\0",
                        "getCause\0",
                        "()Ljava/lang/Throwable;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [initCause](https://developer.android.com/reference/java/lang/Throwable.html#initCause(java.lang.Throwable))
            pub fn initCause<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Throwable>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Throwable>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Throwable", java.flags == PUBLIC | SYNCRONIZED, .name == "initCause", .descriptor == "(Ljava/lang/Throwable;)Ljava/lang/Throwable;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Throwable\0",
                        "initCause\0",
                        "(Ljava/lang/Throwable;)Ljava/lang/Throwable;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toString](https://developer.android.com/reference/java/lang/Throwable.html#toString())
            pub fn toString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Throwable", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Throwable\0", "toString\0", "()Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [printStackTrace](https://developer.android.com/reference/java/lang/Throwable.html#printStackTrace())
            pub fn printStackTrace<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Throwable", java.flags == PUBLIC, .name == "printStackTrace", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/lang/Throwable\0", "printStackTrace\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [fillInStackTrace](https://developer.android.com/reference/java/lang/Throwable.html#fillInStackTrace())
            pub fn fillInStackTrace<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Throwable>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Throwable", java.flags == PUBLIC | SYNCRONIZED, .name == "fillInStackTrace", .descriptor == "()Ljava/lang/Throwable;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Throwable\0",
                        "fillInStackTrace\0",
                        "()Ljava/lang/Throwable;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getStackTrace](https://developer.android.com/reference/java/lang/Throwable.html#getStackTrace())
            pub fn getStackTrace<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<StackTraceElement, Throwable>>,
                >,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Throwable", java.flags == PUBLIC, .name == "getStackTrace", .descriptor == "()[Ljava/lang/StackTraceElement;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Throwable\0",
                        "getStackTrace\0",
                        "()[Ljava/lang/StackTraceElement;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setStackTrace](https://developer.android.com/reference/java/lang/Throwable.html#setStackTrace(java.lang.StackTraceElement%5B%5D))
            pub fn setStackTrace<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ObjectArray<StackTraceElement, Throwable>>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Throwable", java.flags == PUBLIC, .name == "setStackTrace", .descriptor == "([Ljava/lang/StackTraceElement;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Throwable\0",
                        "setStackTrace\0",
                        "([Ljava/lang/StackTraceElement;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [addSuppressed](https://developer.android.com/reference/java/lang/Throwable.html#addSuppressed(java.lang.Throwable))
            pub fn addSuppressed<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Throwable>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                // class.path == "java/lang/Throwable", java.flags == PUBLIC | FINAL | SYNCRONIZED, .name == "addSuppressed", .descriptor == "(Ljava/lang/Throwable;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Throwable\0",
                        "addSuppressed\0",
                        "(Ljava/lang/Throwable;)V\0",
                    );
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getSuppressed](https://developer.android.com/reference/java/lang/Throwable.html#getSuppressed())
            pub fn getSuppressed<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<Throwable, Throwable>>,
                >,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                // class.path == "java/lang/Throwable", java.flags == PUBLIC | FINAL | SYNCRONIZED, .name == "getSuppressed", .descriptor == "()[Ljava/lang/Throwable;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/lang/Throwable\0",
                        "getSuppressed\0",
                        "()[Ljava/lang/Throwable;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }
    }

    pub mod nio {

        /// pub class [Buffer](https://developer.android.com/reference/java/nio/Buffer.html)
        #[repr(transparent)]
        pub struct Buffer(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for Buffer {}

        unsafe impl ::java_spaghetti::JniType for Buffer {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("java/nio/Buffer\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for Buffer {}
        impl ::std::ops::Deref for Buffer {
            type Target = super::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl Buffer {
            /// [capacity](https://developer.android.com/reference/java/nio/Buffer.html#capacity())
            pub fn capacity<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/Buffer", java.flags == PUBLIC | FINAL, .name == "capacity", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/Buffer\0", "capacity\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [position](https://developer.android.com/reference/java/nio/Buffer.html#position())
            pub fn position<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/Buffer", java.flags == PUBLIC | FINAL, .name == "position", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/Buffer\0", "position\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [position](https://developer.android.com/reference/java/nio/Buffer.html#position(int))
            pub fn position_int<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Buffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/Buffer", java.flags == PUBLIC, .name == "position", .descriptor == "(I)Ljava/nio/Buffer;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/Buffer\0", "position\0", "(I)Ljava/nio/Buffer;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [limit](https://developer.android.com/reference/java/nio/Buffer.html#limit())
            pub fn limit<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/Buffer", java.flags == PUBLIC | FINAL, .name == "limit", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/Buffer\0", "limit\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [limit](https://developer.android.com/reference/java/nio/Buffer.html#limit(int))
            pub fn limit_int<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Buffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/Buffer", java.flags == PUBLIC, .name == "limit", .descriptor == "(I)Ljava/nio/Buffer;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/Buffer\0", "limit\0", "(I)Ljava/nio/Buffer;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [mark](https://developer.android.com/reference/java/nio/Buffer.html#mark())
            pub fn mark<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Buffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/Buffer", java.flags == PUBLIC, .name == "mark", .descriptor == "()Ljava/nio/Buffer;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/Buffer\0", "mark\0", "()Ljava/nio/Buffer;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [reset](https://developer.android.com/reference/java/nio/Buffer.html#reset())
            pub fn reset<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Buffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/Buffer", java.flags == PUBLIC, .name == "reset", .descriptor == "()Ljava/nio/Buffer;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/Buffer\0", "reset\0", "()Ljava/nio/Buffer;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [clear](https://developer.android.com/reference/java/nio/Buffer.html#clear())
            pub fn clear<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Buffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/Buffer", java.flags == PUBLIC, .name == "clear", .descriptor == "()Ljava/nio/Buffer;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/Buffer\0", "clear\0", "()Ljava/nio/Buffer;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [flip](https://developer.android.com/reference/java/nio/Buffer.html#flip())
            pub fn flip<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Buffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/Buffer", java.flags == PUBLIC, .name == "flip", .descriptor == "()Ljava/nio/Buffer;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/Buffer\0", "flip\0", "()Ljava/nio/Buffer;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [rewind](https://developer.android.com/reference/java/nio/Buffer.html#rewind())
            pub fn rewind<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Buffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/Buffer", java.flags == PUBLIC, .name == "rewind", .descriptor == "()Ljava/nio/Buffer;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/Buffer\0", "rewind\0", "()Ljava/nio/Buffer;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [remaining](https://developer.android.com/reference/java/nio/Buffer.html#remaining())
            pub fn remaining<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/Buffer", java.flags == PUBLIC | FINAL, .name == "remaining", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/Buffer\0", "remaining\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hasRemaining](https://developer.android.com/reference/java/nio/Buffer.html#hasRemaining())
            pub fn hasRemaining<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/Buffer", java.flags == PUBLIC | FINAL, .name == "hasRemaining", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/Buffer\0", "hasRemaining\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isReadOnly](https://developer.android.com/reference/java/nio/Buffer.html#isReadOnly())
            pub fn isReadOnly<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/Buffer", java.flags == PUBLIC | ABSTRACT, .name == "isReadOnly", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/Buffer\0", "isReadOnly\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hasArray](https://developer.android.com/reference/java/nio/Buffer.html#hasArray())
            pub fn hasArray<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/Buffer", java.flags == PUBLIC | ABSTRACT, .name == "hasArray", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/Buffer\0", "hasArray\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [array](https://developer.android.com/reference/java/nio/Buffer.html#array())
            pub fn array<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/Buffer", java.flags == PUBLIC | ABSTRACT, .name == "array", .descriptor == "()Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/Buffer\0", "array\0", "()Ljava/lang/Object;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [arrayOffset](https://developer.android.com/reference/java/nio/Buffer.html#arrayOffset())
            pub fn arrayOffset<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/Buffer", java.flags == PUBLIC | ABSTRACT, .name == "arrayOffset", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/Buffer\0", "arrayOffset\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isDirect](https://developer.android.com/reference/java/nio/Buffer.html#isDirect())
            pub fn isDirect<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/Buffer", java.flags == PUBLIC | ABSTRACT, .name == "isDirect", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/Buffer\0", "isDirect\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub class [ByteBuffer](https://developer.android.com/reference/java/nio/ByteBuffer.html)
        #[repr(transparent)]
        pub struct ByteBuffer(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for ByteBuffer {}

        unsafe impl ::java_spaghetti::JniType for ByteBuffer {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("java/nio/ByteBuffer\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<Buffer> for ByteBuffer {}
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for ByteBuffer {}
        impl ::std::ops::Deref for ByteBuffer {
            type Target = Buffer;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ByteBuffer {
            /// [allocateDirect](https://developer.android.com/reference/java/nio/ByteBuffer.html#allocateDirect(int))
            pub fn allocateDirect<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | STATIC, .name == "allocateDirect", .descriptor == "(I)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/nio/ByteBuffer\0",
                        "allocateDirect\0",
                        "(I)Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [allocate](https://developer.android.com/reference/java/nio/ByteBuffer.html#allocate(int))
            pub fn allocate<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | STATIC, .name == "allocate", .descriptor == "(I)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/nio/ByteBuffer\0",
                        "allocate\0",
                        "(I)Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [wrap](https://developer.android.com/reference/java/nio/ByteBuffer.html#wrap(byte%5B%5D,%20int,%20int))
            pub fn wrap_byte_array_int_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | STATIC, .name == "wrap", .descriptor == "([BII)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/nio/ByteBuffer\0",
                        "wrap\0",
                        "([BII)Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [wrap](https://developer.android.com/reference/java/nio/ByteBuffer.html#wrap(byte%5B%5D))
            pub fn wrap_byte_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | STATIC, .name == "wrap", .descriptor == "([B)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/nio/ByteBuffer\0",
                        "wrap\0",
                        "([B)Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [slice](https://developer.android.com/reference/java/nio/ByteBuffer.html#slice())
            pub fn slice<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "slice", .descriptor == "()Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "slice\0", "()Ljava/nio/ByteBuffer;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [duplicate](https://developer.android.com/reference/java/nio/ByteBuffer.html#duplicate())
            pub fn duplicate<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "duplicate", .descriptor == "()Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/nio/ByteBuffer\0",
                        "duplicate\0",
                        "()Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [asReadOnlyBuffer](https://developer.android.com/reference/java/nio/ByteBuffer.html#asReadOnlyBuffer())
            pub fn asReadOnlyBuffer<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "asReadOnlyBuffer", .descriptor == "()Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/nio/ByteBuffer\0",
                        "asReadOnlyBuffer\0",
                        "()Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [get](https://developer.android.com/reference/java/nio/ByteBuffer.html#get())
            pub fn get<'env>(
                &'env self,
            ) -> ::std::result::Result<i8, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "get", .descriptor == "()B"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "get\0", "()B\0");
                    __jni_env.call_byte_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [put](https://developer.android.com/reference/java/nio/ByteBuffer.html#put(byte))
            pub fn put_byte<'env>(
                &'env self,
                arg0: i8,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "put", .descriptor == "(B)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "put\0", "(B)Ljava/nio/ByteBuffer;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [get](https://developer.android.com/reference/java/nio/ByteBuffer.html#get(int))
            pub fn get_int<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<i8, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "get", .descriptor == "(I)B"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "get\0", "(I)B\0");
                    __jni_env.call_byte_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [put](https://developer.android.com/reference/java/nio/ByteBuffer.html#put(int,%20byte))
            pub fn put_int_byte<'env>(
                &'env self,
                arg0: i32,
                arg1: i8,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "put", .descriptor == "(IB)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "put\0", "(IB)Ljava/nio/ByteBuffer;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [get](https://developer.android.com/reference/java/nio/ByteBuffer.html#get(byte%5B%5D,%20int,%20int))
            pub fn get_byte_array_int_int<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC, .name == "get", .descriptor == "([BII)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/nio/ByteBuffer\0",
                        "get\0",
                        "([BII)Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [get](https://developer.android.com/reference/java/nio/ByteBuffer.html#get(byte%5B%5D))
            pub fn get_byte_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC, .name == "get", .descriptor == "([B)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "get\0", "([B)Ljava/nio/ByteBuffer;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [put](https://developer.android.com/reference/java/nio/ByteBuffer.html#put(java.nio.ByteBuffer))
            pub fn put_ByteBuffer<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<ByteBuffer>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC, .name == "put", .descriptor == "(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/nio/ByteBuffer\0",
                        "put\0",
                        "(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [put](https://developer.android.com/reference/java/nio/ByteBuffer.html#put(byte%5B%5D,%20int,%20int))
            pub fn put_byte_array_int_int<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC, .name == "put", .descriptor == "([BII)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/nio/ByteBuffer\0",
                        "put\0",
                        "([BII)Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [put](https://developer.android.com/reference/java/nio/ByteBuffer.html#put(byte%5B%5D))
            pub fn put_byte_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | FINAL, .name == "put", .descriptor == "([B)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "put\0", "([B)Ljava/nio/ByteBuffer;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hasArray](https://developer.android.com/reference/java/nio/ByteBuffer.html#hasArray())
            pub fn hasArray<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | FINAL, .name == "hasArray", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "hasArray\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [array](https://developer.android.com/reference/java/nio/ByteBuffer.html#array())
            pub fn array<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | FINAL, .name == "array", .descriptor == "()[B"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "array\0", "()[B\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [arrayOffset](https://developer.android.com/reference/java/nio/ByteBuffer.html#arrayOffset())
            pub fn arrayOffset<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | FINAL, .name == "arrayOffset", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "arrayOffset\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [position](https://developer.android.com/reference/java/nio/ByteBuffer.html#position(int))
            pub fn position<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Buffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC, .name == "position", .descriptor == "(I)Ljava/nio/Buffer;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "position\0", "(I)Ljava/nio/Buffer;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [limit](https://developer.android.com/reference/java/nio/ByteBuffer.html#limit(int))
            pub fn limit<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Buffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC, .name == "limit", .descriptor == "(I)Ljava/nio/Buffer;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "limit\0", "(I)Ljava/nio/Buffer;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [mark](https://developer.android.com/reference/java/nio/ByteBuffer.html#mark())
            pub fn mark<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Buffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC, .name == "mark", .descriptor == "()Ljava/nio/Buffer;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "mark\0", "()Ljava/nio/Buffer;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [reset](https://developer.android.com/reference/java/nio/ByteBuffer.html#reset())
            pub fn reset<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Buffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC, .name == "reset", .descriptor == "()Ljava/nio/Buffer;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "reset\0", "()Ljava/nio/Buffer;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [clear](https://developer.android.com/reference/java/nio/ByteBuffer.html#clear())
            pub fn clear<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Buffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC, .name == "clear", .descriptor == "()Ljava/nio/Buffer;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "clear\0", "()Ljava/nio/Buffer;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [flip](https://developer.android.com/reference/java/nio/ByteBuffer.html#flip())
            pub fn flip<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Buffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC, .name == "flip", .descriptor == "()Ljava/nio/Buffer;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "flip\0", "()Ljava/nio/Buffer;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [rewind](https://developer.android.com/reference/java/nio/ByteBuffer.html#rewind())
            pub fn rewind<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Buffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC, .name == "rewind", .descriptor == "()Ljava/nio/Buffer;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "rewind\0", "()Ljava/nio/Buffer;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [compact](https://developer.android.com/reference/java/nio/ByteBuffer.html#compact())
            pub fn compact<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "compact", .descriptor == "()Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/nio/ByteBuffer\0",
                        "compact\0",
                        "()Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isDirect](https://developer.android.com/reference/java/nio/ByteBuffer.html#isDirect())
            pub fn isDirect<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "isDirect", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "isDirect\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toString](https://developer.android.com/reference/java/nio/ByteBuffer.html#toString())
            pub fn toString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::String>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "toString\0", "()Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hashCode](https://developer.android.com/reference/java/nio/ByteBuffer.html#hashCode())
            pub fn hashCode<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "hashCode\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [equals](https://developer.android.com/reference/java/nio/ByteBuffer.html#equals(java.lang.Object))
            pub fn equals<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [compareTo](https://developer.android.com/reference/java/nio/ByteBuffer.html#compareTo(java.nio.ByteBuffer))
            pub fn compareTo_ByteBuffer<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<ByteBuffer>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC, .name == "compareTo", .descriptor == "(Ljava/nio/ByteBuffer;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/nio/ByteBuffer\0",
                        "compareTo\0",
                        "(Ljava/nio/ByteBuffer;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [alignmentOffset](https://developer.android.com/reference/java/nio/ByteBuffer.html#alignmentOffset(int,%20int))
            pub fn alignmentOffset<'env>(
                &'env self,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | FINAL, .name == "alignmentOffset", .descriptor == "(II)I"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "alignmentOffset\0", "(II)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [alignedSlice](https://developer.android.com/reference/java/nio/ByteBuffer.html#alignedSlice(int))
            pub fn alignedSlice<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | FINAL, .name == "alignedSlice", .descriptor == "(I)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/nio/ByteBuffer\0",
                        "alignedSlice\0",
                        "(I)Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getChar](https://developer.android.com/reference/java/nio/ByteBuffer.html#getChar())
            pub fn getChar<'env>(
                &'env self,
            ) -> ::std::result::Result<u16, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "getChar", .descriptor == "()C"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "getChar\0", "()C\0");
                    __jni_env.call_char_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putChar](https://developer.android.com/reference/java/nio/ByteBuffer.html#putChar(char))
            pub fn putChar_char<'env>(
                &'env self,
                arg0: u16,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "putChar", .descriptor == "(C)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/nio/ByteBuffer\0",
                        "putChar\0",
                        "(C)Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getChar](https://developer.android.com/reference/java/nio/ByteBuffer.html#getChar(int))
            pub fn getChar_int<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<u16, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "getChar", .descriptor == "(I)C"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "getChar\0", "(I)C\0");
                    __jni_env.call_char_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putChar](https://developer.android.com/reference/java/nio/ByteBuffer.html#putChar(int,%20char))
            pub fn putChar_int_char<'env>(
                &'env self,
                arg0: i32,
                arg1: u16,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "putChar", .descriptor == "(IC)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/nio/ByteBuffer\0",
                        "putChar\0",
                        "(IC)Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getShort](https://developer.android.com/reference/java/nio/ByteBuffer.html#getShort())
            pub fn getShort<'env>(
                &'env self,
            ) -> ::std::result::Result<i16, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "getShort", .descriptor == "()S"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "getShort\0", "()S\0");
                    __jni_env.call_short_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putShort](https://developer.android.com/reference/java/nio/ByteBuffer.html#putShort(short))
            pub fn putShort_short<'env>(
                &'env self,
                arg0: i16,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "putShort", .descriptor == "(S)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/nio/ByteBuffer\0",
                        "putShort\0",
                        "(S)Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getShort](https://developer.android.com/reference/java/nio/ByteBuffer.html#getShort(int))
            pub fn getShort_int<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<i16, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "getShort", .descriptor == "(I)S"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "getShort\0", "(I)S\0");
                    __jni_env.call_short_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putShort](https://developer.android.com/reference/java/nio/ByteBuffer.html#putShort(int,%20short))
            pub fn putShort_int_short<'env>(
                &'env self,
                arg0: i32,
                arg1: i16,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "putShort", .descriptor == "(IS)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/nio/ByteBuffer\0",
                        "putShort\0",
                        "(IS)Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getInt](https://developer.android.com/reference/java/nio/ByteBuffer.html#getInt())
            pub fn getInt<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "getInt", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "getInt\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putInt](https://developer.android.com/reference/java/nio/ByteBuffer.html#putInt(int))
            pub fn putInt_int<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "putInt", .descriptor == "(I)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/nio/ByteBuffer\0",
                        "putInt\0",
                        "(I)Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getInt](https://developer.android.com/reference/java/nio/ByteBuffer.html#getInt(int))
            pub fn getInt_int<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "getInt", .descriptor == "(I)I"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "getInt\0", "(I)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putInt](https://developer.android.com/reference/java/nio/ByteBuffer.html#putInt(int,%20int))
            pub fn putInt_int_int<'env>(
                &'env self,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "putInt", .descriptor == "(II)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/nio/ByteBuffer\0",
                        "putInt\0",
                        "(II)Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getLong](https://developer.android.com/reference/java/nio/ByteBuffer.html#getLong())
            pub fn getLong<'env>(
                &'env self,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "getLong", .descriptor == "()J"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "getLong\0", "()J\0");
                    __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putLong](https://developer.android.com/reference/java/nio/ByteBuffer.html#putLong(long))
            pub fn putLong_long<'env>(
                &'env self,
                arg0: i64,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "putLong", .descriptor == "(J)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/nio/ByteBuffer\0",
                        "putLong\0",
                        "(J)Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getLong](https://developer.android.com/reference/java/nio/ByteBuffer.html#getLong(int))
            pub fn getLong_int<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "getLong", .descriptor == "(I)J"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "getLong\0", "(I)J\0");
                    __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putLong](https://developer.android.com/reference/java/nio/ByteBuffer.html#putLong(int,%20long))
            pub fn putLong_int_long<'env>(
                &'env self,
                arg0: i32,
                arg1: i64,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "putLong", .descriptor == "(IJ)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/nio/ByteBuffer\0",
                        "putLong\0",
                        "(IJ)Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getFloat](https://developer.android.com/reference/java/nio/ByteBuffer.html#getFloat())
            pub fn getFloat<'env>(
                &'env self,
            ) -> ::std::result::Result<f32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "getFloat", .descriptor == "()F"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "getFloat\0", "()F\0");
                    __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putFloat](https://developer.android.com/reference/java/nio/ByteBuffer.html#putFloat(float))
            pub fn putFloat_float<'env>(
                &'env self,
                arg0: f32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "putFloat", .descriptor == "(F)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/nio/ByteBuffer\0",
                        "putFloat\0",
                        "(F)Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getFloat](https://developer.android.com/reference/java/nio/ByteBuffer.html#getFloat(int))
            pub fn getFloat_int<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<f32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "getFloat", .descriptor == "(I)F"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "getFloat\0", "(I)F\0");
                    __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putFloat](https://developer.android.com/reference/java/nio/ByteBuffer.html#putFloat(int,%20float))
            pub fn putFloat_int_float<'env>(
                &'env self,
                arg0: i32,
                arg1: f32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "putFloat", .descriptor == "(IF)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/nio/ByteBuffer\0",
                        "putFloat\0",
                        "(IF)Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDouble](https://developer.android.com/reference/java/nio/ByteBuffer.html#getDouble())
            pub fn getDouble<'env>(
                &'env self,
            ) -> ::std::result::Result<f64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "getDouble", .descriptor == "()D"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "getDouble\0", "()D\0");
                    __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putDouble](https://developer.android.com/reference/java/nio/ByteBuffer.html#putDouble(double))
            pub fn putDouble_double<'env>(
                &'env self,
                arg0: f64,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "putDouble", .descriptor == "(D)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/nio/ByteBuffer\0",
                        "putDouble\0",
                        "(D)Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getDouble](https://developer.android.com/reference/java/nio/ByteBuffer.html#getDouble(int))
            pub fn getDouble_int<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<f64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "getDouble", .descriptor == "(I)D"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/nio/ByteBuffer\0", "getDouble\0", "(I)D\0");
                    __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putDouble](https://developer.android.com/reference/java/nio/ByteBuffer.html#putDouble(int,%20double))
            pub fn putDouble_int_double<'env>(
                &'env self,
                arg0: i32,
                arg1: f64,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ByteBuffer>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/nio/ByteBuffer", java.flags == PUBLIC | ABSTRACT, .name == "putDouble", .descriptor == "(ID)Ljava/nio/ByteBuffer;"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/nio/ByteBuffer\0",
                        "putDouble\0",
                        "(ID)Ljava/nio/ByteBuffer;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }
    }

    pub mod util {

        /// pub class [AbstractCollection](https://developer.android.com/reference/java/util/AbstractCollection.html)
        #[repr(transparent)]
        pub struct AbstractCollection(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for AbstractCollection {}

        unsafe impl ::java_spaghetti::JniType for AbstractCollection {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("java/util/AbstractCollection\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for AbstractCollection {}
        impl ::std::ops::Deref for AbstractCollection {
            type Target = super::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl AbstractCollection {
            /// [iterator](https://developer.android.com/reference/java/util/AbstractCollection.html#iterator())
            pub fn iterator<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Iterator>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/AbstractCollection", java.flags == PUBLIC | ABSTRACT, .name == "iterator", .descriptor == "()Ljava/util/Iterator;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/AbstractCollection\0",
                        "iterator\0",
                        "()Ljava/util/Iterator;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [size](https://developer.android.com/reference/java/util/AbstractCollection.html#size())
            pub fn size<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/AbstractCollection", java.flags == PUBLIC | ABSTRACT, .name == "size", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/AbstractCollection\0", "size\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isEmpty](https://developer.android.com/reference/java/util/AbstractCollection.html#isEmpty())
            pub fn isEmpty<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/AbstractCollection", java.flags == PUBLIC, .name == "isEmpty", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/AbstractCollection\0", "isEmpty\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [contains](https://developer.android.com/reference/java/util/AbstractCollection.html#contains(java.lang.Object))
            pub fn contains<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/AbstractCollection", java.flags == PUBLIC, .name == "contains", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/AbstractCollection\0",
                        "contains\0",
                        "(Ljava/lang/Object;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toArray](https://developer.android.com/reference/java/util/AbstractCollection.html#toArray())
            pub fn toArray<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/AbstractCollection", java.flags == PUBLIC, .name == "toArray", .descriptor == "()[Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/AbstractCollection\0",
                        "toArray\0",
                        "()[Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toArray](https://developer.android.com/reference/java/util/AbstractCollection.html#toArray(java.lang.Object%5B%5D))
            pub fn toArray_Object_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                >,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/AbstractCollection", java.flags == PUBLIC, .name == "toArray", .descriptor == "([Ljava/lang/Object;)[Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/AbstractCollection\0",
                        "toArray\0",
                        "([Ljava/lang/Object;)[Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [add](https://developer.android.com/reference/java/util/AbstractCollection.html#add(java.lang.Object))
            pub fn add<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/AbstractCollection", java.flags == PUBLIC, .name == "add", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/AbstractCollection\0",
                        "add\0",
                        "(Ljava/lang/Object;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [remove](https://developer.android.com/reference/java/util/AbstractCollection.html#remove(java.lang.Object))
            pub fn remove<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/AbstractCollection", java.flags == PUBLIC, .name == "remove", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/AbstractCollection\0",
                        "remove\0",
                        "(Ljava/lang/Object;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [clear](https://developer.android.com/reference/java/util/AbstractCollection.html#clear())
            pub fn clear<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/AbstractCollection", java.flags == PUBLIC, .name == "clear", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/AbstractCollection\0", "clear\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toString](https://developer.android.com/reference/java/util/AbstractCollection.html#toString())
            pub fn toString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::String>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/AbstractCollection", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/AbstractCollection\0",
                        "toString\0",
                        "()Ljava/lang/String;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub class [AbstractList](https://developer.android.com/reference/java/util/AbstractList.html)
        #[repr(transparent)]
        pub struct AbstractList(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for AbstractList {}

        unsafe impl ::java_spaghetti::JniType for AbstractList {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("java/util/AbstractList\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<List> for AbstractList {}
        unsafe impl ::java_spaghetti::AssignableTo<AbstractCollection> for AbstractList {}
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for AbstractList {}
        impl ::std::ops::Deref for AbstractList {
            type Target = AbstractCollection;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<List> for AbstractList {
            fn as_ref(&self) -> &List {
                unsafe { &*(self as *const Self as *const List) }
            }
        }
        impl AbstractList {
            /// [add](https://developer.android.com/reference/java/util/AbstractList.html#add(java.lang.Object))
            pub fn add_Object<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/AbstractList", java.flags == PUBLIC, .name == "add", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/AbstractList\0", "add\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [get](https://developer.android.com/reference/java/util/AbstractList.html#get(int))
            pub fn get<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/AbstractList", java.flags == PUBLIC | ABSTRACT, .name == "get", .descriptor == "(I)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/AbstractList\0", "get\0", "(I)Ljava/lang/Object;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [set](https://developer.android.com/reference/java/util/AbstractList.html#set(int,%20java.lang.Object))
            pub fn set<'env>(
                &'env self,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/AbstractList", java.flags == PUBLIC, .name == "set", .descriptor == "(ILjava/lang/Object;)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/AbstractList\0",
                        "set\0",
                        "(ILjava/lang/Object;)Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [add](https://developer.android.com/reference/java/util/AbstractList.html#add(int,%20java.lang.Object))
            pub fn add_int_Object<'env>(
                &'env self,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/AbstractList", java.flags == PUBLIC, .name == "add", .descriptor == "(ILjava/lang/Object;)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/AbstractList\0", "add\0", "(ILjava/lang/Object;)V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [remove](https://developer.android.com/reference/java/util/AbstractList.html#remove(int))
            pub fn remove<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/AbstractList", java.flags == PUBLIC, .name == "remove", .descriptor == "(I)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/AbstractList\0",
                        "remove\0",
                        "(I)Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [indexOf](https://developer.android.com/reference/java/util/AbstractList.html#indexOf(java.lang.Object))
            pub fn indexOf<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/AbstractList", java.flags == PUBLIC, .name == "indexOf", .descriptor == "(Ljava/lang/Object;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/AbstractList\0",
                        "indexOf\0",
                        "(Ljava/lang/Object;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [lastIndexOf](https://developer.android.com/reference/java/util/AbstractList.html#lastIndexOf(java.lang.Object))
            pub fn lastIndexOf<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/AbstractList", java.flags == PUBLIC, .name == "lastIndexOf", .descriptor == "(Ljava/lang/Object;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/AbstractList\0",
                        "lastIndexOf\0",
                        "(Ljava/lang/Object;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [clear](https://developer.android.com/reference/java/util/AbstractList.html#clear())
            pub fn clear<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/AbstractList", java.flags == PUBLIC, .name == "clear", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/AbstractList\0", "clear\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [iterator](https://developer.android.com/reference/java/util/AbstractList.html#iterator())
            pub fn iterator<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Iterator>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/AbstractList", java.flags == PUBLIC, .name == "iterator", .descriptor == "()Ljava/util/Iterator;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/AbstractList\0",
                        "iterator\0",
                        "()Ljava/util/Iterator;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [subList](https://developer.android.com/reference/java/util/AbstractList.html#subList(int,%20int))
            pub fn subList<'env>(
                &'env self,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/AbstractList", java.flags == PUBLIC, .name == "subList", .descriptor == "(II)Ljava/util/List;"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/AbstractList\0",
                        "subList\0",
                        "(II)Ljava/util/List;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [equals](https://developer.android.com/reference/java/util/AbstractList.html#equals(java.lang.Object))
            pub fn equals<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/AbstractList", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/AbstractList\0",
                        "equals\0",
                        "(Ljava/lang/Object;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hashCode](https://developer.android.com/reference/java/util/AbstractList.html#hashCode())
            pub fn hashCode<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/AbstractList", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/AbstractList\0", "hashCode\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub class [ArrayList](https://developer.android.com/reference/java/util/ArrayList.html)
        #[repr(transparent)]
        pub struct ArrayList(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for ArrayList {}

        unsafe impl ::java_spaghetti::JniType for ArrayList {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("java/util/ArrayList\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<List> for ArrayList {}
        unsafe impl ::java_spaghetti::AssignableTo<AbstractList> for ArrayList {}
        unsafe impl ::java_spaghetti::AssignableTo<AbstractCollection> for ArrayList {}
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for ArrayList {}
        impl ::std::ops::Deref for ArrayList {
            type Target = AbstractList;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl ::std::convert::AsRef<List> for ArrayList {
            fn as_ref(&self) -> &List {
                unsafe { &*(self as *const Self as *const List) }
            }
        }
        impl ArrayList {
            /// [ArrayList](https://developer.android.com/reference/java/util/ArrayList.html#ArrayList(int))
            pub fn new_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "<init>", .descriptor == "(I)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/ArrayList\0", "<init>\0", "(I)V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [ArrayList](https://developer.android.com/reference/java/util/ArrayList.html#ArrayList())
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/ArrayList\0", "<init>\0", "()V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [trimToSize](https://developer.android.com/reference/java/util/ArrayList.html#trimToSize())
            pub fn trimToSize<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "trimToSize", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/ArrayList\0", "trimToSize\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [ensureCapacity](https://developer.android.com/reference/java/util/ArrayList.html#ensureCapacity(int))
            pub fn ensureCapacity<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "ensureCapacity", .descriptor == "(I)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/ArrayList\0", "ensureCapacity\0", "(I)V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [size](https://developer.android.com/reference/java/util/ArrayList.html#size())
            pub fn size<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "size", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/ArrayList\0", "size\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isEmpty](https://developer.android.com/reference/java/util/ArrayList.html#isEmpty())
            pub fn isEmpty<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "isEmpty", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/ArrayList\0", "isEmpty\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [contains](https://developer.android.com/reference/java/util/ArrayList.html#contains(java.lang.Object))
            pub fn contains<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "contains", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/ArrayList\0",
                        "contains\0",
                        "(Ljava/lang/Object;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [indexOf](https://developer.android.com/reference/java/util/ArrayList.html#indexOf(java.lang.Object))
            pub fn indexOf<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "indexOf", .descriptor == "(Ljava/lang/Object;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/ArrayList\0", "indexOf\0", "(Ljava/lang/Object;)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [lastIndexOf](https://developer.android.com/reference/java/util/ArrayList.html#lastIndexOf(java.lang.Object))
            pub fn lastIndexOf<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "lastIndexOf", .descriptor == "(Ljava/lang/Object;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/ArrayList\0",
                        "lastIndexOf\0",
                        "(Ljava/lang/Object;)I\0",
                    );
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [clone](https://developer.android.com/reference/java/util/ArrayList.html#clone())
            pub fn clone<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "clone", .descriptor == "()Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/ArrayList\0", "clone\0", "()Ljava/lang/Object;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toArray](https://developer.android.com/reference/java/util/ArrayList.html#toArray())
            pub fn toArray<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "toArray", .descriptor == "()[Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/ArrayList\0", "toArray\0", "()[Ljava/lang/Object;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toArray](https://developer.android.com/reference/java/util/ArrayList.html#toArray(java.lang.Object%5B%5D))
            pub fn toArray_Object_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                >,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "toArray", .descriptor == "([Ljava/lang/Object;)[Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/ArrayList\0",
                        "toArray\0",
                        "([Ljava/lang/Object;)[Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [get](https://developer.android.com/reference/java/util/ArrayList.html#get(int))
            pub fn get<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "get", .descriptor == "(I)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/ArrayList\0", "get\0", "(I)Ljava/lang/Object;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [set](https://developer.android.com/reference/java/util/ArrayList.html#set(int,%20java.lang.Object))
            pub fn set<'env>(
                &'env self,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "set", .descriptor == "(ILjava/lang/Object;)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/ArrayList\0",
                        "set\0",
                        "(ILjava/lang/Object;)Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [add](https://developer.android.com/reference/java/util/ArrayList.html#add(java.lang.Object))
            pub fn add_Object<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "add", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/ArrayList\0", "add\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [add](https://developer.android.com/reference/java/util/ArrayList.html#add(int,%20java.lang.Object))
            pub fn add_int_Object<'env>(
                &'env self,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "add", .descriptor == "(ILjava/lang/Object;)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/ArrayList\0", "add\0", "(ILjava/lang/Object;)V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [remove](https://developer.android.com/reference/java/util/ArrayList.html#remove(int))
            pub fn remove_int<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "remove", .descriptor == "(I)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/ArrayList\0", "remove\0", "(I)Ljava/lang/Object;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [remove](https://developer.android.com/reference/java/util/ArrayList.html#remove(java.lang.Object))
            pub fn remove_Object<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "remove", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/ArrayList\0", "remove\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [clear](https://developer.android.com/reference/java/util/ArrayList.html#clear())
            pub fn clear<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "clear", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/ArrayList\0", "clear\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [iterator](https://developer.android.com/reference/java/util/ArrayList.html#iterator())
            pub fn iterator<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Iterator>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "iterator", .descriptor == "()Ljava/util/Iterator;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/ArrayList\0",
                        "iterator\0",
                        "()Ljava/util/Iterator;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [subList](https://developer.android.com/reference/java/util/ArrayList.html#subList(int,%20int))
            pub fn subList<'env>(
                &'env self,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/ArrayList", java.flags == PUBLIC, .name == "subList", .descriptor == "(II)Ljava/util/List;"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/ArrayList\0", "subList\0", "(II)Ljava/util/List;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub interface [Iterator](https://developer.android.com/reference/java/util/Iterator.html)
        #[repr(transparent)]
        pub struct Iterator(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for Iterator {}

        unsafe impl ::java_spaghetti::JniType for Iterator {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("java/util/Iterator\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for Iterator {}
        impl ::std::ops::Deref for Iterator {
            type Target = super::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl Iterator {
            /// [hasNext](https://developer.android.com/reference/java/util/Iterator.html#hasNext())
            pub fn hasNext<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Iterator", java.flags == PUBLIC | ABSTRACT, .name == "hasNext", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Iterator\0", "hasNext\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [next](https://developer.android.com/reference/java/util/Iterator.html#next())
            pub fn next<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Iterator", java.flags == PUBLIC | ABSTRACT, .name == "next", .descriptor == "()Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Iterator\0", "next\0", "()Ljava/lang/Object;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [remove](https://developer.android.com/reference/java/util/Iterator.html#remove())
            pub fn remove<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Iterator", java.flags == PUBLIC, .name == "remove", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Iterator\0", "remove\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub interface [List](https://developer.android.com/reference/java/util/List.html)
        #[repr(transparent)]
        pub struct List(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for List {}

        unsafe impl ::java_spaghetti::JniType for List {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("java/util/List\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for List {}
        impl ::std::ops::Deref for List {
            type Target = super::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl List {
            /// [size](https://developer.android.com/reference/java/util/List.html#size())
            pub fn size<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/List", java.flags == PUBLIC | ABSTRACT, .name == "size", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/List\0", "size\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isEmpty](https://developer.android.com/reference/java/util/List.html#isEmpty())
            pub fn isEmpty<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/List", java.flags == PUBLIC | ABSTRACT, .name == "isEmpty", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/List\0", "isEmpty\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [contains](https://developer.android.com/reference/java/util/List.html#contains(java.lang.Object))
            pub fn contains<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/List", java.flags == PUBLIC | ABSTRACT, .name == "contains", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/List\0", "contains\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [iterator](https://developer.android.com/reference/java/util/List.html#iterator())
            pub fn iterator<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Iterator>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/List", java.flags == PUBLIC | ABSTRACT, .name == "iterator", .descriptor == "()Ljava/util/Iterator;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/List\0", "iterator\0", "()Ljava/util/Iterator;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toArray](https://developer.android.com/reference/java/util/List.html#toArray())
            pub fn toArray<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/List", java.flags == PUBLIC | ABSTRACT, .name == "toArray", .descriptor == "()[Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/List\0", "toArray\0", "()[Ljava/lang/Object;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toArray](https://developer.android.com/reference/java/util/List.html#toArray(java.lang.Object%5B%5D))
            pub fn toArray_Object_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                >,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/List", java.flags == PUBLIC | ABSTRACT, .name == "toArray", .descriptor == "([Ljava/lang/Object;)[Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/List\0",
                        "toArray\0",
                        "([Ljava/lang/Object;)[Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [add](https://developer.android.com/reference/java/util/List.html#add(java.lang.Object))
            pub fn add_Object<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/List", java.flags == PUBLIC | ABSTRACT, .name == "add", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/List\0", "add\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [remove](https://developer.android.com/reference/java/util/List.html#remove(java.lang.Object))
            pub fn remove_Object<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/List", java.flags == PUBLIC | ABSTRACT, .name == "remove", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/List\0", "remove\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [clear](https://developer.android.com/reference/java/util/List.html#clear())
            pub fn clear<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/List", java.flags == PUBLIC | ABSTRACT, .name == "clear", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/List\0", "clear\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [equals](https://developer.android.com/reference/java/util/List.html#equals(java.lang.Object))
            pub fn equals<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/List", java.flags == PUBLIC | ABSTRACT, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/List\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hashCode](https://developer.android.com/reference/java/util/List.html#hashCode())
            pub fn hashCode<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/List", java.flags == PUBLIC | ABSTRACT, .name == "hashCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/List\0", "hashCode\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [get](https://developer.android.com/reference/java/util/List.html#get(int))
            pub fn get<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/List", java.flags == PUBLIC | ABSTRACT, .name == "get", .descriptor == "(I)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/List\0", "get\0", "(I)Ljava/lang/Object;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [set](https://developer.android.com/reference/java/util/List.html#set(int,%20java.lang.Object))
            pub fn set<'env>(
                &'env self,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/List", java.flags == PUBLIC | ABSTRACT, .name == "set", .descriptor == "(ILjava/lang/Object;)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/List\0",
                        "set\0",
                        "(ILjava/lang/Object;)Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [add](https://developer.android.com/reference/java/util/List.html#add(int,%20java.lang.Object))
            pub fn add_int_Object<'env>(
                &'env self,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/List", java.flags == PUBLIC | ABSTRACT, .name == "add", .descriptor == "(ILjava/lang/Object;)V"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/List\0", "add\0", "(ILjava/lang/Object;)V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [remove](https://developer.android.com/reference/java/util/List.html#remove(int))
            pub fn remove_int<'env>(
                &'env self,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/List", java.flags == PUBLIC | ABSTRACT, .name == "remove", .descriptor == "(I)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/List\0", "remove\0", "(I)Ljava/lang/Object;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [indexOf](https://developer.android.com/reference/java/util/List.html#indexOf(java.lang.Object))
            pub fn indexOf<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/List", java.flags == PUBLIC | ABSTRACT, .name == "indexOf", .descriptor == "(Ljava/lang/Object;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/List\0", "indexOf\0", "(Ljava/lang/Object;)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [lastIndexOf](https://developer.android.com/reference/java/util/List.html#lastIndexOf(java.lang.Object))
            pub fn lastIndexOf<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/List", java.flags == PUBLIC | ABSTRACT, .name == "lastIndexOf", .descriptor == "(Ljava/lang/Object;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/List\0", "lastIndexOf\0", "(Ljava/lang/Object;)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [subList](https://developer.android.com/reference/java/util/List.html#subList(int,%20int))
            pub fn subList<'env>(
                &'env self,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/List", java.flags == PUBLIC | ABSTRACT, .name == "subList", .descriptor == "(II)Ljava/util/List;"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/List\0", "subList\0", "(II)Ljava/util/List;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/List.html#of())
            pub fn of<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/List", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "()Ljava/util/List;"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_static_method("java/util/List\0", "of\0", "()Ljava/util/List;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/List.html#of(java.lang.Object))
            pub fn of_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/List", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;)Ljava/util/List;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/util/List\0",
                        "of\0",
                        "(Ljava/lang/Object;)Ljava/util/List;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/List.html#of(java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/List", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/util/List\0",
                        "of\0",
                        "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/List.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/List", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue(), arg2.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/util/List\0",
                        "of\0",
                        "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/List.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/List", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/util/List\0",
                        "of\0",
                        "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/List.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/List", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/List\0", "of\0", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/List.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/List", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                        arg5.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/List\0", "of\0", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/List.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/List", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                        arg5.as_arg_jvalue(),
                        arg6.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/List\0", "of\0", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/List.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/List", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                        arg5.as_arg_jvalue(),
                        arg6.as_arg_jvalue(),
                        arg7.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/List\0", "of\0", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/List.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg8: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/List", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                        arg5.as_arg_jvalue(),
                        arg6.as_arg_jvalue(),
                        arg7.as_arg_jvalue(),
                        arg8.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/List\0", "of\0", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/List.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg8: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg9: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/List", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                        arg5.as_arg_jvalue(),
                        arg6.as_arg_jvalue(),
                        arg7.as_arg_jvalue(),
                        arg8.as_arg_jvalue(),
                        arg9.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/List\0", "of\0", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/List.html#of(java.lang.Object...))
            pub fn of_Object_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                >,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, List>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/List", java.flags == PUBLIC | STATIC | VARARGS, .name == "of", .descriptor == "([Ljava/lang/Object;)Ljava/util/List;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/util/List\0",
                        "of\0",
                        "([Ljava/lang/Object;)Ljava/util/List;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub interface [Map](https://developer.android.com/reference/java/util/Map.html)
        #[repr(transparent)]
        pub struct Map(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for Map {}

        unsafe impl ::java_spaghetti::JniType for Map {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("java/util/Map\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for Map {}
        impl ::std::ops::Deref for Map {
            type Target = super::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl Map {
            /// [size](https://developer.android.com/reference/java/util/Map.html#size())
            pub fn size<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Map", java.flags == PUBLIC | ABSTRACT, .name == "size", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Map\0", "size\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isEmpty](https://developer.android.com/reference/java/util/Map.html#isEmpty())
            pub fn isEmpty<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Map", java.flags == PUBLIC | ABSTRACT, .name == "isEmpty", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Map\0", "isEmpty\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [containsKey](https://developer.android.com/reference/java/util/Map.html#containsKey(java.lang.Object))
            pub fn containsKey<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Map", java.flags == PUBLIC | ABSTRACT, .name == "containsKey", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Map\0", "containsKey\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [containsValue](https://developer.android.com/reference/java/util/Map.html#containsValue(java.lang.Object))
            pub fn containsValue<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Map", java.flags == PUBLIC | ABSTRACT, .name == "containsValue", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Map\0", "containsValue\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [get](https://developer.android.com/reference/java/util/Map.html#get(java.lang.Object))
            pub fn get<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC | ABSTRACT, .name == "get", .descriptor == "(Ljava/lang/Object;)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/Map\0",
                        "get\0",
                        "(Ljava/lang/Object;)Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [put](https://developer.android.com/reference/java/util/Map.html#put(java.lang.Object,%20java.lang.Object))
            pub fn put<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC | ABSTRACT, .name == "put", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/Map\0",
                        "put\0",
                        "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [remove](https://developer.android.com/reference/java/util/Map.html#remove(java.lang.Object))
            pub fn remove_Object<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC | ABSTRACT, .name == "remove", .descriptor == "(Ljava/lang/Object;)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/Map\0",
                        "remove\0",
                        "(Ljava/lang/Object;)Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putAll](https://developer.android.com/reference/java/util/Map.html#putAll(java.util.Map))
            pub fn putAll<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<Map>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Map", java.flags == PUBLIC | ABSTRACT, .name == "putAll", .descriptor == "(Ljava/util/Map;)V"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Map\0", "putAll\0", "(Ljava/util/Map;)V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [clear](https://developer.android.com/reference/java/util/Map.html#clear())
            pub fn clear<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Map", java.flags == PUBLIC | ABSTRACT, .name == "clear", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Map\0", "clear\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [keySet](https://developer.android.com/reference/java/util/Map.html#keySet())
            pub fn keySet<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC | ABSTRACT, .name == "keySet", .descriptor == "()Ljava/util/Set;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Map\0", "keySet\0", "()Ljava/util/Set;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [entrySet](https://developer.android.com/reference/java/util/Map.html#entrySet())
            pub fn entrySet<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC | ABSTRACT, .name == "entrySet", .descriptor == "()Ljava/util/Set;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Map\0", "entrySet\0", "()Ljava/util/Set;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [equals](https://developer.android.com/reference/java/util/Map.html#equals(java.lang.Object))
            pub fn equals<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Map", java.flags == PUBLIC | ABSTRACT, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Map\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hashCode](https://developer.android.com/reference/java/util/Map.html#hashCode())
            pub fn hashCode<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Map", java.flags == PUBLIC | ABSTRACT, .name == "hashCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Map\0", "hashCode\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getOrDefault](https://developer.android.com/reference/java/util/Map.html#getOrDefault(java.lang.Object,%20java.lang.Object))
            pub fn getOrDefault<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC, .name == "getOrDefault", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/Map\0",
                        "getOrDefault\0",
                        "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [putIfAbsent](https://developer.android.com/reference/java/util/Map.html#putIfAbsent(java.lang.Object,%20java.lang.Object))
            pub fn putIfAbsent<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC, .name == "putIfAbsent", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/Map\0",
                        "putIfAbsent\0",
                        "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [remove](https://developer.android.com/reference/java/util/Map.html#remove(java.lang.Object,%20java.lang.Object))
            pub fn remove_Object_Object<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Map", java.flags == PUBLIC, .name == "remove", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/Map\0",
                        "remove\0",
                        "(Ljava/lang/Object;Ljava/lang/Object;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [replace](https://developer.android.com/reference/java/util/Map.html#replace(java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn replace_Object_Object_Object<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Map", java.flags == PUBLIC, .name == "replace", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue(), arg2.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/Map\0",
                        "replace\0",
                        "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z\0",
                    );
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [replace](https://developer.android.com/reference/java/util/Map.html#replace(java.lang.Object,%20java.lang.Object))
            pub fn replace_Object_Object<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC, .name == "replace", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/Map\0",
                        "replace\0",
                        "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Map.html#of())
            pub fn of<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "()Ljava/util/Map;"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_static_method("java/util/Map\0", "of\0", "()Ljava/util/Map;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Map.html#of(java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/util/Map\0",
                        "of\0",
                        "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Map.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/util/Map\0",
                        "of\0",
                        "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Map.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                        arg5.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Map\0", "of\0", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Map.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                        arg5.as_arg_jvalue(),
                        arg6.as_arg_jvalue(),
                        arg7.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Map\0", "of\0", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Map.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg8: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg9: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                        arg5.as_arg_jvalue(),
                        arg6.as_arg_jvalue(),
                        arg7.as_arg_jvalue(),
                        arg8.as_arg_jvalue(),
                        arg9.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Map\0", "of\0", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Map.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg8: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg9: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg10: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg11: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                        arg5.as_arg_jvalue(),
                        arg6.as_arg_jvalue(),
                        arg7.as_arg_jvalue(),
                        arg8.as_arg_jvalue(),
                        arg9.as_arg_jvalue(),
                        arg10.as_arg_jvalue(),
                        arg11.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Map\0", "of\0", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Map.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object<
                'env,
            >(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg8: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg9: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg10: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg11: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg12: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg13: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                        arg5.as_arg_jvalue(),
                        arg6.as_arg_jvalue(),
                        arg7.as_arg_jvalue(),
                        arg8.as_arg_jvalue(),
                        arg9.as_arg_jvalue(),
                        arg10.as_arg_jvalue(),
                        arg11.as_arg_jvalue(),
                        arg12.as_arg_jvalue(),
                        arg13.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Map\0", "of\0", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Map.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object<
                'env,
            >(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg8: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg9: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg10: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg11: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg12: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg13: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg14: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg15: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                        arg5.as_arg_jvalue(),
                        arg6.as_arg_jvalue(),
                        arg7.as_arg_jvalue(),
                        arg8.as_arg_jvalue(),
                        arg9.as_arg_jvalue(),
                        arg10.as_arg_jvalue(),
                        arg11.as_arg_jvalue(),
                        arg12.as_arg_jvalue(),
                        arg13.as_arg_jvalue(),
                        arg14.as_arg_jvalue(),
                        arg15.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Map\0", "of\0", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Map.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object<
                'env,
            >(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg8: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg9: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg10: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg11: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg12: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg13: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg14: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg15: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg16: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg17: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                        arg5.as_arg_jvalue(),
                        arg6.as_arg_jvalue(),
                        arg7.as_arg_jvalue(),
                        arg8.as_arg_jvalue(),
                        arg9.as_arg_jvalue(),
                        arg10.as_arg_jvalue(),
                        arg11.as_arg_jvalue(),
                        arg12.as_arg_jvalue(),
                        arg13.as_arg_jvalue(),
                        arg14.as_arg_jvalue(),
                        arg15.as_arg_jvalue(),
                        arg16.as_arg_jvalue(),
                        arg17.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Map\0", "of\0", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Map.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object<
                'env,
            >(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg8: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg9: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg10: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg11: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg12: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg13: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg14: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg15: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg16: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg17: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg18: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg19: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                        arg5.as_arg_jvalue(),
                        arg6.as_arg_jvalue(),
                        arg7.as_arg_jvalue(),
                        arg8.as_arg_jvalue(),
                        arg9.as_arg_jvalue(),
                        arg10.as_arg_jvalue(),
                        arg11.as_arg_jvalue(),
                        arg12.as_arg_jvalue(),
                        arg13.as_arg_jvalue(),
                        arg14.as_arg_jvalue(),
                        arg15.as_arg_jvalue(),
                        arg16.as_arg_jvalue(),
                        arg17.as_arg_jvalue(),
                        arg18.as_arg_jvalue(),
                        arg19.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Map\0", "of\0", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [ofEntries](https://developer.android.com/reference/java/util/Map.html#ofEntries(java.util.Map.Entry...))
            pub fn ofEntries<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ObjectArray<Map_Entry, super::lang::Throwable>>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC | STATIC | VARARGS, .name == "ofEntries", .descriptor == "([Ljava/util/Map$Entry;)Ljava/util/Map;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/util/Map\0",
                        "ofEntries\0",
                        "([Ljava/util/Map$Entry;)Ljava/util/Map;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [entry](https://developer.android.com/reference/java/util/Map.html#entry(java.lang.Object,%20java.lang.Object))
            pub fn entry<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map_Entry>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC | STATIC, .name == "entry", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map$Entry;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/util/Map\0",
                        "entry\0",
                        "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map$Entry;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [copyOf](https://developer.android.com/reference/java/util/Map.html#copyOf(java.util.Map))
            pub fn copyOf<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<Map>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Map>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map", java.flags == PUBLIC | STATIC, .name == "copyOf", .descriptor == "(Ljava/util/Map;)Ljava/util/Map;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/util/Map\0",
                        "copyOf\0",
                        "(Ljava/util/Map;)Ljava/util/Map;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub interface [Map.Entry](https://developer.android.com/reference/java/util/Map.Entry.html)
        #[repr(transparent)]
        pub struct Map_Entry(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for Map_Entry {}

        unsafe impl ::java_spaghetti::JniType for Map_Entry {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("java/util/Map$Entry\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for Map_Entry {}
        impl ::std::ops::Deref for Map_Entry {
            type Target = super::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl Map_Entry {
            /// [getKey](https://developer.android.com/reference/java/util/Map.Entry.html#getKey())
            pub fn getKey<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map$Entry", java.flags == PUBLIC | ABSTRACT, .name == "getKey", .descriptor == "()Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Map$Entry\0", "getKey\0", "()Ljava/lang/Object;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getValue](https://developer.android.com/reference/java/util/Map.Entry.html#getValue())
            pub fn getValue<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map$Entry", java.flags == PUBLIC | ABSTRACT, .name == "getValue", .descriptor == "()Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Map$Entry\0", "getValue\0", "()Ljava/lang/Object;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [setValue](https://developer.android.com/reference/java/util/Map.Entry.html#setValue(java.lang.Object))
            pub fn setValue<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Map$Entry", java.flags == PUBLIC | ABSTRACT, .name == "setValue", .descriptor == "(Ljava/lang/Object;)Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/Map$Entry\0",
                        "setValue\0",
                        "(Ljava/lang/Object;)Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [equals](https://developer.android.com/reference/java/util/Map.Entry.html#equals(java.lang.Object))
            pub fn equals<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Map$Entry", java.flags == PUBLIC | ABSTRACT, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Map$Entry\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hashCode](https://developer.android.com/reference/java/util/Map.Entry.html#hashCode())
            pub fn hashCode<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Map$Entry", java.flags == PUBLIC | ABSTRACT, .name == "hashCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Map$Entry\0", "hashCode\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub interface [Set](https://developer.android.com/reference/java/util/Set.html)
        #[repr(transparent)]
        pub struct Set(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for Set {}

        unsafe impl ::java_spaghetti::JniType for Set {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("java/util/Set\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for Set {}
        impl ::std::ops::Deref for Set {
            type Target = super::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl Set {
            /// [size](https://developer.android.com/reference/java/util/Set.html#size())
            pub fn size<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Set", java.flags == PUBLIC | ABSTRACT, .name == "size", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Set\0", "size\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [isEmpty](https://developer.android.com/reference/java/util/Set.html#isEmpty())
            pub fn isEmpty<'env>(
                &'env self,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Set", java.flags == PUBLIC | ABSTRACT, .name == "isEmpty", .descriptor == "()Z"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Set\0", "isEmpty\0", "()Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [contains](https://developer.android.com/reference/java/util/Set.html#contains(java.lang.Object))
            pub fn contains<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Set", java.flags == PUBLIC | ABSTRACT, .name == "contains", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Set\0", "contains\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [iterator](https://developer.android.com/reference/java/util/Set.html#iterator())
            pub fn iterator<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Iterator>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Set", java.flags == PUBLIC | ABSTRACT, .name == "iterator", .descriptor == "()Ljava/util/Iterator;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Set\0", "iterator\0", "()Ljava/util/Iterator;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toArray](https://developer.android.com/reference/java/util/Set.html#toArray())
            pub fn toArray<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Set", java.flags == PUBLIC | ABSTRACT, .name == "toArray", .descriptor == "()[Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Set\0", "toArray\0", "()[Ljava/lang/Object;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toArray](https://developer.android.com/reference/java/util/Set.html#toArray(java.lang.Object%5B%5D))
            pub fn toArray_Object_array<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                >,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Set", java.flags == PUBLIC | ABSTRACT, .name == "toArray", .descriptor == "([Ljava/lang/Object;)[Ljava/lang/Object;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) = __jni_env.require_class_method(
                        "java/util/Set\0",
                        "toArray\0",
                        "([Ljava/lang/Object;)[Ljava/lang/Object;\0",
                    );
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [add](https://developer.android.com/reference/java/util/Set.html#add(java.lang.Object))
            pub fn add<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Set", java.flags == PUBLIC | ABSTRACT, .name == "add", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Set\0", "add\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [remove](https://developer.android.com/reference/java/util/Set.html#remove(java.lang.Object))
            pub fn remove<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Set", java.flags == PUBLIC | ABSTRACT, .name == "remove", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Set\0", "remove\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [clear](https://developer.android.com/reference/java/util/Set.html#clear())
            pub fn clear<'env>(
                &'env self,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Set", java.flags == PUBLIC | ABSTRACT, .name == "clear", .descriptor == "()V"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Set\0", "clear\0", "()V\0");
                    __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [equals](https://developer.android.com/reference/java/util/Set.html#equals(java.lang.Object))
            pub fn equals<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Set", java.flags == PUBLIC | ABSTRACT, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Set\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hashCode](https://developer.android.com/reference/java/util/Set.html#hashCode())
            pub fn hashCode<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/Set", java.flags == PUBLIC | ABSTRACT, .name == "hashCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/Set\0", "hashCode\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Set.html#of())
            pub fn of<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Set", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "()Ljava/util/Set;"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_static_method("java/util/Set\0", "of\0", "()Ljava/util/Set;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Set.html#of(java.lang.Object))
            pub fn of_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Set", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;)Ljava/util/Set;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/util/Set\0",
                        "of\0",
                        "(Ljava/lang/Object;)Ljava/util/Set;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Set.html#of(java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Set", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/util/Set\0",
                        "of\0",
                        "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Set.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Set", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue(), arg1.as_arg_jvalue(), arg2.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/util/Set\0",
                        "of\0",
                        "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Set.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Set", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/util/Set\0",
                        "of\0",
                        "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Set.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Set", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Set\0", "of\0", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Set.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Set", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                        arg5.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Set\0", "of\0", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Set.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Set", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                        arg5.as_arg_jvalue(),
                        arg6.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Set\0", "of\0", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Set.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Set", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                        arg5.as_arg_jvalue(),
                        arg6.as_arg_jvalue(),
                        arg7.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Set\0", "of\0", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Set.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg8: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Set", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                        arg5.as_arg_jvalue(),
                        arg6.as_arg_jvalue(),
                        arg7.as_arg_jvalue(),
                        arg8.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Set\0", "of\0", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Set.html#of(java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object,%20java.lang.Object))
            pub fn of_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg1: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg2: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg3: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg4: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg5: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg6: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg7: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg8: impl ::java_spaghetti::AsArg<super::lang::Object>,
                arg9: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Set", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;"
                unsafe {
                    let __jni_args = [
                        arg0.as_arg_jvalue(),
                        arg1.as_arg_jvalue(),
                        arg2.as_arg_jvalue(),
                        arg3.as_arg_jvalue(),
                        arg4.as_arg_jvalue(),
                        arg5.as_arg_jvalue(),
                        arg6.as_arg_jvalue(),
                        arg7.as_arg_jvalue(),
                        arg8.as_arg_jvalue(),
                        arg9.as_arg_jvalue(),
                    ];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Set\0", "of\0", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;\0");
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [of](https://developer.android.com/reference/java/util/Set.html#of(java.lang.Object...))
            pub fn of_Object_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<super::lang::Object, super::lang::Throwable>,
                >,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Set>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/Set", java.flags == PUBLIC | STATIC | VARARGS, .name == "of", .descriptor == "([Ljava/lang/Object;)Ljava/util/Set;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/util/Set\0",
                        "of\0",
                        "([Ljava/lang/Object;)Ljava/util/Set;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
        }

        /// pub final class [UUID](https://developer.android.com/reference/java/util/UUID.html)
        #[repr(transparent)]
        pub struct UUID(pub(crate) ::java_spaghetti::ObjectAndEnv);
        unsafe impl ::java_spaghetti::ReferenceType for UUID {}

        unsafe impl ::java_spaghetti::JniType for UUID {
            fn static_with_jni_type<R>(callback: impl FnOnce(&str) -> R) -> R {
                callback("java/util/UUID\0")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for UUID {}
        impl ::std::ops::Deref for UUID {
            type Target = super::lang::Object;
            fn deref(&self) -> &Self::Target {
                unsafe { &*(self as *const Self as *const Self::Target) }
            }
        }
        impl UUID {
            /// [UUID](https://developer.android.com/reference/java/util/UUID.html#UUID(long,%20long))
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: i64,
                arg1: i64,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/UUID", java.flags == PUBLIC, .name == "<init>", .descriptor == "(JJ)V"
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/UUID\0", "<init>\0", "(JJ)V\0");
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [randomUUID](https://developer.android.com/reference/java/util/UUID.html#randomUUID())
            pub fn randomUUID<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, UUID>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/UUID", java.flags == PUBLIC | STATIC, .name == "randomUUID", .descriptor == "()Ljava/util/UUID;"
                unsafe {
                    let __jni_args = [];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/util/UUID\0",
                        "randomUUID\0",
                        "()Ljava/util/UUID;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [nameUUIDFromBytes](https://developer.android.com/reference/java/util/UUID.html#nameUUIDFromBytes(byte%5B%5D))
            pub fn nameUUIDFromBytes<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, UUID>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/UUID", java.flags == PUBLIC | STATIC, .name == "nameUUIDFromBytes", .descriptor == "([B)Ljava/util/UUID;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/util/UUID\0",
                        "nameUUIDFromBytes\0",
                        "([B)Ljava/util/UUID;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [fromString](https://developer.android.com/reference/java/util/UUID.html#fromString(java.lang.String))
            pub fn fromString<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, UUID>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/UUID", java.flags == PUBLIC | STATIC, .name == "fromString", .descriptor == "(Ljava/lang/String;)Ljava/util/UUID;"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let (__jni_class, __jni_method) = __jni_env.require_class_static_method(
                        "java/util/UUID\0",
                        "fromString\0",
                        "(Ljava/lang/String;)Ljava/util/UUID;\0",
                    );
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getLeastSignificantBits](https://developer.android.com/reference/java/util/UUID.html#getLeastSignificantBits())
            pub fn getLeastSignificantBits<'env>(
                &'env self,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/UUID", java.flags == PUBLIC, .name == "getLeastSignificantBits", .descriptor == "()J"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/UUID\0", "getLeastSignificantBits\0", "()J\0");
                    __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [getMostSignificantBits](https://developer.android.com/reference/java/util/UUID.html#getMostSignificantBits())
            pub fn getMostSignificantBits<'env>(
                &'env self,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/UUID", java.flags == PUBLIC, .name == "getMostSignificantBits", .descriptor == "()J"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/UUID\0", "getMostSignificantBits\0", "()J\0");
                    __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [version](https://developer.android.com/reference/java/util/UUID.html#version())
            pub fn version<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/UUID", java.flags == PUBLIC, .name == "version", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/UUID\0", "version\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [variant](https://developer.android.com/reference/java/util/UUID.html#variant())
            pub fn variant<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/UUID", java.flags == PUBLIC, .name == "variant", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/UUID\0", "variant\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [timestamp](https://developer.android.com/reference/java/util/UUID.html#timestamp())
            pub fn timestamp<'env>(
                &'env self,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/UUID", java.flags == PUBLIC, .name == "timestamp", .descriptor == "()J"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/UUID\0", "timestamp\0", "()J\0");
                    __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [clockSequence](https://developer.android.com/reference/java/util/UUID.html#clockSequence())
            pub fn clockSequence<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/UUID", java.flags == PUBLIC, .name == "clockSequence", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/UUID\0", "clockSequence\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [node](https://developer.android.com/reference/java/util/UUID.html#node())
            pub fn node<'env>(
                &'env self,
            ) -> ::std::result::Result<i64, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/UUID", java.flags == PUBLIC, .name == "node", .descriptor == "()J"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/UUID\0", "node\0", "()J\0");
                    __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [toString](https://developer.android.com/reference/java/util/UUID.html#toString())
            pub fn toString<'env>(
                &'env self,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::String>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                // class.path == "java/util/UUID", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/UUID\0", "toString\0", "()Ljava/lang/String;\0");
                    __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [hashCode](https://developer.android.com/reference/java/util/UUID.html#hashCode())
            pub fn hashCode<'env>(
                &'env self,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/UUID", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
                unsafe {
                    let __jni_args = [];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/UUID\0", "hashCode\0", "()I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [equals](https://developer.android.com/reference/java/util/UUID.html#equals(java.lang.Object))
            pub fn equals<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<super::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/UUID", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/UUID\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                    __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }

            /// [compareTo](https://developer.android.com/reference/java/util/UUID.html#compareTo(java.util.UUID))
            pub fn compareTo_UUID<'env>(
                &'env self,
                arg0: impl ::java_spaghetti::AsArg<UUID>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                // class.path == "java/util/UUID", java.flags == PUBLIC, .name == "compareTo", .descriptor == "(Ljava/util/UUID;)I"
                unsafe {
                    let __jni_args = [arg0.as_arg_jvalue()];
                    let __jni_env = ::java_spaghetti::Env::from_raw(self.0.env);
                    let (__jni_class, __jni_method) =
                        __jni_env.require_class_method("java/util/UUID\0", "compareTo\0", "(Ljava/util/UUID;)I\0");
                    __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
                }
            }
        }
    }
}
